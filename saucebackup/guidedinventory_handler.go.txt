// C:\Users\wasab\OneDrive\デスクトップ\WASABI\guidedinventory\handler.go

package guidedinventory

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"wasabi/db"
	"wasabi/model"
	"wasabi/units"
)

// ▼▼▼ [修正点] 画面表示専用のデータ構造を定義 ▼▼▼
type StockLedgerPackageGroupView struct {
	model.StockLedgerPackageGroup
	Masters []model.ProductMasterView `json:"masters"`
}

type StockLedgerYJGroupView struct {
	model.StockLedgerYJGroup
	PackageLedgers []StockLedgerPackageGroupView `json:"packageLedgers"`
}

// ▼▼▼ [修正箇所] ResponseDataView構造体にDeadStockDetailsを追加 ▼▼▼
type ResponseDataView struct {
	StockLedger      []StockLedgerYJGroupView  `json:"stockLedger"`
	PrecompDetails   []model.TransactionRecord `json:"precompDetails"`
	DeadStockDetails []model.DeadStockRecord   `json:"deadStockDetails"`
}

// ▲▲▲ 修正ここまで ▲▲▲

func GetInventoryDataHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		q := r.URL.Query()
		filters := model.AggregationFilters{
			StartDate: q.Get("startDate"),
			EndDate:   q.Get("endDate"),
			YjCode:    q.Get("yjCode"),
		}

		if filters.YjCode == "" || filters.StartDate == "" || filters.EndDate == "" {
			http.Error(w, "yjCode, startDate, and endDate are required parameters", http.StatusBadRequest)
			return
		}

		stockLedger, err := db.GetStockLedger(conn, filters)
		if err != nil {
			http.Error(w, "Failed to get stock ledger: "+err.Error(), http.StatusInternalServerError)
			return
		}

		// ▼▼▼ [修正点] 取得したデータを画面表示用の構造に変換する処理を追加 ▼▼▼
		stockLedgerView := make([]StockLedgerYJGroupView, 0, len(stockLedger))
		var productCodes []string

		for _, yjGroup := range stockLedger {
			newYjGroupView := StockLedgerYJGroupView{
				StockLedgerYJGroup: yjGroup,
				PackageLedgers:     make([]StockLedgerPackageGroupView, 0, len(yjGroup.PackageLedgers)),
			}

			for _, pkgLedger := range yjGroup.PackageLedgers {
				newPkgLedgerView := StockLedgerPackageGroupView{
					StockLedgerPackageGroup: pkgLedger,
					Masters:                 make([]model.ProductMasterView, 0, len(pkgLedger.Masters)),
				}

				for _, master := range pkgLedger.Masters {
					productCodes = append(productCodes, master.ProductCode)

					tempJcshms := model.JCShms{
						JC037: master.PackageForm,
						JC039: master.YjUnitName,
						JC044: master.YjPackUnitQty,
						JA006: sql.NullFloat64{Float64: master.JanPackInnerQty, Valid: true},
						JA008: sql.NullFloat64{Float64: master.JanPackUnitQty, Valid: true},
						JA007: sql.NullString{String: fmt.Sprintf("%d", master.JanUnitCode), Valid: true},
					}

					var janUnitName string
					if master.JanUnitCode == 0 {
						janUnitName = units.ResolveName(master.YjUnitName)
					} else {
						janUnitName = units.ResolveName(fmt.Sprintf("%d", master.JanUnitCode))
					}

					masterView := model.ProductMasterView{
						ProductMaster:        *master, // <- master.ProductMaster から *master に修正
						FormattedPackageSpec: units.FormatPackageSpec(&tempJcshms),
						JanUnitName:          janUnitName,
					}
					newPkgLedgerView.Masters = append(newPkgLedgerView.Masters, masterView)
				}
				newYjGroupView.PackageLedgers = append(newYjGroupView.PackageLedgers, newPkgLedgerView)
			}
			stockLedgerView = append(stockLedgerView, newYjGroupView)
		}
		// ▲▲▲ 修正ここまで ▲▲▲

		precompDetails, err := db.GetPreCompoundingDetailsByProductCodes(conn, productCodes)
		if err != nil {
			http.Error(w, "Failed to get pre-compounding details: "+err.Error(), http.StatusInternalServerError)
			return
		}

		// ▼▼▼ [修正箇所] DeadStockDetailsを取得し、レスポンスに含める ▼▼▼
		deadStockDetails, err := db.GetDeadStockByProductCodes(conn, productCodes)
		if err != nil {
			// エラーでも処理は続行するがログには残す
			log.Printf("WARN: Failed to get dead stock details for inventory adjustment: %v", err)
		}

		response := ResponseDataView{
			StockLedger:      stockLedgerView,
			PrecompDetails:   precompDetails,
			DeadStockDetails: deadStockDetails, // 取得したデータをセット
		}
		// ▲▲▲ 修正ここまで ▲▲▲

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(response)
	}
}

// ▼▼▼ [修正点] 削除されていた以下のコードを復元 ▼▼▼
type SavePayload struct {
	Date          string                  `json:"date"`
	YjCode        string                  `json:"yjCode"`
	InventoryData map[string]float64      `json:"inventoryData"`
	DeadStockData []model.DeadStockRecord `json:"deadStockData"`
}

func SaveInventoryDataHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var payload SavePayload
		if err := json.NewDecoder(r.Body).Decode(&payload); err != nil {
			log.Printf("ERROR: Failed to decode request body in SaveInventoryDataHandler: %v", err)
			http.Error(w, "Invalid request body: "+err.Error(), http.StatusBadRequest)
			return
		}

		if payload.Date == "" || payload.YjCode == "" {
			http.Error(w, "Date and YjCode are required", http.StatusBadRequest)
			return
		}

		tx, err := conn.Begin()
		if err != nil {
			log.Printf("ERROR: Failed to start transaction: %v", err)
			http.Error(w, "Failed to start transaction", http.StatusInternalServerError)
			return
		}
		defer tx.Rollback()

		allPackagings, err := db.GetProductMastersByYjCode(tx, payload.YjCode)
		if err != nil {
			log.Printf("ERROR: Failed to get product masters for yj_code %s: %v", payload.YjCode, err)
			http.Error(w, "Failed to get product masters for yj_code: "+err.Error(), http.StatusInternalServerError)
			return
		}

		var masterPackagings []model.ProductMaster
		for _, p := range allPackagings {
			masterPackagings = append(masterPackagings, p.ProductMaster)
		}

		if err := db.SaveGuidedInventoryData(tx, payload.Date, payload.YjCode, masterPackagings, payload.InventoryData, payload.DeadStockData); err != nil {
			log.Printf("ERROR: Failed to save guided inventory data: %v", err)
			http.Error(w, "Failed to save guided inventory data: "+err.Error(), http.StatusInternalServerError)
			return
		}

		if err := tx.Commit(); err != nil {
			log.Printf("ERROR: Failed to commit transaction: %v", err)
			http.Error(w, "Failed to commit transaction", http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{"message": "棚卸データを保存しました。"})
	}
}

// ▲▲▲ 復元ここまで ▲▲▲

