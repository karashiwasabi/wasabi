----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\aggregation\handler.go -----
package aggregation

import (
	"database/sql"
	"encoding/json"
	"net/http"
	"strconv"
	"strings"
	"time" // time パッケージをインポート
	"wasabi/config"
	"wasabi/db"
	"wasabi/model"
)

/**
 * @brief 在庫元帳データ（集計結果）を取得するためのHTTPハンドラを返します。
 * @param conn データベース接続
 * @return http.HandlerFunc HTTPリクエストを処理するハンドラ関数
 * @details
 * HTTPリクエストのクエリパラメータからフィルタ条件を抽出し、
 * それに基づいて在庫元帳データを生成してJSON形式で返却します。
 * - coefficient: 発注点係数 (デフォルト: 1.5)
 * - startDate, endDate: 集計期間（設定の日数に基づいて動的に計算）
 * - kanaName: 製品名/カナ名での絞り込み
 * - drugTypes: 薬品種別での絞り込み (毒, 劇など)
 * - dosageForm: 剤型での絞り込み
 * - movementOnly: 期間内に動きがあった品目のみを対象とするか
 */
func GetAggregationHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		q := r.URL.Query()

		coefficient, err := strconv.ParseFloat(q.Get("coefficient"), 64)
		if err != nil {
			coefficient = 1.5 // Default value
		}

		// ▼▼▼【ここから修正】▼▼▼
		// 設定ファイルから集計日数を読み込む
		cfg, err := config.LoadConfig()
		if err != nil {
			http.Error(w, "設定ファイルの読み込みに失敗しました: "+err.Error(), http.StatusInternalServerError)
			return
		}

		// 日数から期間を動的に計算
		now := time.Now()
		// 終了日は無制限とするため、実質的に未来の最大値を設定
		endDate := "99991231"
		startDate := now.AddDate(0, 0, -cfg.CalculationPeriodDays)

		// フィルタ構造体に計算した値を使用する
		filters := model.AggregationFilters{
			StartDate:    startDate.Format("20060102"),
			EndDate:      endDate,
			KanaName:     q.Get("kanaName"),
			DrugTypes:    strings.Split(q.Get("drugTypes"), ","),
			DosageForm:   q.Get("dosageForm"),
			Coefficient:  coefficient,
			MovementOnly: q.Get("movementOnly") == "true",
		}
		// ▲▲▲【修正ここまで】▲▲▲

		results, err := db.GetStockLedger(conn, filters)
		if err != nil {
			http.Error(w, "Failed to get aggregated data: "+err.Error(), http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(results)
	}
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\backorder\handler.go -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\backorder\handler.go

package backorder

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"net/http"
	"wasabi/db"
	"wasabi/model"
	"wasabi/units"
)

// BackorderView は発注残データを画面表示用に整形するための構造体です。
// model.Backorder の全フィールドに加え、画面表示用の包装仕様文字列を持ちます。
type BackorderView struct {
	model.Backorder
	FormattedPackageSpec string `json:"formattedPackageSpec"`
}

/**
 * @brief 全ての発注残リストを取得し、画面表示用に整形して返すためのHTTPハンドラです。
 * @param conn データベース接続
 * @return http.HandlerFunc HTTPリクエストを処理するハンドラ関数
 */
func GetBackordersHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		backorders, err := db.GetAllBackordersList(conn)
		if err != nil {
			http.Error(w, "Failed to get backorder list", http.StatusInternalServerError)
			return
		}

		backorderViews := make([]BackorderView, 0, len(backorders))
		for _, bo := range backorders {
			// unitsパッケージの関数に渡すため、一時的にJCShmsモデルの形式に変換
			tempJcshms := model.JCShms{
				JC037: bo.PackageForm,
				JC039: bo.YjUnitName,
				JC044: bo.YjPackUnitQty,
				JA006: sql.NullFloat64{Float64: bo.JanPackInnerQty, Valid: true},
				JA008: sql.NullFloat64{Float64: bo.JanPackUnitQty, Valid: true},
				JA007: sql.NullString{String: fmt.Sprintf("%d", bo.JanUnitCode), Valid: true},
			}

			formattedSpec := units.FormatSimplePackageSpec(&tempJcshms)

			backorderViews = append(backorderViews, BackorderView{
				Backorder:            bo,
				FormattedPackageSpec: formattedSpec,
			})
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(backorderViews)
	}
}

/**
 * @brief 単一の発注残レコードを削除するためのHTTPハンドラです。
 * @param conn データベース接続
 * @return http.HandlerFunc HTTPリクエストを処理するハンドラ関数
 * @details
 * HTTPリクエストのボディから削除対象のBackorder情報を受け取り、DBから削除します。
 */
func DeleteBackorderHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var payload model.Backorder
		if err := json.NewDecoder(r.Body).Decode(&payload); err != nil {
			http.Error(w, "Invalid request body", http.StatusBadRequest)
			return
		}

		tx, err := conn.Begin()
		if err != nil {
			http.Error(w, "Failed to start transaction", http.StatusInternalServerError)
			return
		}
		defer tx.Rollback()

		if err := db.DeleteBackorderInTx(tx, payload); err != nil {
			http.Error(w, "Failed to delete backorder: "+err.Error(), http.StatusInternalServerError)
			return
		}

		if err := tx.Commit(); err != nil {
			http.Error(w, "Failed to commit transaction", http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{"message": "発注残を削除しました。"})
	}
}

/**
 * @brief 複数の発注残レコードを一括で削除するためのHTTPハンドラです。
 * @param conn データベース接続
 * @return http.HandlerFunc HTTPリクエストを処理するハンドラ関数
 * @details
 * HTTPリクエストのボディから削除対象のBackorder情報の配列を受け取り、ループ処理でDBから削除します。
 * 処理は単一のトランザクション内で行われ、一件でも失敗した場合は全てロールバックされます。
 */
func BulkDeleteBackordersHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var payload []model.Backorder
		if err := json.NewDecoder(r.Body).Decode(&payload); err != nil {
			http.Error(w, "Invalid request body", http.StatusBadRequest)
			return
		}

		if len(payload) == 0 {
			w.Header().Set("Content-Type", "application/json")
			json.NewEncoder(w).Encode(map[string]string{"message": "削除する項目がありません。"})
			return
		}

		tx, err := conn.Begin()
		if err != nil {
			http.Error(w, "Failed to start transaction", http.StatusInternalServerError)
			return
		}
		defer tx.Rollback()

		for _, bo := range payload {
			if err := db.DeleteBackorderInTx(tx, bo); err != nil {
				http.Error(w, "Failed to delete backorder: "+err.Error(), http.StatusInternalServerError)
				return
			}
		}

		if err := tx.Commit(); err != nil {
			http.Error(w, "Failed to commit transaction", http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{"message": "選択された発注残を削除しました。"})
	}
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\backup\handler.go -----
package backup

import (
	"database/sql"
	"encoding/csv"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strconv"
	"strings"
	"wasabi/db"
	"wasabi/model"
)

// ▼▼▼【ここから追加】▼▼▼

// ExportCustomersHandler は得意先と卸業者の両方を1つのCSVファイルに出力します。
func ExportCustomersHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		clients, err := db.GetAllClients(conn)
		if err != nil {
			http.Error(w, "Failed to get clients", http.StatusInternalServerError)
			return
		}

		wholesalers, err := db.GetAllWholesalers(conn)
		if err != nil {
			http.Error(w, "Failed to get wholesalers", http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "text/csv")
		w.Header().Set("Content-Disposition", `attachment; filename="customer_master.csv"`)
		w.Write([]byte{0xEF, 0xBB, 0xBF}) // UTF-8 BOM

		csvWriter := csv.NewWriter(w)
		defer csvWriter.Flush()

		headers := []string{"種別", "コード", "名称"}
		if err := csvWriter.Write(headers); err != nil {
			http.Error(w, "Failed to write CSV header", http.StatusInternalServerError)
			return
		}

		// 得意先を書き込み
		for _, client := range clients {
			record := []string{
				"得意先",
				fmt.Sprintf("=%q", client.Code),
				client.Name,
			}
			if err := csvWriter.Write(record); err != nil {
				log.Printf("Failed to write client row to CSV (Code: %s): %v", client.Code, err)
			}
		}

		// 卸業者を書き込み
		for _, wholesaler := range wholesalers {
			record := []string{
				"卸業者",
				fmt.Sprintf("=%q", wholesaler.Code),
				wholesaler.Name,
			}
			if err := csvWriter.Write(record); err != nil {
				log.Printf("Failed to write wholesaler row to CSV (Code: %s): %v", wholesaler.Code, err)
			}
		}
	}
}

// ImportCustomersHandler は得意先と卸業者の両方を含むCSVファイルをインポートします。
func ImportCustomersHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		file, _, err := r.FormFile("file")
		if err != nil {
			http.Error(w, "No file uploaded", http.StatusBadRequest)
			return
		}
		defer file.Close()

		csvReader := csv.NewReader(file)
		csvReader.LazyQuotes = true
		rows, err := csvReader.ReadAll()
		if err != nil {
			http.Error(w, "Failed to parse CSV file: "+err.Error(), http.StatusBadRequest)
			return
		}

		tx, err := conn.Begin()
		if err != nil {
			http.Error(w, "Failed to start transaction", http.StatusInternalServerError)
			return
		}
		defer tx.Rollback()

		clientStmt, err := tx.Prepare("INSERT OR REPLACE INTO client_master (client_code, client_name) VALUES (?, ?)")
		if err != nil {
			http.Error(w, "Failed to prepare client DB statement", http.StatusInternalServerError)
			return
		}
		defer clientStmt.Close()

		wholesalerStmt, err := tx.Prepare("INSERT OR REPLACE INTO wholesalers (wholesaler_code, wholesaler_name) VALUES (?, ?)")
		if err != nil {
			http.Error(w, "Failed to prepare wholesaler DB statement", http.StatusInternalServerError)
			return
		}
		defer wholesalerStmt.Close()

		var clientCount, wholesalerCount int
		for i, row := range rows {
			if i == 0 || len(row) < 3 { // Skip header or short rows
				continue
			}
			customerType := strings.TrimSpace(row[0])
			code := strings.Trim(strings.TrimSpace(row[1]), `="`)
			name := strings.TrimSpace(row[2])

			switch customerType {
			case "得意先":
				if _, err := clientStmt.Exec(code, name); err != nil {
					log.Printf("Failed to import client row %d: %v", i+1, err)
					http.Error(w, fmt.Sprintf("Failed to import client row %d", i+1), http.StatusInternalServerError)
					return
				}
				clientCount++
			case "卸業者":
				if _, err := wholesalerStmt.Exec(code, name); err != nil {
					log.Printf("Failed to import wholesaler row %d: %v", i+1, err)
					http.Error(w, fmt.Sprintf("Failed to import wholesaler row %d", i+1), http.StatusInternalServerError)
					return
				}
				wholesalerCount++
			default:
				// Unknown type, skip
			}
		}

		if err := db.InitializeSequenceFromMaxClientCode(tx); err != nil {
			log.Printf("Warning: failed to re-initialize client sequence after import: %v", err)
		}

		if err := tx.Commit(); err != nil {
			http.Error(w, "Failed to commit transaction", http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{
			"message": fmt.Sprintf("%d件の得意先、%d件の卸業者をインポートしました。", clientCount, wholesalerCount),
		})
	}
}

// ▲▲▲【追加ここまで】▲▲▲

// ExportClientsHandler は古い関数として残しますが、新しいUIからは呼び出されません。
func ExportClientsHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// (元のコードのまま)
		clients, err := db.GetAllClients(conn)
		if err != nil {
			http.Error(w, "Failed to get clients", http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "text/csv")
		w.Header().Set("Content-Disposition", `attachment; filename="client_master.csv"`)
		w.Write([]byte{0xEF, 0xBB, 0xBF}) // UTF-8 BOM

		csvWriter := csv.NewWriter(w)
		defer csvWriter.Flush()

		headers := []string{"client_code", "client_name"}
		if err := csvWriter.Write(headers); err != nil {
			http.Error(w, "Failed to write CSV header", http.StatusInternalServerError)
			return
		}

		for _, client := range clients {
			record := []string{
				fmt.Sprintf("=%q", client.Code),
				client.Name,
			}
			if err := csvWriter.Write(record); err != nil {
				log.Printf("Failed to write client row to CSV (Code: %s): %v", client.Code, err)
			}
		}
	}
}

// ImportClientsHandler は古い関数として残しますが、新しいUIからは呼び出されません。
func ImportClientsHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// (元のコードのまま)
		file, _, err := r.FormFile("file")
		if err != nil {
			http.Error(w, "No file uploaded", http.StatusBadRequest)
			return
		}
		defer file.Close()

		csvReader := csv.NewReader(file)
		csvReader.LazyQuotes = true
		rows, err := csvReader.ReadAll()
		if err != nil {
			http.Error(w, "Failed to parse CSV file: "+err.Error(), http.StatusBadRequest)
			return
		}

		tx, err := conn.Begin()
		if err != nil {
			http.Error(w, "Failed to start transaction", http.StatusInternalServerError)
			return
		}
		defer tx.Rollback()

		stmt, err := tx.Prepare("INSERT OR REPLACE INTO client_master (client_code, client_name) VALUES (?, ?)")
		if err != nil {
			http.Error(w, "Failed to prepare DB statement", http.StatusInternalServerError)
			return
		}
		defer stmt.Close()

		var importedCount int
		for i, row := range rows {
			if i == 0 || len(row) < 2 { // Skip header or short rows
				continue
			}
			clientCode := strings.Trim(strings.TrimSpace(row[0]), `="`)
			clientName := strings.TrimSpace(row[1])

			if _, err := stmt.Exec(clientCode, clientName); err != nil {
				log.Printf("Failed to import client row %d: %v", i+1, err)
				http.Error(w, fmt.Sprintf("Failed to import client row %d", i+1), http.StatusInternalServerError)
				return
			}
			importedCount++
		}

		if err := db.InitializeSequenceFromMaxClientCode(tx); err != nil {
			log.Printf("Warning: failed to re-initialize client sequence after import: %v", err)
		}

		if err := tx.Commit(); err != nil {
			http.Error(w, "Failed to commit transaction", http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{
			"message": fmt.Sprintf("%d件の得意先をインポートしました。", importedCount),
		})
	}
}

func ExportProductsHandler(conn *sql.DB) http.HandlerFunc {
	// (この関数は変更なし)
	return func(w http.ResponseWriter, r *http.Request) {
		products, err := db.GetAllProductMasters(conn)
		if err != nil {
			http.Error(w, "Failed to get products", http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "text/csv")
		w.Header().Set("Content-Disposition", `attachment; filename="product_master_editable.csv"`)
		w.Write([]byte{0xEF, 0xBB, 0xBF}) // UTF-8 BOM for Excel compatibility

		csvWriter := csv.NewWriter(w)
		defer csvWriter.Flush()

		header := []string{
			"product_code", "yj_code", "gs1_code", "product_name", "specification", "kana_name", "maker_name",
			"usage_classification", "package_form", "yj_unit_name", "yj_pack_unit_qty",
			"jan_pack_inner_qty", "jan_unit_code", "jan_pack_unit_qty", "origin",
			"nhi_price", "purchase_price",
			"flag_poison", "flag_deleterious", "flag_narcotic", "flag_psychotropic", "flag_stimulant", "flag_stimulant_raw",
			"is_order_stopped", "supplier_wholesale",
			"group_code", "shelf_number", "category", "user_notes",
		}
		if err := csvWriter.Write(header); err != nil {
			http.Error(w, "Failed to write CSV header", http.StatusInternalServerError)
			return
		}

		for _, p := range products {
			record := []string{
				fmt.Sprintf("=%q", p.ProductCode),
				p.YjCode,
				p.Gs1Code,
				p.ProductName,
				p.Specification,
				p.KanaName,
				p.MakerName,
				p.UsageClassification,
				p.PackageForm,
				p.YjUnitName,
				strconv.FormatFloat(p.YjPackUnitQty, 'f', -1, 64),
				strconv.FormatFloat(p.JanPackInnerQty, 'f', -1, 64),
				strconv.Itoa(p.JanUnitCode),
				strconv.FormatFloat(p.JanPackUnitQty, 'f', -1, 64),
				p.Origin,
				strconv.FormatFloat(p.NhiPrice, 'f', -1, 64),
				strconv.FormatFloat(p.PurchasePrice, 'f', -1, 64),
				strconv.Itoa(p.FlagPoison),
				strconv.Itoa(p.FlagDeleterious),
				strconv.Itoa(p.FlagNarcotic),
				strconv.Itoa(p.FlagPsychotropic),
				strconv.Itoa(p.FlagStimulant),
				strconv.Itoa(p.FlagStimulantRaw),
				strconv.Itoa(p.IsOrderStopped),
				p.SupplierWholesale,
				p.GroupCode,
				p.ShelfNumber,
				p.Category,
				p.UserNotes,
			}
			if err := csvWriter.Write(record); err != nil {
				log.Printf("Failed to write product row to CSV (JAN: %s): %v", p.ProductCode, err)
			}
		}
	}
}

func ImportProductsHandler(conn *sql.DB) http.HandlerFunc {
	// (この関数は変更なし)
	return func(w http.ResponseWriter, r *http.Request) {
		file, _, err := r.FormFile("file")
		if err != nil {
			http.Error(w, "No file uploaded", http.StatusBadRequest)
			return
		}
		defer file.Close()

		csvReader := csv.NewReader(file)
		csvReader.LazyQuotes = true

		rows, err := csvReader.ReadAll()
		if err != nil {
			http.Error(w, "Failed to parse CSV file: "+err.Error(), http.StatusBadRequest)
			return
		}

		tx, err := conn.Begin()
		if err != nil {
			http.Error(w, "Failed to start transaction", http.StatusInternalServerError)
			return
		}
		defer tx.Rollback()

		var importedCount int
		for i, row := range rows {
			if i == 0 || len(row) < 29 {
				continue
			}

			yjPackUnitQty, _ := strconv.ParseFloat(row[10], 64)
			janPackInnerQty, _ := strconv.ParseFloat(row[11], 64)
			janUnitCode, _ := strconv.Atoi(row[12])
			janPackUnitQty, _ := strconv.ParseFloat(row[13], 64)
			nhiPrice, _ := strconv.ParseFloat(row[15], 64)
			purchasePrice, _ := strconv.ParseFloat(row[16], 64)
			flagPoison, _ := strconv.Atoi(row[17])
			flagDeleterious, _ := strconv.Atoi(row[18])
			flagNarcotic, _ := strconv.Atoi(row[19])
			flagPsychotropic, _ := strconv.Atoi(row[20])
			flagStimulant, _ := strconv.Atoi(row[21])
			flagStimulantRaw, _ := strconv.Atoi(row[22])
			isOrderStopped, _ := strconv.Atoi(row[23])
			productCode := strings.Trim(strings.TrimSpace(row[0]), `="`)

			input := model.ProductMasterInput{
				ProductCode:         productCode,
				YjCode:              strings.TrimSpace(row[1]),
				Gs1Code:             strings.TrimSpace(row[2]),
				ProductName:         strings.TrimSpace(row[3]),
				Specification:       strings.TrimSpace(row[4]),
				KanaName:            strings.TrimSpace(row[5]),
				MakerName:           strings.TrimSpace(row[6]),
				UsageClassification: strings.TrimSpace(row[7]),
				PackageForm:         strings.TrimSpace(row[8]),
				YjUnitName:          strings.TrimSpace(row[9]),
				YjPackUnitQty:       yjPackUnitQty,
				JanPackInnerQty:     janPackInnerQty,
				JanUnitCode:         janUnitCode,
				JanPackUnitQty:      janPackUnitQty,
				Origin:              strings.TrimSpace(row[14]),
				NhiPrice:            nhiPrice,
				PurchasePrice:       purchasePrice,
				FlagPoison:          flagPoison,
				FlagDeleterious:     flagDeleterious,
				FlagNarcotic:        flagNarcotic,
				FlagPsychotropic:    flagPsychotropic,
				FlagStimulant:       flagStimulant,
				FlagStimulantRaw:    flagStimulantRaw,
				IsOrderStopped:      isOrderStopped,
				SupplierWholesale:   strings.TrimSpace(row[24]),
				GroupCode:           strings.TrimSpace(row[25]),
				ShelfNumber:         strings.TrimSpace(row[26]),
				Category:            strings.TrimSpace(row[27]),
				UserNotes:           strings.TrimSpace(row[28]),
			}

			if err := db.UpsertProductMasterInTx(tx, input); err != nil {
				log.Printf("Failed to import product row %d: %v", i+1, err)
				http.Error(w, fmt.Sprintf("Failed to import product row %d", i+1), http.StatusInternalServerError)
				return
			}
			importedCount++
		}

		if err := db.InitializeSequenceFromMaxYjCode(tx); err != nil {
			log.Printf("Warning: failed to re-initialize YJ sequence after import: %v", err)
		}

		if err := tx.Commit(); err != nil {
			http.Error(w, "Failed to commit transaction", http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{
			"message": fmt.Sprintf("%d件の製品をインポートしました。", importedCount),
		})
	}
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\cleanup\handler.go -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\cleanup\handler.go

package cleanup

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"net/http"
	"wasabi/db"
)

// GetCandidatesHandler は整理対象のマスター候補をリストアップします。
func GetCandidatesHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		candidates, err := db.GetCleanupCandidates(conn)
		if err != nil {
			http.Error(w, "Failed to get cleanup candidates: "+err.Error(), http.StatusInternalServerError)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(candidates)
	}
}

// ExecuteCleanupHandler は指定されたマスターを削除します。
func ExecuteCleanupHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var payload struct {
			ProductCodes []string `json:"productCodes"`
		}
		if err := json.NewDecoder(r.Body).Decode(&payload); err != nil {
			http.Error(w, "Invalid request body", http.StatusBadRequest)
			return
		}

		tx, err := conn.Begin()
		if err != nil {
			http.Error(w, "Failed to start transaction", http.StatusInternalServerError)
			return
		}
		defer tx.Rollback()

		rowsAffected, err := db.DeleteMastersByCodesInTx(tx, payload.ProductCodes)
		if err != nil {
			http.Error(w, "Failed to execute cleanup: "+err.Error(), http.StatusInternalServerError)
			return
		}

		if err := tx.Commit(); err != nil {
			http.Error(w, "Failed to commit transaction", http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{
			"message": fmt.Sprintf("%d件の製品マスターを削除しました。", rowsAffected),
		})
	}
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\client\handlers.go -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\client\handler.go

package client

import (
	"database/sql"
	"encoding/json"
	"net/http"
	"wasabi/db"
)

/**
 * @brief 全ての得意先リストを取得するAPIハンドラ (/api/clients)
 * @param conn データベース接続
 * @return http.HandlerFunc HTTPリクエストを処理するハンドラ関数
 */
func GetAllClientsHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		clients, err := db.GetAllClients(conn)
		if err != nil {
			http.Error(w, "Failed to get clients", http.StatusInternalServerError)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(clients)
	}
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\config\config.go -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\config\config.go

package config

import (
	"encoding/json"
	"os"
	"sync"
)

// Config はアプリケーションの設定情報を保持する構造体です。
// `config.json`ファイルにこの構造体の内容が保存されます。
type Config struct {
	EmednetUserID   string `json:"emednetUserId"`
	EmednetPassword string `json:"emednetPassword"`
	EdeUserID       string `json:"edeUserId"`
	EdePassword     string `json:"edePassword"`
	UsageFolderPath string `json:"usageFolderPath"`
	// ▼▼▼【ここから修正】▼▼▼
	// 2つの日付フィールドを削除し、集計日数を保持するフィールドを1つ追加
	CalculationPeriodDays int `json:"calculationPeriodDays"`
	// ▲▲▲【修正ここまで】▲▲▲
	// ▼▼▼【ここに追加】▼▼▼
	EdgePath string `json:"edgePath"` // Edgeの実行可能ファイルパス
	// ▲▲▲【追加ここまで】▲▲▲
}

var (
	// cfg はアプリケーション全体で共有される設定情報を保持するグローバル変数です。
	cfg Config
	// mu は設定情報への同時アクセスを防ぎ、データの競合を避けるためのロックです。
	mu sync.RWMutex
)

// configFilePath は設定ファイルのパスを定義する定数です。
const configFilePath = "./config.json"

/**
 * @brief config.json ファイルから設定を読み込み、メモリにキャッシュします。
 * @return Config 読み込まれた設定情報
 * @return error ファイルの読み込みや解析中にエラーが発生した場合
 * @details
 * ファイルが存在しない場合は、空の設定情報とnilエラーを返します。
 * 読み込み中は読み取りロックをかけ、スレッドセーフを保証します。
 */
func LoadConfig() (Config, error) {
	mu.RLock()
	defer mu.RUnlock()

	file, err := os.ReadFile(configFilePath)
	if err != nil {
		if os.IsNotExist(err) {
			// ファイルが存在しないのは初回起動時などの正常なケースなのでエラーとはしない
			return Config{
				// ▼▼▼【修正】日数のデフォルト値を設定 ▼▼▼
				CalculationPeriodDays: 90,
			}, nil
		}
		return Config{}, err
	}

	var tempCfg Config
	if err := json.Unmarshal(file, &tempCfg); err != nil {
		return Config{}, err
	}
	cfg = tempCfg
	return cfg, nil
}

/**
 * @brief 新しい設定情報を config.json ファイルに保存します。
 * @param newCfg 保存する新しい設定情報
 * @return error ファイルの書き込み中にエラーが発生した場合
 * @details
 * 書き込み中は書き込みロックをかけ、スレッドセーフを保証します。
 * 保存が成功すると、メモリ上のグローバルな設定情報も更新されます。
 */
func SaveConfig(newCfg Config) error {
	mu.Lock()
	defer mu.Unlock()

	file, err := json.MarshalIndent(newCfg, "", "  ")
	if err != nil {
		return err
	}

	if err := os.WriteFile(configFilePath, file, 0644); err != nil {
		return err
	}
	cfg = newCfg
	return nil
}

/**
 * @brief メモリにキャッシュされている現在の設定情報を取得します。
 * @return Config 現在の設定情報
 * @details
 * 読み取り中は読み取りロックをかけ、スレッドセーフを保証します。
 */
func GetConfig() Config {
	mu.RLock()
	defer mu.RUnlock()
	return cfg
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\dat\handler.go -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\dat\handler.go (全体)

package dat

import (
	"bufio"
	"database/sql"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"time"
	"wasabi/db"
	"wasabi/mappers"
	"wasabi/mastermanager"
	"wasabi/model"
	"wasabi/parsers"
)

// insertTransactionQuery は取引レコードをデータベースに挿入または置換するためのSQLクエリです。
const insertTransactionQuery = `
INSERT OR REPLACE INTO transaction_records (
    transaction_date, client_code, receipt_number, line_number, flag,
    jan_code, yj_code, product_name, kana_name, usage_classification, package_form, package_spec, maker_name,
    dat_quantity, jan_pack_inner_qty, jan_quantity, jan_pack_unit_qty, jan_unit_name, jan_unit_code,
    yj_quantity, yj_pack_unit_qty, yj_unit_name, unit_price, purchase_price, supplier_wholesale,
    subtotal, tax_amount, tax_rate, expiry_date, lot_number, flag_poison,
    flag_deleterious, flag_narcotic, flag_psychotropic, flag_stimulant,
    flag_stimulant_raw, process_flag_ma
) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`

// UploadDatHandler はDATファイルのアップロードを処理するHTTPハンドラです。
func UploadDatHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		if err := r.ParseMultipartForm(32 << 20); err != nil {
			http.Error(w, "File upload error: "+err.Error(), http.StatusBadRequest)
			return
		}
		defer r.MultipartForm.RemoveAll()

		var allFilePaths []string
		for _, fileHeader := range r.MultipartForm.File["file"] {
			file, err := fileHeader.Open()
			if err != nil {
				log.Printf("Failed to open uploaded file %s: %v", fileHeader.Filename, err)
				continue
			}

			tempFile, err := os.CreateTemp("", "dat-*.tmp")
			if err != nil {
				log.Printf("Failed to create temp file: %v", err)
				file.Close()
				continue
			}
			_, err = io.Copy(tempFile, file)
			file.Close()
			if err != nil {
				log.Printf("Failed to copy to temp file: %v", err)
				tempFile.Close()
				os.Remove(tempFile.Name())
				continue
			}
			tempFile.Seek(0, 0)
			scanner := bufio.NewScanner(tempFile)
			var destDir string
			var newBaseName string
			if scanner.Scan() {
				firstLine := scanner.Text()
				if strings.HasPrefix(firstLine, "S") && len(firstLine) >= 39 {
					timestampStr := firstLine[27:39]
					yy, mm, dd, h, m, s := timestampStr[0:2], timestampStr[2:4], timestampStr[4:6], timestampStr[6:8], timestampStr[8:10], timestampStr[10:12]
					newBaseName = fmt.Sprintf("20%s%s%s_%s%s%s", yy, mm, dd, h, m, s)
				}
			}
			if newBaseName != "" {
				destDir = filepath.Join("download", "DAT")
			} else {
				destDir = filepath.Join("download", "DAT", "unorganized")
				newBaseName = time.Now().Format("20060102150405")
			}
			os.MkdirAll(destDir, 0755)
			destPath := filepath.Join(destDir, newBaseName+filepath.Ext(fileHeader.Filename))

			if err := os.Rename(tempFile.Name(), destPath); err != nil {
				tempFile.Seek(0, 0)
				destFile, createErr := os.Create(destPath)
				if createErr != nil {
					log.Printf("Failed to create destination file for copying: %v", createErr)
					tempFile.Close()
					os.Remove(tempFile.Name())
					continue
				}
				_, copyErr := io.Copy(destFile, tempFile)
				destFile.Close()
				tempFile.Close()
				os.Remove(tempFile.Name())
				if copyErr != nil {
					log.Printf("Failed to copy temp file to destination: %v", copyErr)
					os.Remove(destPath)
					continue
				}
			}

			log.Printf("Successfully saved and organized file to: %s", destPath)
			allFilePaths = append(allFilePaths, destPath)
		}

		var allProcessedRecords []model.TransactionRecord
		for _, path := range allFilePaths {
			processed, err := ProcessDatFile(conn, path)
			if err != nil {
				log.Printf("Failed to process DAT file %s: %v", path, err)
				continue
			}
			allProcessedRecords = append(allProcessedRecords, processed...)
		}

		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		json.NewEncoder(w).Encode(map[string]interface{}{
			"message": fmt.Sprintf("Parsed and processed %d DAT files successfully.", len(allFilePaths)),
			"records": allProcessedRecords,
		})
	}
}

// ProcessDatFile は単一のDATファイルを解析し、内容をデータベースに登録します。
func ProcessDatFile(conn *sql.DB, filePath string) ([]model.TransactionRecord, error) {
	file, err := os.Open(filePath)
	if err != nil {
		return nil, fmt.Errorf("failed to open organized file %s: %w", filePath, err)
	}
	defer file.Close()

	parsed, err := parsers.ParseDat(file)
	if err != nil {
		return nil, fmt.Errorf("failed to parse file %s: %w", filePath, err)
	}

	filteredRecords := removeDatDuplicates(parsed)
	if len(filteredRecords) == 0 {
		return []model.TransactionRecord{}, nil
	}

	tx, err := conn.Begin()
	if err != nil {
		return nil, fmt.Errorf("failed to begin transaction: %w", err)
	}
	defer tx.Rollback()

	var keyList, janList []string
	keySet, janSet := make(map[string]struct{}), make(map[string]struct{})
	for _, rec := range filteredRecords {
		if rec.JanCode != "" && rec.JanCode != "0000000000000" {
			if _, seen := janSet[rec.JanCode]; !seen {
				janSet[rec.JanCode] = struct{}{}
				janList = append(janList, rec.JanCode)
			}
		}
		key := rec.JanCode
		if key == "" || key == "0000000000000" {
			key = fmt.Sprintf("9999999999999%s", rec.ProductName)
		}
		if _, seen := keySet[key]; !seen {
			keySet[key] = struct{}{}
			keyList = append(keyList, key)
		}
	}

	mastersMap, err := db.GetProductMastersByCodesMap(tx, keyList)
	if err != nil {
		return nil, fmt.Errorf("failed to pre-fetch product masters: %w", err)
	}

	jcshmsMap, err := db.GetJcshmsByCodesMap(tx, janList)
	if err != nil {
		return nil, fmt.Errorf("failed to pre-fetch JCSHMS data: %w", err)
	}

	stmt, err := tx.Prepare(insertTransactionQuery)
	if err != nil {
		return nil, fmt.Errorf("failed to prepare statement: %w", err)
	}
	defer stmt.Close()

	var finalRecords []model.TransactionRecord
	for _, rec := range filteredRecords {
		ar := model.TransactionRecord{
			TransactionDate: rec.Date, ClientCode: rec.ClientCode, ReceiptNumber: rec.ReceiptNumber,
			LineNumber: rec.LineNumber, Flag: rec.Flag, JanCode: rec.JanCode,
			ProductName: rec.ProductName, DatQuantity: rec.DatQuantity,
			ExpiryDate: rec.ExpiryDate, LotNumber: rec.LotNumber,
		}

		master, err := mastermanager.FindOrCreate(tx, rec.JanCode, rec.ProductName, mastersMap, jcshmsMap)
		if err != nil {
			return nil, fmt.Errorf("mastermanager failed for jan %s: %w", rec.JanCode, err)
		}

		// ▼▼▼【ここから修正】▼▼▼
		// 1. YJ数量とJAN数量を計算
		if master.YjPackUnitQty > 0 {
			ar.YjQuantity = ar.DatQuantity * master.YjPackUnitQty
		}
		if master.JanPackUnitQty > 0 {
			ar.JanQuantity = ar.DatQuantity * master.JanPackUnitQty
		}

		// 2. DATファイルから読み取った「包装あたりの納入価」を取得
		//    DATファイルに価格情報がない場合のみ、マスターの納入価をフォールバックとして使用
		packagePurchasePrice := rec.UnitPrice
		if packagePurchasePrice <= 0 && master.PurchasePrice > 0 {
			packagePurchasePrice = master.PurchasePrice
		}

		// 3. YJ単位の単価（仮の単価）を計算し、取引レコードの「UnitPrice」として設定
		if master.YjPackUnitQty > 0 && packagePurchasePrice > 0 {
			ar.UnitPrice = packagePurchasePrice / master.YjPackUnitQty
		} else {
			// 包装数量が不明な場合などは、DATの単価をそのまま使用せざるを得ない
			ar.UnitPrice = rec.UnitPrice
		}

		// 4. 金額を「YJ数量 × YJ単位単価」で再計算
		//    DATファイルに記録されているSubtotalは参照しない
		ar.Subtotal = ar.YjQuantity * ar.UnitPrice

		// 5. 取引レコードのPurchasePriceには、計算の元となった「包装あたりの納入価」を記録として保存
		ar.PurchasePrice = packagePurchasePrice

		// ▲▲▲【修正ここまで】▲▲▲

		mappers.MapProductMasterToTransaction(&ar, master)
		ar.ProcessFlagMA = "COMPLETE"

		_, err = stmt.Exec(
			ar.TransactionDate, ar.ClientCode, ar.ReceiptNumber, ar.LineNumber, ar.Flag,
			ar.JanCode, ar.YjCode, ar.ProductName, ar.KanaName, ar.UsageClassification, ar.PackageForm, ar.PackageSpec, ar.MakerName,
			ar.DatQuantity, ar.JanPackInnerQty, ar.JanQuantity, ar.JanPackUnitQty, ar.JanUnitName, ar.JanUnitCode,
			ar.YjQuantity, ar.YjPackUnitQty, ar.YjUnitName, ar.UnitPrice, ar.PurchasePrice, ar.SupplierWholesale,
			ar.Subtotal, ar.TaxAmount, ar.TaxRate, ar.ExpiryDate, ar.LotNumber, ar.FlagPoison,
			ar.FlagDeleterious, ar.FlagNarcotic, ar.FlagPsychotropic, ar.FlagStimulant,
			ar.FlagStimulantRaw, ar.ProcessFlagMA,
		)
		if err != nil {
			return nil, fmt.Errorf("failed to insert record for JAN %s: %w", ar.JanCode, err)
		}
		finalRecords = append(finalRecords, ar)
	}

	if err := tx.Commit(); err != nil {
		return nil, fmt.Errorf("transaction commit error (final): %w", err)
	}

	return finalRecords, nil
}

// removeDatDuplicates はDATレコードから重複を除外します。
func removeDatDuplicates(records []model.UnifiedInputRecord) []model.UnifiedInputRecord {
	seen := make(map[string]struct{})
	var result []model.UnifiedInputRecord
	for _, r := range records {
		key := fmt.Sprintf("%s|%s|%s|%s", r.Date, r.ClientCode, r.ReceiptNumber, r.LineNumber)
		if _, ok := seen[key]; ok {
			continue
		}
		seen[key] = struct{}{}
		result = append(result, r)
	}
	return result
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\db\aggregation.go -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\WASABI\db\aggregation.go

package db

import (
	"database/sql"
	"fmt"
	"sort"
	"strings"
	"wasabi/model"
	"wasabi/units"
)

/**
 * @brief 在庫元帳レポートを生成します。
 * @param conn データベース接続
 * @param filters 絞り込み条件
 * @return []model.StockLedgerYJGroup 集計結果のスライス
 * @return error 処理中にエラーが発生した場合
 * @details
 * この関数はアプリケーションの在庫計算における中心的なロジックです。
 * 以下のステップで在庫元帳を生成します。
 * 1. フィルタ条件に合致する製品マスターを取得します。
 * 2. 取得した製品マスターに関連する全期間の取引履歴を一括で取得します。
 * 3. 製品をYJコードごと、さらに包装ごとにグループ化します。
 * 4. 各包装グループについて以下の計算を行います。
 * a. 期間開始前の取引履歴を遡り、最後の棚卸を基点とした「期間前在庫（繰越在庫）」を算出します。
 * b. 期間内の取引を時系列で処理し、「期間内変動」「最大使用量」「期間終了在庫」を算出します。
 * c. 発注残と予製引当数を考慮し、「有効在庫」と「発注点」を計算します。
 * 5. 全ての包装グループのデータをYJコードごとに集計し、最終的なレポートを生成します。
 * 6. 結果を剤型とカナ名でソートして返却します。
 */
func GetStockLedger(conn *sql.DB, filters model.AggregationFilters) ([]model.StockLedgerYJGroup, error) {
	backordersMap, err := GetAllBackordersMap(conn)
	if err != nil {
		return nil, fmt.Errorf("failed to get backorders for aggregation: %w", err)
	}

	precompTotals, err := GetPreCompoundingTotals(conn)
	if err != nil {
		return nil, fmt.Errorf("failed to get pre-compounding totals for aggregation: %w", err)
	}

	// ステップ1: フィルターに合致する製品マスターを取得
	// 検索対象を製品マスター(product_master)に厳密に限定
	masterQuery := `SELECT ` + SelectColumns + ` FROM product_master p WHERE 1=1 `
	var masterArgs []interface{}

	if filters.YjCode != "" {
		masterQuery += " AND p.yj_code = ? "
		masterArgs = append(masterArgs, filters.YjCode)
	}

	if filters.KanaName != "" {
		masterQuery += " AND (p.kana_name LIKE ? OR p.product_name LIKE ?) "
		masterArgs = append(masterArgs, "%"+filters.KanaName+"%", "%"+filters.KanaName+"%")
	}

	if filters.DosageForm != "" && filters.DosageForm != "all" {
		masterQuery += " AND p.usage_classification = ? "
		masterArgs = append(masterArgs, filters.DosageForm)
	}

	if filters.ShelfNumber != "" {
		masterQuery += " AND p.shelf_number LIKE ? "
		masterArgs = append(masterArgs, "%"+filters.ShelfNumber+"%")
	}

	if len(filters.DrugTypes) > 0 && filters.DrugTypes[0] != "" {
		var conditions []string
		flagMap := map[string]string{
			"poison":        "p.flag_poison = 1",
			"deleterious":   "p.flag_deleterious = 1",
			"narcotic":      "p.flag_narcotic = 1",
			"psychotropic1": "p.flag_psychotropic = 1",
			"psychotropic2": "p.flag_psychotropic = 2",
			"psychotropic3": "p.flag_psychotropic = 3",
			"stimulant":     "p.flag_stimulant = 1",
			"stimulant_raw": "p.flag_stimulant_raw = 1",
		}
		for _, dt := range filters.DrugTypes {
			if cond, ok := flagMap[dt]; ok {
				conditions = append(conditions, cond)
			}
		}
		if len(conditions) > 0 {
			masterQuery += " AND (" + strings.Join(conditions, " OR ") + ")"
		}
	}

	masterRows, err := conn.Query(masterQuery, masterArgs...)
	if err != nil {
		return nil, err
	}
	defer masterRows.Close()

	mastersByYjCode := make(map[string][]*model.ProductMaster)
	var productCodes []string
	for masterRows.Next() {
		m, err := ScanProductMaster(masterRows)
		if err != nil {
			return nil, err
		}
		if m.YjCode != "" {
			mastersByYjCode[m.YjCode] = append(mastersByYjCode[m.YjCode], m)
		}
		productCodes = append(productCodes, m.ProductCode)
	}
	if len(productCodes) == 0 {
		return []model.StockLedgerYJGroup{}, nil
	}

	// ステップ2: 関連する全期間のトランザクションを取得 (バッチ処理)
	transactionsByProductCode := make(map[string][]*model.TransactionRecord)
	const batchSize = 500

	for i := 0; i < len(productCodes); i += batchSize {
		end := i + batchSize
		if end > len(productCodes) {
			end = len(productCodes)
		}
		batch := productCodes[i:end]

		if len(batch) > 0 {
			txArgs := make([]interface{}, len(batch))
			for j, pc := range batch {
				txArgs[j] = pc
			}

			txQuery := `SELECT ` + TransactionColumns + ` FROM transaction_records WHERE jan_code IN (?` + strings.Repeat(",?", len(batch)-1) + `) ORDER BY transaction_date, id`
			txRows, err := conn.Query(txQuery, txArgs...)
			if err != nil {
				return nil, fmt.Errorf("failed to get transactions batch: %w", err)
			}

			for txRows.Next() {
				t, err := ScanTransactionRecord(txRows)
				if err != nil {
					txRows.Close()
					return nil, err
				}
				transactionsByProductCode[t.JanCode] = append(transactionsByProductCode[t.JanCode], t)
			}
			txRows.Close()
		}
	}

	// ステップ3: YJコードごとに集計処理
	var result []model.StockLedgerYJGroup
	for yjCode, mastersInYjGroup := range mastersByYjCode {
		if len(mastersInYjGroup) == 0 {
			continue
		}

		var representativeProductName string
		var representativeYjUnitName string
		if len(mastersInYjGroup) > 0 {
			representativeProductName = mastersInYjGroup[0].ProductName
			representativeYjUnitName = mastersInYjGroup[0].YjUnitName
			for _, m := range mastersInYjGroup {
				if m.Origin == "JCSHMS" {
					representativeProductName = m.ProductName
					representativeYjUnitName = m.YjUnitName
					break
				}
			}
		}

		yjGroup := model.StockLedgerYJGroup{
			YjCode:      yjCode,
			ProductName: representativeProductName,
			YjUnitName:  units.ResolveName(representativeYjUnitName),
		}

		mastersByPackageKey := make(map[string][]*model.ProductMaster)
		for _, m := range mastersInYjGroup {
			key := fmt.Sprintf("%s|%s|%g|%s", m.YjCode, m.PackageForm, m.JanPackInnerQty, m.YjUnitName)
			mastersByPackageKey[key] = append(mastersByPackageKey[key], m)
		}

		var allPackageLedgers []model.StockLedgerPackageGroup
		for key, mastersInPackageGroup := range mastersByPackageKey {
			var allTxsForPackage []*model.TransactionRecord
			for _, m := range mastersInPackageGroup {
				allTxsForPackage = append(allTxsForPackage, transactionsByProductCode[m.ProductCode]...)
			}
			sort.Slice(allTxsForPackage, func(i, j int) bool {
				if allTxsForPackage[i].TransactionDate != allTxsForPackage[j].TransactionDate {
					return allTxsForPackage[i].TransactionDate < allTxsForPackage[j].TransactionDate
				}
				return allTxsForPackage[i].ID < allTxsForPackage[j].ID
			})

			var startingBalance float64
			latestInventoryDateBeforePeriod := ""
			txsBeforePeriod := []*model.TransactionRecord{}
			inventorySumsByDate := make(map[string]float64)

			for _, t := range allTxsForPackage {
				if t.TransactionDate < filters.StartDate {
					txsBeforePeriod = append(txsBeforePeriod, t)
					if t.Flag == 0 {
						inventorySumsByDate[t.TransactionDate] += t.YjQuantity
						if t.TransactionDate > latestInventoryDateBeforePeriod {
							latestInventoryDateBeforePeriod = t.TransactionDate
						}
					}
				}
			}

			if latestInventoryDateBeforePeriod != "" {
				startingBalance = inventorySumsByDate[latestInventoryDateBeforePeriod]
				for _, t := range txsBeforePeriod {
					if t.TransactionDate > latestInventoryDateBeforePeriod {
						startingBalance += t.SignedYjQty()
					}
				}
			} else {
				for _, t := range txsBeforePeriod {
					startingBalance += t.SignedYjQty()
				}
			}

			var transactionsInPeriod []model.LedgerTransaction
			var netChange, maxUsage float64
			runningBalance := startingBalance

			periodInventorySums := make(map[string]float64)
			for _, t := range allTxsForPackage {
				if t.TransactionDate >= filters.StartDate && t.TransactionDate <= filters.EndDate && t.Flag == 0 {
					periodInventorySums[t.TransactionDate] += t.YjQuantity
				}
			}

			lastProcessedDate := ""
			for _, t := range allTxsForPackage {
				if t.TransactionDate >= filters.StartDate && t.TransactionDate <= filters.EndDate {
					if t.TransactionDate != lastProcessedDate && lastProcessedDate != "" {
						if inventorySum, ok := periodInventorySums[lastProcessedDate]; ok {
							runningBalance = inventorySum
						}
					}

					if t.Flag == 0 {
						if inventorySum, ok := periodInventorySums[t.TransactionDate]; ok {
							runningBalance = inventorySum
						}
					} else {
						runningBalance += t.SignedYjQty()
					}

					transactionsInPeriod = append(transactionsInPeriod, model.LedgerTransaction{TransactionRecord: *t, RunningBalance: runningBalance})

					netChange += t.SignedYjQty()
					if t.Flag == 3 && t.YjQuantity > maxUsage {
						maxUsage = t.YjQuantity
					}
					lastProcessedDate = t.TransactionDate
				}
			}

			backorderQty := backordersMap[key]
			effectiveEndingBalance := runningBalance + backorderQty

			pkg := model.StockLedgerPackageGroup{
				PackageKey:             key,
				StartingBalance:        startingBalance,
				EndingBalance:          runningBalance,
				EffectiveEndingBalance: effectiveEndingBalance,
				Transactions:           transactionsInPeriod,
				NetChange:              netChange,
				MaxUsage:               maxUsage,
			}

			var precompTotalForPackage float64
			for _, master := range mastersInPackageGroup {
				if total, ok := precompTotals[master.ProductCode]; ok {
					precompTotalForPackage += total
				}
			}
			pkg.BaseReorderPoint = maxUsage * filters.Coefficient
			pkg.PrecompoundedTotal = precompTotalForPackage
			pkg.ReorderPoint = pkg.BaseReorderPoint + pkg.PrecompoundedTotal
			pkg.IsReorderNeeded = effectiveEndingBalance < pkg.ReorderPoint && pkg.MaxUsage > 0
			if len(mastersInPackageGroup) > 0 {
				pkg.Masters = mastersInPackageGroup
			}
			allPackageLedgers = append(allPackageLedgers, pkg)
		}

		if len(allPackageLedgers) > 0 {
			var yjTotalEnding, yjTotalNetChange, yjTotalReorderPoint, yjTotalBaseReorderPoint, yjTotalPrecompounded float64
			var yjTotalStarting float64
			isYjReorderNeeded := false
			for _, pkg := range allPackageLedgers {
				if start, ok := pkg.StartingBalance.(float64); ok {
					yjTotalStarting += start
				}
				if end, ok := pkg.EndingBalance.(float64); ok {
					yjTotalEnding += end
				}
				yjTotalNetChange += pkg.NetChange
				yjTotalReorderPoint += pkg.ReorderPoint
				yjTotalBaseReorderPoint += pkg.BaseReorderPoint
				yjTotalPrecompounded += pkg.PrecompoundedTotal
				if pkg.IsReorderNeeded {
					isYjReorderNeeded = true
				}
			}
			yjGroup.StartingBalance = yjTotalStarting
			yjGroup.EndingBalance = yjTotalEnding
			yjGroup.NetChange = yjTotalNetChange
			yjGroup.TotalReorderPoint = yjTotalReorderPoint
			yjGroup.TotalBaseReorderPoint = yjTotalBaseReorderPoint
			yjGroup.TotalPrecompounded = yjTotalPrecompounded
			yjGroup.IsReorderNeeded = isYjReorderNeeded
			yjGroup.PackageLedgers = allPackageLedgers
			result = append(result, yjGroup)
		}
	}

	sort.Slice(result, func(i, j int) bool {
		prio := map[string]int{
			"1": 1, "内": 1, "2": 2, "外": 2, "3": 3, "注": 3,
			"4": 4, "歯": 4, "5": 5, "機": 5, "6": 6, "他": 6,
		}
		masterI := mastersByYjCode[result[i].YjCode][0]
		masterJ := mastersByYjCode[result[j].YjCode][0]
		prioI, okI := prio[strings.TrimSpace(masterI.UsageClassification)]
		if !okI {
			prioI = 7
		}
		prioJ, okJ := prio[strings.TrimSpace(masterJ.UsageClassification)]
		if !okJ {
			prioJ = 7
		}
		if prioI != prioJ {
			return prioI < prioJ
		}
		return masterI.KanaName < masterJ.KanaName
	})

	if filters.MovementOnly {
		var filteredResult []model.StockLedgerYJGroup
		for _, yjGroup := range result {
			hasMovement := false
			for _, pkg := range yjGroup.PackageLedgers {
				for _, tx := range pkg.Transactions {
					if tx.Flag != 0 {
						hasMovement = true
						break
					}
				}
				if hasMovement {
					break
				}
			}
			if hasMovement {
				filteredResult = append(filteredResult, yjGroup)
			}
		}
		return filteredResult, nil
	}
	return result, nil
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\db\backorders.go -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\db\backorders.go

package db

import (
	"database/sql"
	"fmt"
	"wasabi/model"
)

/**
 * @brief 複数の発注残レコードをトランザクション内で登録または更新します（UPSERT）。
 * @param tx SQLトランザクションオブジェクト
 * @param backorders 登録・更新する発注残レコードのスライス
 * @return error 処理中にエラーが発生した場合
 * @details
 * 複合主キー(yj_code, package_form, etc.)でコンフリクトが発生した場合、
 * 既存のレコードのyj_quantityに新しい数量を加算し、order_dateを更新します。
 */
func UpsertBackordersInTx(tx *sql.Tx, backorders []model.Backorder) error {
	const q = `
		INSERT INTO backorders (yj_code, package_form, jan_pack_inner_qty, yj_unit_name, order_date, yj_quantity, product_name)
		VALUES (?, ?, ?, ?, ?, ?, ?)
		ON CONFLICT(yj_code, package_form, jan_pack_inner_qty, yj_unit_name) DO UPDATE SET
			yj_quantity = yj_quantity + excluded.yj_quantity,
			order_date = excluded.order_date
	`
	stmt, err := tx.Prepare(q)
	if err != nil {
		return fmt.Errorf("failed to prepare backorder upsert statement: %w", err)
	}
	defer stmt.Close()

	for _, bo := range backorders {
		_, err := stmt.Exec(bo.YjCode, bo.PackageForm, bo.JanPackInnerQty, bo.YjUnitName, bo.OrderDate, bo.YjQuantity, bo.ProductName)
		if err != nil {
			return fmt.Errorf("failed to execute backorder upsert for yj %s: %w", bo.YjCode, err)
		}
	}
	return nil
}

/**
 * @brief 納品データに基づいて発注残を消し込みます。
 * @param conn データベース接続
 * @param deliveredItems 納品された品物のスライス
 * @return error 処理中にエラーが発生した場合
 * @details
 * 納品された各品物について、対応する発注残の数量を減らします。
 * 発注残数量が0以下になった場合は、そのレコードを削除します。
 */
func ReconcileBackorders(conn *sql.DB, deliveredItems []model.Backorder) error {
	tx, err := conn.Begin()
	if err != nil {
		return fmt.Errorf("failed to begin transaction for reconciliation: %w", err)
	}
	defer tx.Rollback()

	for _, item := range deliveredItems {
		var currentBackorderQty float64
		err := tx.QueryRow(`
			SELECT yj_quantity FROM backorders 
			WHERE yj_code = ? AND package_form = ? AND jan_pack_inner_qty = ? AND yj_unit_name = ?`,
			item.YjCode, item.PackageForm, item.JanPackInnerQty, item.YjUnitName,
		).Scan(&currentBackorderQty)

		if err != nil {
			if err == sql.ErrNoRows {
				continue // 対応する発注残がなければスキップ
			}
			return fmt.Errorf("failed to query backorder for yj %s: %w", item.YjCode, err)
		}

		newQty := currentBackorderQty - item.YjQuantity
		if newQty <= 0 {
			_, err := tx.Exec(`
				DELETE FROM backorders 
				WHERE yj_code = ? AND package_form = ? AND jan_pack_inner_qty = ? AND yj_unit_name = ?`,
				item.YjCode, item.PackageForm, item.JanPackInnerQty, item.YjUnitName,
			)
			if err != nil {
				return fmt.Errorf("failed to delete completed backorder for yj %s: %w", item.YjCode, err)
			}
		} else {
			_, err := tx.Exec(`
				UPDATE backorders SET yj_quantity = ? 
				WHERE yj_code = ? AND package_form = ? AND jan_pack_inner_qty = ? AND yj_unit_name = ?`,
				newQty, item.YjCode, item.PackageForm, item.JanPackInnerQty, item.YjUnitName,
			)
			if err != nil {
				return fmt.Errorf("failed to update backorder for yj %s: %w", item.YjCode, err)
			}
		}
	}
	return tx.Commit()
}

/**
 * @brief 全ての発注残を、集計で高速に参照できるマップ形式で取得します。
 * @param conn データベース接続
 * @return map[string]float64 包装ごとのキーを文字列にしたマップ
 * @return error 処理中にエラーが発生した場合
 * @details
 * キーは "YJコード|包装形態|内包装数量|YJ単位名" の形式で生成されます。
 * 在庫元帳の計算（GetStockLedger）で使われます。
 */
func GetAllBackordersMap(conn *sql.DB) (map[string]float64, error) {
	rows, err := conn.Query("SELECT yj_code, package_form, jan_pack_inner_qty, yj_unit_name, yj_quantity FROM backorders")
	if err != nil {
		return nil, fmt.Errorf("failed to query all backorders: %w", err)
	}
	defer rows.Close()

	backordersMap := make(map[string]float64)
	for rows.Next() {
		var bo model.Backorder
		var qty float64
		if err := rows.Scan(&bo.YjCode, &bo.PackageForm, &bo.JanPackInnerQty, &bo.YjUnitName, &qty); err != nil {
			return nil, err
		}
		key := fmt.Sprintf("%s|%s|%g|%s", bo.YjCode, bo.PackageForm, bo.JanPackInnerQty, bo.YjUnitName)
		backordersMap[key] = qty
	}
	return backordersMap, nil
}

/**
 * @brief 全ての発注残を画面表示用のリスト形式で取得します。
 * @param conn データベース接続
 * @return []model.Backorder 発注残レコードのスライス
 * @return error 処理中にエラーが発生した場合
 * @details
 * product_masterテーブルとJOINし、包装仕様の表示に必要な追加情報を取得します。
 */
func GetAllBackordersList(conn *sql.DB) ([]model.Backorder, error) {
	// ▼▼▼【ここから修正】▼▼▼
	const q = `
		SELECT
			b.yj_code, b.package_form, b.jan_pack_inner_qty, b.yj_unit_name,
			b.order_date, b.yj_quantity, b.product_name,
			IFNULL(pm.yj_pack_unit_qty, 0), 
			IFNULL(pm.jan_pack_unit_qty, 0), 
			IFNULL(pm.jan_unit_code, 0)
		FROM backorders AS b
		LEFT JOIN product_master AS pm ON b.yj_code = pm.yj_code
		GROUP BY b.yj_code, b.package_form, b.jan_pack_inner_qty, b.yj_unit_name
		ORDER BY b.order_date, b.product_name
	`
	// ▲▲▲【修正ここまで】▲▲▲
	rows, err := conn.Query(q)
	if err != nil {
		return nil, fmt.Errorf("failed to query all backorders list: %w", err)
	}
	defer rows.Close()

	var backorders []model.Backorder
	for rows.Next() {
		var bo model.Backorder
		if err := rows.Scan(
			&bo.YjCode, &bo.PackageForm, &bo.JanPackInnerQty, &bo.YjUnitName,
			&bo.OrderDate, &bo.YjQuantity, &bo.ProductName,
			&bo.YjPackUnitQty, &bo.JanPackUnitQty, &bo.JanUnitCode,
		); err != nil {
			return nil, err
		}
		backorders = append(backorders, bo)
	}
	return backorders, nil
}

/**
 * @brief 指定されたキーの発注残レコードをトランザクション内で削除します。
 * @param tx SQLトランザクションオブジェクト
 * @param backorder 削除対象のキー情報を持つBackorder構造体
 * @return error 処理中にエラーが発生した場合
 */
func DeleteBackorderInTx(tx *sql.Tx, backorder model.Backorder) error {
	const q = `DELETE FROM backorders 
				WHERE yj_code = ? AND package_form = ? AND jan_pack_inner_qty = ? AND yj_unit_name = ?`

	res, err := tx.Exec(q, backorder.YjCode, backorder.PackageForm, backorder.JanPackInnerQty, backorder.YjUnitName)
	if err != nil {
		return fmt.Errorf("failed to delete backorder for yj %s: %w", backorder.YjCode, err)
	}
	rowsAffected, err := res.RowsAffected()
	if err != nil {
		return fmt.Errorf("failed to get rows affected for backorder yj %s: %w", backorder.YjCode, err)
	}
	if rowsAffected == 0 {
		return fmt.Errorf("no backorder found to delete for yj %s with specified package", backorder.YjCode)
	}
	return nil
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\db\cleanup.go -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\db\cleanup.go

package db

import (
	"database/sql"
	"fmt"
	"strings"
	"time"
	"wasabi/model"
)

// GetCleanupCandidates は整理対象となる製品マスターのリストを取得します。
func GetCleanupCandidates(conn *sql.DB) ([]*model.ProductMaster, error) {
	// 1. 全製品の現在の理論在庫を取得
	stockMap, err := GetAllCurrentStockMap(conn)
	if err != nil {
		return nil, fmt.Errorf("failed to get all current stock: %w", err)
	}

	// 在庫がゼロの製品コードをリストアップ
	var zeroStockProductCodes []string
	allProductCodes, err := getAllProductCodes(conn)
	if err != nil {
		return nil, err
	}
	for _, pc := range allProductCodes {
		if stock, ok := stockMap[pc]; !ok || stock == 0 {
			zeroStockProductCodes = append(zeroStockProductCodes, pc)
		}
	}

	if len(zeroStockProductCodes) == 0 {
		return []*model.ProductMaster{}, nil
	}

	// 2. 在庫ゼロの製品について、過去3ヶ月の取引履歴を確認
	cutoffDate := time.Now().AddDate(0, -3, 0).Format("20060102")

	placeholders := strings.Repeat("?,", len(zeroStockProductCodes)-1) + "?"
	query := fmt.Sprintf(`
		SELECT DISTINCT jan_code FROM transaction_records
		WHERE flag IN (1, 2, 3, 11, 12)
		AND transaction_date >= ?
		AND jan_code IN (%s)
	`, placeholders)

	args := make([]interface{}, 0, len(zeroStockProductCodes)+1)
	args = append(args, cutoffDate)
	for _, pc := range zeroStockProductCodes {
		args = append(args, pc)
	}

	rows, err := conn.Query(query, args...)
	if err != nil {
		return nil, fmt.Errorf("failed to query recent transactions: %w", err)
	}
	defer rows.Close()

	// 期間内に動きがあった製品をマップに記録
	movedProducts := make(map[string]bool)
	for rows.Next() {
		var productCode string
		if err := rows.Scan(&productCode); err != nil {
			return nil, err
		}
		movedProducts[productCode] = true
	}

	// 3. 動きがなかった製品コードのみを抽出
	var finalCandidateCodes []string
	for _, pc := range zeroStockProductCodes {
		if !movedProducts[pc] {
			finalCandidateCodes = append(finalCandidateCodes, pc)
		}
	}

	if len(finalCandidateCodes) == 0 {
		return []*model.ProductMaster{}, nil
	}

	// 4. 最終候補のマスター情報を取得して返す
	mastersMap, err := GetProductMastersByCodesMap(conn, finalCandidateCodes)
	if err != nil {
		return nil, fmt.Errorf("failed to get final candidate masters: %w", err)
	}

	var result []*model.ProductMaster
	for _, code := range finalCandidateCodes {
		if master, ok := mastersMap[code]; ok {
			result = append(result, master)
		}
	}
	return result, nil
}

// DeleteMastersByCodesInTx は指定された製品コードのマスターを削除します。
func DeleteMastersByCodesInTx(tx *sql.Tx, productCodes []string) (int64, error) {
	if len(productCodes) == 0 {
		return 0, nil
	}
	placeholders := strings.Repeat("?,", len(productCodes)-1) + "?"
	query := fmt.Sprintf("DELETE FROM product_master WHERE product_code IN (%s)", placeholders)

	args := make([]interface{}, len(productCodes))
	for i, code := range productCodes {
		args[i] = code
	}

	res, err := tx.Exec(query, args...)
	if err != nil {
		return 0, fmt.Errorf("failed to delete masters: %w", err)
	}
	return res.RowsAffected()
}

// getAllProductCodes は product_master から全ての製品コードを取得するヘルパー関数です。
func getAllProductCodes(conn *sql.DB) ([]string, error) {
	rows, err := conn.Query("SELECT product_code FROM product_master")
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var codes []string
	for rows.Next() {
		var code string
		if err := rows.Scan(&code); err != nil {
			return nil, err
		}
		codes = append(codes, code)
	}
	return codes, nil
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\db\clients.go -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\db\clients.go

package db

import (
	"database/sql"
	"fmt"
	"wasabi/model"
)

/**
 * @brief 新しい得意先レコードをトランザクション内で作成します。
 * @param tx SQLトランザクションオブジェクト
 * @param code 新しい得意先コード
 * @param name 新しい得意先名
 * @return error 処理中にエラーが発生した場合
 */
func CreateClientInTx(tx *sql.Tx, code, name string) error {
	const q = `INSERT INTO client_master (client_code, client_name) VALUES (?, ?)`
	_, err := tx.Exec(q, code, name)
	if err != nil {
		return fmt.Errorf("CreateClientInTx failed: %w", err)
	}
	return nil
}

/**
 * @brief 指定された名前の得意先が既に存在するかをトランザクション内で確認します。
 * @param tx SQLトランザクションオブジェクト
 * @param name 確認する得意先名
 * @return bool 存在する場合は true, しない場合は false
 * @return error 処理中にエラーが発生した場合
 */
func CheckClientExistsByName(tx *sql.Tx, name string) (bool, error) {
	var exists int
	const q = `SELECT 1 FROM client_master WHERE client_name = ? LIMIT 1`
	err := tx.QueryRow(q, name).Scan(&exists)
	if err != nil {
		if err == sql.ErrNoRows {
			// レコードが存在しないのはエラーではない
			return false, nil
		}
		return false, fmt.Errorf("CheckClientExistsByName failed: %w", err)
	}
	return true, nil
}

/**
 * @brief 全ての得意先を client_code 順で取得します。
 * @param conn データベース接続
 * @return []model.Client 得意先のスライス
 * @return error 処理中にエラーが発生した場合
 */
func GetAllClients(conn *sql.DB) ([]model.Client, error) {
	rows, err := conn.Query("SELECT client_code, client_name FROM client_master ORDER BY client_code")
	if err != nil {
		return nil, fmt.Errorf("failed to get all clients: %w", err)
	}
	defer rows.Close()

	// 空のスライスで初期化することで、得意先が0件の場合にJSONでnullではなく空配列[]を返す
	clients := make([]model.Client, 0)
	for rows.Next() {
		var c model.Client
		if err := rows.Scan(&c.Code, &c.Name); err != nil {
			return nil, err
		}
		clients = append(clients, c)
	}
	return clients, nil
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\db\db.go -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\db\db.go

package db

import "database/sql"

// DBTXは、*sql.DB（データベース接続プール）と*sql.Tx（トランザクション）の両方が
// 満たすことができるインターフェースです。
//
// このインターフェースを関数の引数として使用することで、同じデータベース操作のロジックを
// トランザクションの内外で再利用できます。これにより、コードの重複が削減され、
// メンテナンス性が向上します。
type DBTX interface {
	Exec(query string, args ...interface{}) (sql.Result, error)
	Query(query string, args ...interface{}) (*sql.Rows, error)
	QueryRow(query string, args ...interface{}) *sql.Row
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\db\deadstock.go -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\db\dead_stock.go
package db

import (
	"database/sql"
	"fmt"
	"sort"
	"strings"
	"time"
	"wasabi/model"
)

func DeleteDeadStockByProductCodesInTx(tx *sql.Tx, productCodes []string) error {
	if len(productCodes) == 0 {
		return nil
	}
	placeholders := strings.Repeat("?,", len(productCodes)-1) + "?"
	query := fmt.Sprintf("DELETE FROM dead_stock_list WHERE product_code IN (%s)", placeholders)

	args := make([]interface{}, len(productCodes))
	for i, code := range productCodes {
		args[i] = code
	}

	_, err := tx.Exec(query, args...)
	if err != nil {
		return fmt.Errorf("failed to delete dead stock records by product codes: %w", err)
	}
	return nil
}

func GetDeadStockList(conn *sql.DB, filters model.DeadStockFilters) ([]model.DeadStockGroup, error) {
	currentStockMap, err := GetAllCurrentStockMap(conn)
	if err != nil {
		return nil, fmt.Errorf("failed to get current stock for dead stock list: %w", err)
	}

	lastUsageDateMap, err := getLastTransactionDateMap(conn, 3) // flag=3 は処方
	if err != nil {
		return nil, fmt.Errorf("failed to get last usage dates: %w", err)
	}

	var deadStockProductCodes []string
	for productCode, stock := range currentStockMap {
		if stock <= 0 {
			continue
		}
		lastUsageDate, ok := lastUsageDateMap[productCode]
		if !ok || lastUsageDate < filters.StartDate {
			deadStockProductCodes = append(deadStockProductCodes, productCode)
		}
	}

	if len(deadStockProductCodes) == 0 {
		return []model.DeadStockGroup{}, nil
	}

	mastersMap, err := GetProductMastersByCodesMap(conn, deadStockProductCodes)
	if err != nil {
		return nil, fmt.Errorf("failed to get masters for dead stock candidates: %w", err)
	}

	filteredMastersMap := make(map[string]*model.ProductMaster)
	for code, master := range mastersMap {
		keep := true
		if filters.KanaName != "" {
			if !strings.Contains(master.ProductName, filters.KanaName) && !strings.Contains(master.KanaName, filters.KanaName) {
				keep = false
			}
		}
		if filters.DosageForm != "" {
			if master.UsageClassification != filters.DosageForm {
				keep = false
			}
		}
		if filters.ShelfNumber != "" {
			if !strings.Contains(master.ShelfNumber, filters.ShelfNumber) {
				keep = false
			}
		}
		if keep {
			filteredMastersMap[code] = master
		}
	}

	var filteredProductCodes []string
	for code := range filteredMastersMap {
		filteredProductCodes = append(filteredProductCodes, code)
	}

	if len(filteredProductCodes) == 0 {
		return []model.DeadStockGroup{}, nil
	}

	deadStockRecordsMap, err := getDeadStockRecordsByProductCodes(conn, filteredProductCodes)
	if err != nil {
		return nil, fmt.Errorf("failed to get dead stock records for candidates: %w", err)
	}

	groups := make(map[string]*model.DeadStockGroup)
	for _, productCode := range filteredProductCodes {
		master, ok := filteredMastersMap[productCode]
		if !ok {
			continue
		}

		group, ok := groups[master.YjCode]
		if !ok {
			group = &model.DeadStockGroup{
				YjCode:      master.YjCode,
				ProductName: master.ProductName,
			}
			groups[master.YjCode] = group
		}

		packageKey := fmt.Sprintf("%s|%g|%s", master.PackageForm, master.JanPackInnerQty, master.YjUnitName)
		var pkgGroup *model.DeadStockPackageGroup
		for i := range group.PackageGroups {
			if group.PackageGroups[i].PackageKey == packageKey {
				pkgGroup = &group.PackageGroups[i]
				break
			}
		}
		if pkgGroup == nil {
			group.PackageGroups = append(group.PackageGroups, model.DeadStockPackageGroup{PackageKey: packageKey})
			pkgGroup = &group.PackageGroups[len(group.PackageGroups)-1]
		}

		dsProduct := model.DeadStockProduct{
			ProductMaster: *master,
			CurrentStock:  currentStockMap[productCode],
			SavedRecords:  deadStockRecordsMap[productCode],
			LastUsageDate: lastUsageDateMap[productCode],
		}

		pkgGroup.Products = append(pkgGroup.Products, dsProduct)
		pkgGroup.TotalStock += dsProduct.CurrentStock
		group.TotalStock += dsProduct.CurrentStock
	}

	var result []model.DeadStockGroup
	for _, group := range groups {
		result = append(result, *group)
	}

	sort.Slice(result, func(i, j int) bool {
		prio := map[string]int{
			"1": 1, "内": 1, "2": 2, "外": 2, "3": 3, "注": 3,
			"4": 4, "歯": 4, "5": 5, "機": 5, "6": 6, "他": 6,
		}

		var masterI, masterJ *model.ProductMaster
		if len(result[i].PackageGroups) > 0 && len(result[i].PackageGroups[0].Products) > 0 {
			masterI = &result[i].PackageGroups[0].Products[0].ProductMaster
		}
		if len(result[j].PackageGroups) > 0 && len(result[j].PackageGroups[0].Products) > 0 {
			masterJ = &result[j].PackageGroups[0].Products[0].ProductMaster
		}

		if masterI == nil || masterJ == nil {
			return result[i].YjCode < result[j].YjCode
		}

		prioI, okI := prio[strings.TrimSpace(masterI.UsageClassification)]
		if !okI {
			prioI = 7
		}
		prioJ, okJ := prio[strings.TrimSpace(masterJ.UsageClassification)]
		if !okJ {
			prioJ = 7
		}
		if prioI != prioJ {
			return prioI < prioJ
		}
		return masterI.KanaName < masterJ.KanaName
	})

	return result, nil
}

func getLastTransactionDateMap(conn *sql.DB, flag int) (map[string]string, error) {
	query := `SELECT jan_code, MAX(transaction_date) FROM transaction_records WHERE flag = ? GROUP BY jan_code`
	rows, err := conn.Query(query, flag)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	dateMap := make(map[string]string)
	for rows.Next() {
		var janCode, date string
		if err := rows.Scan(&janCode, &date); err != nil {
			return nil, err
		}
		dateMap[janCode] = date
	}
	return dateMap, nil
}

func getDeadStockRecordsByProductCodes(conn *sql.DB, productCodes []string) (map[string][]model.DeadStockRecord, error) {
	recordsMap := make(map[string][]model.DeadStockRecord)
	if len(productCodes) == 0 {
		return recordsMap, nil
	}

	placeholders := strings.Repeat("?,", len(productCodes)-1) + "?"
	query := fmt.Sprintf(`SELECT id, product_code, stock_quantity_jan, expiry_date, lot_number FROM dead_stock_list WHERE product_code IN (%s)`, placeholders)

	args := make([]interface{}, len(productCodes))
	for i, code := range productCodes {
		args[i] = code
	}

	rows, err := conn.Query(query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	for rows.Next() {
		var r model.DeadStockRecord
		if err := rows.Scan(&r.ID, &r.ProductCode, &r.StockQuantityJan, &r.ExpiryDate, &r.LotNumber); err != nil {
			return nil, err
		}
		recordsMap[r.ProductCode] = append(recordsMap[r.ProductCode], r)
	}
	return recordsMap, nil
}

func SaveDeadStockListInTx(tx *sql.Tx, records []model.DeadStockRecord) error {
	const q = `
        INSERT OR REPLACE INTO dead_stock_list 
        (product_code, yj_code, package_form, jan_pack_inner_qty, yj_unit_name, 
        stock_quantity_jan, expiry_date, lot_number, created_at)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`

	stmt, err := tx.Prepare(q)
	if err != nil {
		return fmt.Errorf("failed to prepare statement for dead_stock_list: %w", err)
	}
	defer stmt.Close()

	createdAt := time.Now().Format("2006-01-02 15:04:05")

	for _, rec := range records {
		_, err := stmt.Exec(
			rec.ProductCode, rec.YjCode, rec.PackageForm, rec.JanPackInnerQty, rec.YjUnitName,
			rec.StockQuantityJan, rec.ExpiryDate, rec.LotNumber, createdAt,
		)
		if err != nil {
			return fmt.Errorf("failed to insert/replace dead_stock_list for product %s: %w", rec.ProductCode, err)
		}
	}
	return nil
}

func GetDeadStockByYjCode(tx *sql.Tx, yjCode string) ([]model.DeadStockRecord, error) {
	const q = `
		SELECT id, product_code, stock_quantity_jan, expiry_date, lot_number 
		FROM dead_stock_list 
		WHERE yj_code = ? 
		ORDER BY product_code, expiry_date, lot_number`

	rows, err := tx.Query(q, yjCode)
	if err != nil {
		return nil, fmt.Errorf("failed to query dead stock by yj_code: %w", err)
	}
	defer rows.Close()

	var records []model.DeadStockRecord
	for rows.Next() {
		var r model.DeadStockRecord
		if err := rows.Scan(&r.ID, &r.ProductCode, &r.StockQuantityJan, &r.ExpiryDate, &r.LotNumber); err != nil {
			return nil, err
		}
		records = append(records, r)
	}
	return records, nil
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\db\guided_inventory.go -----
package db

import (
	"database/sql"
	"fmt"
	"strings"
	"wasabi/mappers"
	"wasabi/model"
)

func SaveGuidedInventoryData(tx *sql.Tx, date string, yjCode string, allPackagings []model.ProductMaster, inventoryData map[string]float64, deadstockData []model.DeadStockRecord) error {
	var allProductCodes []string
	mastersMap := make(map[string]*model.ProductMaster)
	for _, pkg := range allPackagings {
		allProductCodes = append(allProductCodes, pkg.ProductCode)
		p := pkg
		mastersMap[pkg.ProductCode] = &p
	}

	if len(allProductCodes) > 0 {
		placeholders := strings.Repeat("?,", len(allProductCodes)-1) + "?"
		pastDeleteQuery := fmt.Sprintf(`DELETE FROM transaction_records WHERE flag = 0 AND transaction_date < ? AND jan_code IN (%s)`, placeholders)
		args := make([]interface{}, 0, len(allProductCodes)+1)
		args = append(args, date)
		for _, code := range allProductCodes {
			args = append(args, code)
		}
		if _, err := tx.Exec(pastDeleteQuery, args...); err != nil {
			return fmt.Errorf("failed to delete past inventory records: %w", err)
		}
	}

	if err := DeleteTransactionsByFlagAndDateAndCodes(tx, 0, date, allProductCodes); err != nil {
		return fmt.Errorf("failed to delete old inventory records for the same day: %w", err)
	}

	const q = `
INSERT INTO transaction_records (
    transaction_date, client_code, receipt_number, line_number, flag,
    jan_code, yj_code, product_name, kana_name, usage_classification, package_form, package_spec, maker_name,
    dat_quantity, jan_pack_inner_qty, jan_quantity, jan_pack_unit_qty, jan_unit_name, jan_unit_code,
    yj_quantity, yj_pack_unit_qty, yj_unit_name, unit_price, purchase_price, supplier_wholesale,
    subtotal, tax_amount, tax_rate, expiry_date, lot_number, flag_poison,
    flag_deleterious, flag_narcotic, flag_psychotropic, flag_stimulant,
    flag_stimulant_raw, process_flag_ma
) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`

	stmt, err := tx.Prepare(q)
	if err != nil {
		return fmt.Errorf("failed to prepare statement for inventory records: %w", err)
	}
	defer stmt.Close()

	receiptNumber := fmt.Sprintf("ADJ-%s-%s", date, yjCode)
	var productCodesWithInventory []string

	for i, productCode := range allProductCodes {
		master, ok := mastersMap[productCode]
		if !ok {
			continue
		}

		janQty := inventoryData[productCode]
		if janQty > 0 {
			productCodesWithInventory = append(productCodesWithInventory, productCode)
		}

		tr := model.TransactionRecord{
			TransactionDate: date,
			Flag:            0,
			ReceiptNumber:   receiptNumber,
			LineNumber:      fmt.Sprintf("%d", i+1),
			JanQuantity:     janQty,
			ProcessFlagMA:   "COMPLETE",
		}

		tr.YjQuantity = janQty * master.JanPackInnerQty
		mappers.MapProductMasterToTransaction(&tr, master)
		tr.ClientCode = ""
		tr.SupplierWholesale = ""

		// ▼▼▼【修正】Subtotalを計算する処理を追加 ▼▼▼
		tr.Subtotal = tr.YjQuantity * tr.UnitPrice
		// ▲▲▲【修正ここまで】▲▲▲

		_, err := stmt.Exec(
			tr.TransactionDate, tr.ClientCode, tr.ReceiptNumber, tr.LineNumber, tr.Flag,
			tr.JanCode, tr.YjCode, tr.ProductName, tr.KanaName, tr.UsageClassification, tr.PackageForm, tr.PackageSpec, tr.MakerName,
			tr.DatQuantity, tr.JanPackInnerQty, tr.JanQuantity, tr.JanPackUnitQty, tr.JanUnitName, tr.JanUnitCode,
			tr.YjQuantity, tr.YjPackUnitQty, tr.YjUnitName, tr.UnitPrice, tr.PurchasePrice, tr.SupplierWholesale,
			tr.Subtotal, tr.TaxAmount, tr.TaxRate, tr.ExpiryDate, tr.LotNumber, tr.FlagPoison,
			tr.FlagDeleterious, tr.FlagNarcotic, tr.FlagPsychotropic, tr.FlagStimulant,
			tr.FlagStimulantRaw, tr.ProcessFlagMA,
		)
		if err != nil {
			return fmt.Errorf("failed to insert inventory record for %s: %w", productCode, err)
		}
	}

	if len(productCodesWithInventory) > 0 {
		var relevantDeadstockData []model.DeadStockRecord
		for _, ds := range deadstockData {
			for _, pid := range productCodesWithInventory {
				if ds.ProductCode == pid {
					relevantDeadstockData = append(relevantDeadstockData, ds)
					break
				}
			}
		}

		if err := DeleteDeadStockByProductCodesInTx(tx, productCodesWithInventory); err != nil {
			return fmt.Errorf("failed to delete old dead stock records: %w", err)
		}
		if err := SaveDeadStockListInTx(tx, relevantDeadstockData); err != nil {
			return fmt.Errorf("failed to upsert new dead stock records: %w", err)
		}
	}

	return nil
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\db\jcshms.go -----
package db

import (
	"database/sql"
	"fmt"
	"strconv"
	"strings"
	"wasabi/model" //
)

/**
 * @brief 複数のJANコードに対応するJCSHMSおよびJANCODEマスター情報を一括で取得し、マップ形式で返します。
 * @param tx SQLトランザクションオブジェクト
 * @param jans 検索対象のJANコードのスライス
 * @return map[string]*model.JCShms JANコードをキーとしたJCSHMS情報のマップ
 * @return error 処理中にエラーが発生した場合
 */
func GetJcshmsByCodesMap(tx *sql.Tx, jans []string) (map[string]*model.JCShms, error) {
	if len(jans) == 0 {
		return make(map[string]*model.JCShms), nil
	}

	results := make(map[string]*model.JCShms)
	args := make([]interface{}, len(jans))
	for i, jan := range jans {
		args[i] = jan
		results[jan] = &model.JCShms{}
	}

	inClause := `(?` + strings.Repeat(",?", len(jans)-1) + `)`

	// JCSHMSテーブルへのクエリ (JC020:規格, JC122:GS1コード を追加)
	q1 := `SELECT JC000, JC009, JC013, JC018, JC020, JC022, JC030, JC037, JC039, JC044, JC050,
	              JC061, JC062, JC063, JC064, JC065, JC066, JC122
	       FROM jcshms WHERE JC000 IN ` + inClause
	rows1, err := tx.Query(q1, args...)
	if err != nil {
		return nil, fmt.Errorf("jcshms bulk search failed: %w", err)
	}
	defer rows1.Close()

	for rows1.Next() {
		var jan string
		var jcshmsPart model.JCShms
		var jc050 sql.NullString

		if err := rows1.Scan(&jan, &jcshmsPart.JC009, &jcshmsPart.JC013, &jcshmsPart.JC018, &jcshmsPart.JC020, &jcshmsPart.JC022, &jcshmsPart.JC030,
			&jcshmsPart.JC037, &jcshmsPart.JC039, &jcshmsPart.JC044, &jc050,
			&jcshmsPart.JC061, &jcshmsPart.JC062, &jcshmsPart.JC063, &jcshmsPart.JC064, &jcshmsPart.JC065, &jcshmsPart.JC066, &jcshmsPart.JC122,
		); err != nil {
			return nil, err
		}

		res := results[jan]
		res.JC009, res.JC013, res.JC018, res.JC020, res.JC022 = jcshmsPart.JC009, jcshmsPart.JC013, jcshmsPart.JC018, jcshmsPart.JC020, jcshmsPart.JC022
		res.JC030, res.JC037, res.JC039 = jcshmsPart.JC030, jcshmsPart.JC037, jcshmsPart.JC039
		res.JC044 = jcshmsPart.JC044
		res.JC061, res.JC062, res.JC063, res.JC064, res.JC065, res.JC066 = jcshmsPart.JC061, jcshmsPart.JC062, jcshmsPart.JC063, jcshmsPart.JC064, jcshmsPart.JC065, jcshmsPart.JC066
		res.JC122 = jcshmsPart.JC122

		val, err := strconv.ParseFloat(jc050.String, 64)
		if err != nil {
			res.JC050 = 0
		} else {
			res.JC050 = val
		}
	}

	// jancodeテーブルへのクエリ (変更なし)
	q2 := `SELECT JA001, JA006, JA007, JA008 FROM jancode WHERE JA001 IN ` + inClause
	rows2, err := tx.Query(q2, args...)
	if err != nil {
		return nil, fmt.Errorf("jancode bulk search failed: %w", err)
	}
	defer rows2.Close()

	for rows2.Next() {
		var jan string
		var jaPart struct {
			JA006 sql.NullFloat64
			JA007 sql.NullString
			JA008 sql.NullFloat64
		}
		if err := rows2.Scan(&jan, &jaPart.JA006, &jaPart.JA007, &jaPart.JA008); err != nil {
			return nil, err
		}
		results[jan].JA006 = jaPart.JA006
		results[jan].JA007 = jaPart.JA007
		results[jan].JA008 = jaPart.JA008
	}

	return results, nil
}

/**
 * @brief 単一のJANコードに対応するJCSHMSおよびJANCODEマスター情報を取得します。
 * @param tx SQLトランザクションオブジェクト
 * @param jan 検索対象のJANコード
 * @return *model.JCShms JCSHMS情報
 * @return error 処理中にエラーが発生した場合
 */
func GetJcshmsRecordByJan(tx *sql.Tx, jan string) (*model.JCShms, error) {
	jcshms := &model.JCShms{}
	var jc050 sql.NullString

	// JCSHMSテーブルへのクエリ
	q1 := `SELECT JC009, JC013, JC018, JC020, JC022, JC030, JC037, JC039, JC044, JC050,
				  JC061, JC062, JC063, JC064, JC065, JC066, JC122
		   FROM jcshms WHERE JC000 = ?`
	err := tx.QueryRow(q1, jan).Scan(
		&jcshms.JC009, &jcshms.JC013, &jcshms.JC018, &jcshms.JC020, &jcshms.JC022, &jcshms.JC030,
		&jcshms.JC037, &jcshms.JC039, &jcshms.JC044, &jc050,
		&jcshms.JC061, &jcshms.JC062, &jcshms.JC063, &jcshms.JC064, &jcshms.JC065, &jcshms.JC066, &jcshms.JC122,
	)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, err
		}
		return nil, fmt.Errorf("jcshms single search failed for jan %s: %w", jan, err)
	}

	val, err := strconv.ParseFloat(jc050.String, 64)
	if err != nil {
		jcshms.JC050 = 0
	} else {
		jcshms.JC050 = val
	}

	// jancodeテーブルへのクエリ
	q2 := `SELECT JA006, JA007, JA008 FROM jancode WHERE JA001 = ?`
	err = tx.QueryRow(q2, jan).Scan(&jcshms.JA006, &jcshms.JA007, &jcshms.JA008)
	if err != nil && err != sql.ErrNoRows {
		return nil, fmt.Errorf("jancode single search failed for jan %s: %w", jan, err)
	}

	return jcshms, nil
}

/**
 * @brief 単一のGS1コードに対応するJCSHMSおよびJANCODEマスター情報を取得します。
 * @param tx SQLトランザクションオブジェクト
 * @param gs1Code 検索対象のGS1コード
 * @return *model.JCShms JCSHMS情報
 * @return string 見つかったJANコード
 * @return error 処理中にエラーが発生した場合
 */
func GetJcshmsRecordByGS1(tx *sql.Tx, gs1Code string) (*model.JCShms, string, error) {
	jcshms := &model.JCShms{}
	var jc050 sql.NullString
	var janCode string

	// JCSHMSテーブルへのクエリ (JC122で検索)
	q1 := `SELECT JC000, JC009, JC013, JC018, JC020, JC022, JC030, JC037, JC039, JC044, JC050,
				  JC061, JC062, JC063, JC064, JC065, JC066, JC122
		   FROM jcshms WHERE JC122 = ?`
	err := tx.QueryRow(q1, gs1Code).Scan(
		&janCode, &jcshms.JC009, &jcshms.JC013, &jcshms.JC018, &jcshms.JC020, &jcshms.JC022, &jcshms.JC030,
		&jcshms.JC037, &jcshms.JC039, &jcshms.JC044, &jc050,
		&jcshms.JC061, &jcshms.JC062, &jcshms.JC063, &jcshms.JC064, &jcshms.JC065, &jcshms.JC066, &jcshms.JC122,
	)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, "", err
		}
		return nil, "", fmt.Errorf("jcshms single search by gs1 failed for gs1 %s: %w", gs1Code, err)
	}

	val, err := strconv.ParseFloat(jc050.String, 64)
	if err != nil {
		jcshms.JC050 = 0
	} else {
		jcshms.JC050 = val
	}

	// jancodeテーブルへのクエリ (取得したjanCodeを使用)
	q2 := `SELECT JA006, JA007, JA008 FROM jancode WHERE JA001 = ?`
	err = tx.QueryRow(q2, janCode).Scan(&jcshms.JA006, &jcshms.JA007, &jcshms.JA008)
	if err != nil && err != sql.ErrNoRows {
		return nil, "", fmt.Errorf("jancode single search failed for jan %s: %w", janCode, err)
	}

	return jcshms, janCode, nil
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\db\migrations.go -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\db\migrations.go

package db

import (
	"database/sql"
	"fmt"
	"log"
)

/**
 * @brief データベースのマイグレーション（スキーマの更新）を適用します。
 * @param conn データベース接続
 * @return error 処理中にエラーが発生した場合
 * @details
 * アプリケーションの起動時に呼び出され、不足しているインデックスなどを追加します。
 * 各SQL文は `IF NOT EXISTS` を使用しているため、何度実行しても安全です。
 */
func ApplyMigrations(conn *sql.DB) error {
	migrations := []string{
		// パフォーマンス改善のためのインデックス
		`CREATE INDEX IF NOT EXISTS idx_transactions_receipt_number ON transaction_records (receipt_number);`,
		`CREATE INDEX IF NOT EXISTS idx_transactions_process_flag_ma ON transaction_records (process_flag_ma);`,
		`CREATE INDEX IF NOT EXISTS idx_transactions_flag_date ON transaction_records (flag, transaction_date);`,
	}

	log.Println("Applying database migrations...")
	for _, migration := range migrations {
		if _, err := conn.Exec(migration); err != nil {
			return fmt.Errorf("failed to apply migration (%s): %w", migration, err)
		}
	}
	log.Println("Database migrations applied successfully.")
	return nil
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\db\precomp.go -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\db\precomp.go

package db

import (
	"database/sql"
	"fmt"
	"strings"
	"time"
	"wasabi/mappers"
	"wasabi/model"
)

// PrecompRecordInput はフロントエンドから受け取る予製レコードの構造体です。
type PrecompRecordInput struct {
	ProductCode string  `json:"productCode"`
	JanQuantity float64 `json:"janQuantity"`
}

// PrecompRecordView は予製データを画面に表示するための構造体です。
// NOTE: この構造体は現在直接使用されていませんが、将来的な拡張のために残されています。
type PrecompRecordView struct {
	model.TransactionRecord
	FormattedPackageSpec string `json:"formattedPackageSpec"`
	JanUnitName          string `json:"janUnitName"`
}

// ▼▼▼【ここから修正・追加】▼▼▼

/**
 * @brief 特定の患者の予製レコードをデータベースと安全に同期します。
 * @param tx SQLトランザクションオブジェクト
 * @param patientNumber 対象の患者番号
 * @param records フロントエンドから送信された最新の予製レコードのスライス
 * @return error 処理中にエラーが発生した場合
 * @details
 * データベースの状態をフロントエンドの状態と完全に一致させます。
 * この際、ステータスは常に 'active' (有効) に設定されます。
 */
func UpsertPreCompoundingRecordsInTx(tx *sql.Tx, patientNumber string, records []PrecompRecordInput) error {
	if len(records) == 0 {
		if _, err := tx.Exec("DELETE FROM precomp_records WHERE client_code = ?", patientNumber); err != nil {
			return fmt.Errorf("failed to delete all precomp records for patient %s: %w", patientNumber, err)
		}
		return nil
	}

	productCodesInPayload := make([]interface{}, len(records)+1)
	placeholders := make([]string, len(records))
	productCodesInPayload[0] = patientNumber
	for i, rec := range records {
		placeholders[i] = "?"
		productCodesInPayload[i+1] = rec.ProductCode
	}

	deleteQuery := fmt.Sprintf("DELETE FROM precomp_records WHERE client_code = ? AND jan_code NOT IN (%s)", strings.Join(placeholders, ","))
	if _, err := tx.Exec(deleteQuery, productCodesInPayload...); err != nil {
		return fmt.Errorf("failed to delete removed precomp records for patient %s: %w", patientNumber, err)
	}

	var productCodes []string
	for _, rec := range records {
		productCodes = append(productCodes, rec.ProductCode)
	}
	mastersMap, err := GetProductMastersByCodesMap(tx, productCodes)
	if err != nil {
		return fmt.Errorf("failed to get product masters for precomp: %w", err)
	}

	const q = `INSERT INTO precomp_records (
		transaction_date, client_code, receipt_number, line_number, jan_code, yj_code, product_name, kana_name,
		usage_classification, package_form, package_spec, maker_name, jan_pack_inner_qty, jan_quantity,
		jan_pack_unit_qty, jan_unit_name, jan_unit_code, yj_quantity, yj_pack_unit_qty, yj_unit_name,
		purchase_price, supplier_wholesale, created_at, status
	) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
	ON CONFLICT(client_code, jan_code) DO UPDATE SET
		jan_quantity = excluded.jan_quantity,
		yj_quantity = excluded.yj_quantity,
		created_at = excluded.created_at,
		status = excluded.status`

	stmt, err := tx.Prepare(q)
	if err != nil {
		return fmt.Errorf("failed to prepare precomp upsert statement: %w", err)
	}
	defer stmt.Close()

	now := time.Now()
	dateStr := now.Format("20060102")
	receiptNumber := fmt.Sprintf("PRECOMP-%s", patientNumber)

	for i, rec := range records {
		master, ok := mastersMap[rec.ProductCode]
		if !ok {
			continue
		}

		tr := model.TransactionRecord{
			TransactionDate: dateStr,
			ClientCode:      patientNumber,
			ReceiptNumber:   receiptNumber,
			LineNumber:      fmt.Sprintf("%d", i+1),
			JanCode:         rec.ProductCode,
			JanQuantity:     rec.JanQuantity,
		}
		if master.JanPackInnerQty > 0 {
			tr.YjQuantity = rec.JanQuantity * master.JanPackInnerQty
		}

		mappers.MapProductMasterToTransaction(&tr, master)

		_, err := stmt.Exec(
			tr.TransactionDate, tr.ClientCode, tr.ReceiptNumber, tr.LineNumber, tr.JanCode, tr.YjCode, tr.ProductName, tr.KanaName,
			tr.UsageClassification, tr.PackageForm, tr.PackageSpec, tr.MakerName, tr.JanPackInnerQty, tr.JanQuantity,
			tr.JanPackUnitQty, tr.JanUnitName, tr.JanUnitCode, tr.YjQuantity, tr.YjPackUnitQty, tr.YjUnitName,
			tr.PurchasePrice, tr.SupplierWholesale, now.Format("2006-01-02 15:04:05"), "active",
		)
		if err != nil {
			return fmt.Errorf("failed to upsert precomp record for product %s: %w", rec.ProductCode, err)
		}
	}

	return nil
}

/**
 * @brief 特定の患者の予製レコードをリストで取得します。
 * @param conn データベース接続
 * @param patientNumber 対象の患者番号
 * @return []model.TransactionRecord 予製レコードのスライス
 * @return error 処理中にエラーが発生した場合
 * @details
 * 予製レコードをTransactionRecordの形式で取得します。flagは5（予製）として固定値を設定します。
 */
func GetPreCompoundingRecordsByPatient(conn *sql.DB, patientNumber string) ([]model.TransactionRecord, error) {
	const q = `SELECT
		id, transaction_date, client_code, receipt_number, line_number, 5 AS flag,
		jan_code, yj_code, product_name, kana_name, usage_classification, package_form, package_spec, maker_name,
		0.0, jan_pack_inner_qty, jan_quantity, jan_pack_unit_qty, jan_unit_name, jan_unit_code,
		yj_quantity, yj_pack_unit_qty, yj_unit_name, 0.0, purchase_price, supplier_wholesale,
		0.0, 0.0, 0.0, '', '', 0, 0, 0, 0, 0, 0, ''
		FROM precomp_records WHERE client_code = ? ORDER BY id`

	rows, err := conn.Query(q, patientNumber)
	if err != nil {
		return nil, fmt.Errorf("failed to query precomp records for patient %s: %w", patientNumber, err)
	}
	defer rows.Close()

	var records []model.TransactionRecord
	for rows.Next() {
		r, err := ScanTransactionRecord(rows)
		if err != nil {
			return nil, fmt.Errorf("failed to scan precomp record: %w", err)
		}
		records = append(records, *r)
	}
	return records, nil
}

/**
 * @brief 特定の患者の予製レコードをすべて削除します。
 * @param conn データベース接続
 * @param patientNumber 対象の患者番号
 * @return error 処理中にエラーが発生した場合
 */
func DeletePreCompoundingRecordsByPatient(conn *sql.DB, patientNumber string) error {
	const q = `DELETE FROM precomp_records WHERE client_code = ?`
	if _, err := conn.Exec(q, patientNumber); err != nil {
		return fmt.Errorf("failed to delete precomp records for patient %s: %w", patientNumber, err)
	}
	return nil
}

/**
 * @brief 全製品の有効な予製引当数量の合計をマップで返します。
 * @param conn データベース接続
 * @return map[string]float64 JANコードをキー、YJ単位での合計引当数量を値とするマップ
 * @return error 処理中にエラーが発生した場合
 * @details
 * この関数が返す値は、在庫元帳の計算において発注点の調整に使用されます。
 * statusが'active'のレコードのみを集計対象とします。
 */
func GetPreCompoundingTotals(conn *sql.DB) (map[string]float64, error) {
	const q = `SELECT jan_code, SUM(yj_quantity) FROM precomp_records WHERE status = 'active' GROUP BY jan_code`
	rows, err := conn.Query(q)
	if err != nil {
		return nil, fmt.Errorf("failed to query precomp totals: %w", err)
	}
	defer rows.Close()

	totals := make(map[string]float64)
	for rows.Next() {
		var productCode string
		var totalQuantity float64
		if err := rows.Scan(&productCode, &totalQuantity); err != nil {
			return nil, fmt.Errorf("failed to scan precomp total: %w", err)
		}
		totals[productCode] = totalQuantity
	}
	return totals, nil
}

/**
 * @brief 複数の製品コードに紐づく有効な予製レコードを全て取得します。
 * @param conn データベース接続
 * @param productCodes 取得対象の製品コードのスライス
 * @return []model.TransactionRecord 予製レコードのスライス
 * @return error 処理中にエラーが発生した場合
 * @details
 * 「棚卸調整」画面で、理論在庫と実在庫の差を分析する際の参考情報として使用されます。
 */
func GetPreCompoundingDetailsByProductCodes(conn *sql.DB, productCodes []string) ([]model.TransactionRecord, error) {
	if len(productCodes) == 0 {
		return []model.TransactionRecord{}, nil
	}

	placeholders := strings.Repeat("?,", len(productCodes)-1) + "?"
	query := fmt.Sprintf(`
		SELECT
			p.id, p.transaction_date, p.client_code, p.receipt_number, p.line_number, 5 AS flag,
			p.jan_code, p.yj_code, p.product_name, p.kana_name, p.usage_classification, p.package_form, p.package_spec, p.maker_name,
			0.0, p.jan_pack_inner_qty, p.jan_quantity, p.jan_pack_unit_qty, p.jan_unit_name, p.jan_unit_code,
			p.yj_quantity, p.yj_pack_unit_qty, p.yj_unit_name, 0.0, p.purchase_price, p.supplier_wholesale,
			0.0, 0.0, 0.0, '', '', 0, 0, 0, 0, 0, 0, ''
		FROM precomp_records AS p
		WHERE p.jan_code IN (%s)
		ORDER BY p.created_at, p.client_code`, placeholders)

	args := make([]interface{}, len(productCodes))
	for i, code := range productCodes {
		args[i] = code
	}

	rows, err := conn.Query(query, args...)
	if err != nil {
		return nil, fmt.Errorf("failed to query precomp details by product codes: %w", err)
	}
	defer rows.Close()

	var records []model.TransactionRecord
	for rows.Next() {
		r, err := ScanTransactionRecord(rows)
		if err != nil {
			return nil, fmt.Errorf("failed to scan precomp detail record: %w", err)
		}
		records = append(records, *r)
	}
	return records, nil
}

/**
 * @brief 全患者の有効な予製レコードを全て取得します。
 * @param conn データベース接続
 * @return []model.TransactionRecord 予製レコードのスライス
 * @return error 処理中にエラーが発生した場合
 * @details
 * 予製データの一括CSVエクスポート機能で使用されます。
 */
func GetAllPreCompoundingRecords(conn *sql.DB) ([]model.TransactionRecord, error) {
	const q = `SELECT
		id, transaction_date, client_code, receipt_number, line_number, 5 AS flag,
		jan_code, yj_code, product_name, kana_name, usage_classification, package_form, package_spec, maker_name,
		0.0, jan_pack_inner_qty, jan_quantity, jan_pack_unit_qty, jan_unit_name, jan_unit_code,
		yj_quantity, yj_pack_unit_qty, yj_unit_name, 0.0, purchase_price, supplier_wholesale,
		0.0, 0.0, 0.0, '', '', 0, 0, 0, 0, 0, 0, ''
		FROM precomp_records 
		ORDER BY client_code, id`

	rows, err := conn.Query(q)
	if err != nil {
		return nil, fmt.Errorf("failed to query all precomp records: %w", err)
	}
	defer rows.Close()

	var records []model.TransactionRecord
	for rows.Next() {
		r, err := ScanTransactionRecord(rows)
		if err != nil {
			return nil, fmt.Errorf("failed to scan precomp record: %w", err)
		}
		records = append(records, *r)
	}
	return records, nil
}

/**
 * @brief 指定された患者の予製レコードを中断状態（inactive）にします。
 * @param tx SQLトランザクションオブジェクト
 * @param patientNumber 対象の患者番号
 * @return error 処理中にエラーが発生した場合
 */
func SuspendPreCompoundingRecordsByPatient(tx *sql.Tx, patientNumber string) error {
	const q = `UPDATE precomp_records SET status = 'inactive' WHERE client_code = ?`
	if _, err := tx.Exec(q, patientNumber); err != nil {
		return fmt.Errorf("failed to suspend precomp records for patient %s: %w", patientNumber, err)
	}
	return nil
}

/**
 * @brief 指定された患者の予製レコードを再開状態（active）にします。
 * @param tx SQLトランザクションオブジェクト
 * @param patientNumber 対象の患者番号
 * @return error 処理中にエラーが発生した場合
 */
func ResumePreCompoundingRecordsByPatient(tx *sql.Tx, patientNumber string) error {
	const q = `UPDATE precomp_records SET status = 'active' WHERE client_code = ?`
	if _, err := tx.Exec(q, patientNumber); err != nil {
		return fmt.Errorf("failed to resume precomp records for patient %s: %w", patientNumber, err)
	}
	return nil
}

/**
 * @brief 指定された患者の現在の予製ステータスを取得します。
 * @param conn データベース接続
 * @param patientNumber 対象の患者番号
 * @return string ステータス ('active', 'inactive', 'none')
 * @return error 処理中にエラーが発生した場合
 */
func GetPreCompoundingStatusByPatient(conn *sql.DB, patientNumber string) (string, error) {
	var status string
	const q = `SELECT status FROM precomp_records WHERE client_code = ? LIMIT 1`
	err := conn.QueryRow(q, patientNumber).Scan(&status)
	if err != nil {
		if err == sql.ErrNoRows {
			return "none", nil // レコードが存在しない
		}
		return "", fmt.Errorf("failed to get precomp status for patient %s: %w", patientNumber, err)
	}
	return status, nil
}

// ▲▲▲【修正ここまで】▲▲▲


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\db\product_master.go -----
package db

import (
	"database/sql"
	"fmt"
	"strings"
	"wasabi/model"
)

// SelectColumns は、product_masterテーブルから全列を取得するためのSQLスニペットです。
const SelectColumns = `
	product_code, yj_code, gs1_code, product_name, kana_name, maker_name,
	specification, usage_classification, package_form, yj_unit_name, yj_pack_unit_qty,
	jan_pack_inner_qty, jan_unit_code, jan_pack_unit_qty, origin,
	nhi_price, purchase_price,
	flag_poison, flag_deleterious, flag_narcotic, flag_psychotropic, flag_stimulant, flag_stimulant_raw,
	is_order_stopped, supplier_wholesale,
	group_code, shelf_number, category, user_notes
`

// ScanProductMaster は、データベースの行データから model.ProductMaster 構造体に値を割り当てます。
func ScanProductMaster(row interface{ Scan(...interface{}) error }) (*model.ProductMaster, error) {
	var m model.ProductMaster
	err := row.Scan(
		// 基本情報
		&m.ProductCode, &m.YjCode, &m.Gs1Code, &m.ProductName, &m.KanaName, &m.MakerName,
		// 製品仕様情報
		&m.Specification, &m.UsageClassification, &m.PackageForm, &m.YjUnitName, &m.YjPackUnitQty,
		&m.JanPackInnerQty, &m.JanUnitCode, &m.JanPackUnitQty, &m.Origin,
		// 価格情報
		&m.NhiPrice, &m.PurchasePrice,
		// 管理フラグ・情報
		&m.FlagPoison, &m.FlagDeleterious, &m.FlagNarcotic, &m.FlagPsychotropic, &m.FlagStimulant, &m.FlagStimulantRaw,
		&m.IsOrderStopped, &m.SupplierWholesale,
		// ユーザー定義項目
		&m.GroupCode, &m.ShelfNumber, &m.Category, &m.UserNotes,
	)
	if err != nil {
		return nil, err
	}
	return &m, nil
}

// UpsertProductMasterInTx は、製品マスターレコードをトランザクション内でUPSERTします。
func UpsertProductMasterInTx(tx *sql.Tx, rec model.ProductMasterInput) error {
	const q = `INSERT INTO product_master (
		product_code, yj_code, gs1_code, product_name, kana_name, maker_name,
		specification, usage_classification, package_form, yj_unit_name, yj_pack_unit_qty,
		jan_pack_inner_qty, jan_unit_code, jan_pack_unit_qty, origin,
		nhi_price, purchase_price,
		flag_poison, flag_deleterious, flag_narcotic, flag_psychotropic, flag_stimulant, flag_stimulant_raw,
		is_order_stopped, supplier_wholesale,
		group_code, shelf_number, category, user_notes
	) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
	ON CONFLICT(product_code) DO UPDATE SET
		yj_code=excluded.yj_code, gs1_code=excluded.gs1_code, product_name=excluded.product_name, kana_name=excluded.kana_name, maker_name=excluded.maker_name,
		specification=excluded.specification, usage_classification=excluded.usage_classification, package_form=excluded.package_form, yj_unit_name=excluded.yj_unit_name, yj_pack_unit_qty=excluded.yj_pack_unit_qty,
		jan_pack_inner_qty=excluded.jan_pack_inner_qty, jan_unit_code=excluded.jan_unit_code, jan_pack_unit_qty=excluded.jan_pack_unit_qty, origin=excluded.origin,
		nhi_price=excluded.nhi_price, purchase_price=excluded.purchase_price,
		flag_poison=excluded.flag_poison, flag_deleterious=excluded.flag_deleterious, flag_narcotic=excluded.flag_narcotic, flag_psychotropic=excluded.flag_psychotropic, flag_stimulant=excluded.flag_stimulant, flag_stimulant_raw=excluded.flag_stimulant_raw,
		is_order_stopped=excluded.is_order_stopped, supplier_wholesale=excluded.supplier_wholesale,
		group_code=excluded.group_code, shelf_number=excluded.shelf_number, category=excluded.category, user_notes=excluded.user_notes
	`

	_, err := tx.Exec(q,
		rec.ProductCode, rec.YjCode, rec.Gs1Code, rec.ProductName, rec.KanaName, rec.MakerName,
		rec.Specification, rec.UsageClassification, rec.PackageForm, rec.YjUnitName, rec.YjPackUnitQty,
		rec.JanPackInnerQty, rec.JanUnitCode, rec.JanPackUnitQty, rec.Origin,
		rec.NhiPrice, rec.PurchasePrice,
		rec.FlagPoison, rec.FlagDeleterious, rec.FlagNarcotic, rec.FlagPsychotropic, rec.FlagStimulant, rec.FlagStimulantRaw,
		rec.IsOrderStopped, rec.SupplierWholesale,
		rec.GroupCode, rec.ShelfNumber, rec.Category, rec.UserNotes,
	)
	if err != nil {
		return fmt.Errorf("UpsertProductMasterInTx failed: %w", err)
	}
	return nil
}

// GetProductMastersByCodesMap は、複数の製品コードをキーに製品マスターをマップ形式で取得します。
func GetProductMastersByCodesMap(dbtx DBTX, codes []string) (map[string]*model.ProductMaster, error) {
	if len(codes) == 0 {
		return make(map[string]*model.ProductMaster), nil
	}
	q := `SELECT ` + SelectColumns + ` FROM product_master WHERE product_code IN (?` + strings.Repeat(",?", len(codes)-1) + `)`

	args := make([]interface{}, len(codes))
	for i, code := range codes {
		args[i] = code
	}

	rows, err := dbtx.Query(q, args...)
	if err != nil {
		return nil, fmt.Errorf("query for masters by codes failed: %w", err)
	}
	defer rows.Close()

	mastersMap := make(map[string]*model.ProductMaster)
	for rows.Next() {
		m, err := ScanProductMaster(rows)
		if err != nil {
			return nil, err
		}
		mastersMap[m.ProductCode] = m
	}
	return mastersMap, nil
}

// GetProductMasterByCode は、単一の製品コードをキーに製品マスターを取得します。
func GetProductMasterByCode(dbtx DBTX, code string) (*model.ProductMaster, error) {
	q := `SELECT ` + SelectColumns + ` FROM product_master WHERE product_code = ?`
	row := dbtx.QueryRow(q, code)
	m, err := ScanProductMaster(row)
	if err == sql.ErrNoRows {
		return nil, nil
	}
	if err != nil {
		return nil, fmt.Errorf("GetProductMasterByCode failed for code %s: %w", code, err)
	}
	return m, nil
}

// ▼▼▼【ここから追加】▼▼▼
// GetProductMasterByGS1Code は、単一のGS1コードをキーに製品マスターを取得します。
func GetProductMasterByGS1Code(dbtx DBTX, gs1Code string) (*model.ProductMaster, error) {
	q := `SELECT ` + SelectColumns + ` FROM product_master WHERE gs1_code = ?`
	row := dbtx.QueryRow(q, gs1Code)
	m, err := ScanProductMaster(row)
	if err == sql.ErrNoRows {
		return nil, nil // 見つからない場合はエラーではなく、nilを返す
	}
	if err != nil {
		return nil, fmt.Errorf("GetProductMasterByGS1Code failed for gs1_code %s: %w", gs1Code, err)
	}
	return m, nil
}

// ▲▲▲【追加ここまで】▲▲▲

// GetAllProductMasters は、product_masterテーブルの全レコードを取得します。
func GetAllProductMasters(dbtx DBTX) ([]*model.ProductMaster, error) {
	q := `SELECT ` + SelectColumns + ` FROM product_master ORDER BY
		CASE
			WHEN TRIM(usage_classification) = '内' OR TRIM(usage_classification) = '1' THEN 1
			WHEN TRIM(usage_classification) = '外' OR TRIM(usage_classification) = '2' THEN 2
			WHEN TRIM(usage_classification) = '注' OR TRIM(usage_classification) = '3' THEN 3
			WHEN TRIM(usage_classification) = '歯' OR TRIM(usage_classification) = '4' THEN 4
			WHEN TRIM(usage_classification) = '機' OR TRIM(usage_classification) = '5' THEN 5
			WHEN TRIM(usage_classification) = '他' OR TRIM(usage_classification) = '6' THEN 6
			ELSE 7
		END,
		kana_name`

	rows, err := dbtx.Query(q)
	if err != nil {
		return nil, fmt.Errorf("GetAllProductMasters query failed: %w", err)
	}
	defer rows.Close()

	var masters []*model.ProductMaster
	for rows.Next() {
		m, err := ScanProductMaster(rows)
		if err != nil {
			return nil, err
		}
		masters = append(masters, m)
	}
	return masters, nil
}

// GetProductMastersByYjCode は、YJコードをキーに製品マスターを取得します。
func GetProductMastersByYjCode(dbtx DBTX, yjCode string) ([]*model.ProductMaster, error) {
	q := `SELECT ` + SelectColumns + ` FROM product_master WHERE yj_code = ? ORDER BY product_code`
	rows, err := dbtx.Query(q, yjCode)
	if err != nil {
		return nil, fmt.Errorf("query for masters by yj code failed: %w", err)
	}
	defer rows.Close()

	var masters []*model.ProductMaster
	for rows.Next() {
		m, err := ScanProductMaster(rows)
		if err != nil {
			return nil, err
		}
		masters = append(masters, m)
	}
	return masters, nil
}

// UpdatePricesAndSuppliersInTx は、納入価と採用卸を一括更新します。
func UpdatePricesAndSuppliersInTx(tx *sql.Tx, updates []model.PriceUpdate) error {
	const q = `UPDATE product_master SET purchase_price = ?, supplier_wholesale = ? WHERE product_code = ?`
	stmt, err := tx.Prepare(q)
	if err != nil {
		return fmt.Errorf("UpdatePricesAndSuppliersInTx failed to prepare statement: %w", err)
	}
	defer stmt.Close()

	for _, u := range updates {
		_, err := stmt.Exec(u.NewPurchasePrice, u.NewSupplier, u.ProductCode)
		if err != nil {
			// 1件のエラーで全体を止めずに、エラーを返しつつも処理を継続する（ロールバックは呼び出し元に任せる）
			return fmt.Errorf("UpdatePricesAndSuppliersInTx failed for product %s: %w", u.ProductCode, err)
		}
	}
	return nil
}

// ClearAllProductMasters は、product_masterテーブルの全レコードを削除します。
func ClearAllProductMasters(tx *sql.Tx) error {
	const q = `DELETE FROM product_master`
	_, err := tx.Exec(q)
	if err != nil {
		return fmt.Errorf("ClearAllProductMasters failed: %w", err)
	}
	return nil
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\db\search.go -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\db\search.go

package db

import (
	"database/sql"
	"fmt"
	"log"
	"strconv"
	"wasabi/model"
	"wasabi/units"
)

/**
 * @brief 製品名またはカナ名でJCSHMSマスタを検索し、表示用のモデルを返します。
 * @param conn データベース接続
 * @param nameQuery 検索キーワード
 * @return []model.ProductMasterView 検索結果のスライス
 * @return error 処理中にエラーが発生した場合
 * @details
 * この関数は `product_master` テーブルではなく、`jcshms` と `jancode` テーブルを直接検索します。
 * アプリ内にまだ存在しない公式の医薬品マスターを探すために使用されます。
 */
func SearchJcshmsByName(conn *sql.DB, nameQuery string) ([]model.ProductMasterView, error) {
	const q = `
		SELECT
			j.JC000, j.JC009, j.JC018, j.JC022, j.JC030, j.JC013, j.JC037, j.JC039,
			j.JC044, j.JC050,
			ja.JA006, ja.JA008, ja.JA007
		FROM jcshms AS j
		LEFT JOIN jancode AS ja ON j.JC000 = ja.JA001
		WHERE j.JC018 LIKE ? OR j.JC022 LIKE ?
		ORDER BY
			CASE
				WHEN TRIM(j.JC013) = '内' OR TRIM(j.JC013) = '1' THEN 1
				WHEN TRIM(j.JC013) = '外' OR TRIM(j.JC013) = '2' THEN 2
				WHEN TRIM(j.JC013) = '注' OR TRIM(j.JC013) = '3' THEN 3
				WHEN TRIM(j.JC013) = '歯' OR TRIM(j.JC013) = '4' THEN 4
				WHEN TRIM(j.JC013) = '機' OR TRIM(j.JC013) = '5' THEN 5
				WHEN TRIM(j.JC013) = '他' OR TRIM(j.JC013) = '6' THEN 6
				ELSE 7
			END,
			j.JC022
		LIMIT 500`

	rows, err := conn.Query(q, "%"+nameQuery+"%", "%"+nameQuery+"%")
	if err != nil {
		return nil, fmt.Errorf("SearchJcshmsByName failed: %w", err)
	}
	defer rows.Close()

	var results []model.ProductMasterView
	for rows.Next() {
		var tempJcshms model.JCShms
		var jc000, jc009, jc018, jc022, jc030, jc013, jc037, jc039, jc050 sql.NullString
		var jc044 sql.NullFloat64

		if err := rows.Scan(
			&jc000, &jc009, &jc018, &jc022, &jc030, &jc013, &jc037, &jc039,
			&jc044, &jc050,
			&tempJcshms.JA006, &tempJcshms.JA008, &tempJcshms.JA007,
		); err != nil {
			return nil, err
		}

		tempJcshms.JC013 = jc013.String
		tempJcshms.JC037 = jc037.String
		tempJcshms.JC039 = jc039.String
		tempJcshms.JC044 = jc044.Float64

		nhiPriceVal, err := strconv.ParseFloat(jc050.String, 64)
		if err != nil {
			nhiPriceVal = 0
			if jc050.String != "" {
				log.Printf("[WARN] Invalid JC050 data during search: '%s'", jc050.String)
			}
		}
		tempJcshms.JC050 = nhiPriceVal

		var unitNhiPrice float64
		if tempJcshms.JC044 > 0 {
			unitNhiPrice = tempJcshms.JC050 / tempJcshms.JC044
		}

		janUnitCodeInt, _ := strconv.Atoi(tempJcshms.JA007.String)

		view := model.ProductMasterView{
			ProductMaster: model.ProductMaster{
				ProductCode:         jc000.String,
				YjCode:              jc009.String,
				ProductName:         jc018.String,
				KanaName:            jc022.String,
				MakerName:           jc030.String,
				UsageClassification: jc013.String,
				PackageForm:         jc037.String,
				YjUnitName:          units.ResolveName(jc039.String),
				YjPackUnitQty:       jc044.Float64,
				JanPackInnerQty:     tempJcshms.JA006.Float64,
				JanPackUnitQty:      tempJcshms.JA008.Float64,
				JanUnitCode:         janUnitCodeInt,
				NhiPrice:            unitNhiPrice,
			},
			FormattedPackageSpec: units.FormatPackageSpec(&tempJcshms),
		}

		if view.ProductMaster.JanUnitCode == 0 {
			view.JanUnitName = view.ProductMaster.YjUnitName
		} else {
			view.JanUnitName = units.ResolveName(tempJcshms.JA007.String)
		}
		results = append(results, view)
	}
	return results, nil
}

/**
 * @brief 製品名またはカナ名で `product_master` テーブル全体を検索します。
 * @param conn データベース接続
 * @param nameQuery 検索キーワード
 * @return []model.ProductMasterView 検索結果のスライス
 * @return error 処理中にエラーが発生した場合
 * @details
 * JCSHMS由来のマスターと、手動で登録されたPROVISIONALマスターの両方が検索対象になります。
 */
func SearchAllProductMastersByName(conn *sql.DB, nameQuery string) ([]model.ProductMasterView, error) {
	q := `SELECT ` + SelectColumns + ` FROM product_master 
		  WHERE kana_name LIKE ? OR product_name LIKE ? 
		  ORDER BY
			CASE
				WHEN TRIM(usage_classification) = '内' OR TRIM(usage_classification) = '1' THEN 1
				WHEN TRIM(usage_classification) = '外' OR TRIM(usage_classification) = '2' THEN 2
				WHEN TRIM(usage_classification) = '注' OR TRIM(usage_classification) = '3' THEN 3
				WHEN TRIM(usage_classification) = '歯' OR TRIM(usage_classification) = '4' THEN 4
				WHEN TRIM(usage_classification) = '機' OR TRIM(usage_classification) = '5' THEN 5
				WHEN TRIM(usage_classification) = '他' OR TRIM(usage_classification) = '6' THEN 6
				ELSE 7
			END,
			kana_name
		  LIMIT 500`

	rows, err := conn.Query(q, "%"+nameQuery+"%", "%"+nameQuery+"%")
	if err != nil {
		return nil, fmt.Errorf("SearchAllProductMastersByName failed: %w", err)
	}
	defer rows.Close()

	var mastersView []model.ProductMasterView
	for rows.Next() {
		m, err := ScanProductMaster(rows)
		if err != nil {
			return nil, err
		}

		tempJcshms := model.JCShms{
			JC037: m.PackageForm,
			JC039: m.YjUnitName,
			JC044: m.YjPackUnitQty,
			JA006: sql.NullFloat64{Float64: m.JanPackInnerQty, Valid: true},
			JA008: sql.NullFloat64{Float64: m.JanPackUnitQty, Valid: true},
			JA007: sql.NullString{String: fmt.Sprintf("%d", m.JanUnitCode), Valid: true},
		}
		formattedSpec := units.FormatPackageSpec(&tempJcshms)

		mastersView = append(mastersView, model.ProductMasterView{
			ProductMaster:        *m,
			FormattedPackageSpec: formattedSpec,
		})
	}
	return mastersView, nil
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\db\sequence.go -----
package db

import (
	"database/sql"
	"fmt"
	"strconv"
	"strings"
)

/**
 * @brief 指定されたシーケンスの次の値を発行します。
 * @param tx SQLトランザクションオブジェクト
 * @param name シーケンス名 (例: "MA2Y", "CL")
 * @param prefix 新しいコードに付与する接頭辞 (例: "MA2Y", "CL")
 * @param padding ゼロ埋めする桁数
 * @return string 生成された新しいコード (例: "CL0001")
 * @return error 処理中にエラーが発生した場合
 */
func NextSequenceInTx(tx *sql.Tx, name, prefix string, padding int) (string, error) {
	var lastNo int
	err := tx.QueryRow("SELECT last_no FROM code_sequences WHERE name = ?", name).Scan(&lastNo)
	if err != nil {
		if err == sql.ErrNoRows {
			// シーケンスが存在しない場合は、ここで作成するロジックを追加することも可能
			return "", fmt.Errorf("sequence '%s' not found", name)
		}
		return "", fmt.Errorf("failed to get sequence '%s': %w", name, err)
	}

	newNo := lastNo + 1
	_, err = tx.Exec("UPDATE code_sequences SET last_no = ? WHERE name = ?", newNo, name)
	if err != nil {
		return "", fmt.Errorf("failed to update sequence '%s': %w", name, err)
	}

	format := fmt.Sprintf("%s%%0%dd", prefix, padding)
	return fmt.Sprintf(format, newNo), nil
}

func InitializeSequenceFromMaxClientCode(tx *sql.Tx) error {
	var maxCode string
	err := tx.QueryRow("SELECT client_code FROM client_master ORDER BY client_code DESC LIMIT 1").Scan(&maxCode)
	if err != nil {
		if err == sql.ErrNoRows {
			// レコードがない場合は0で初期化
			_, err = tx.Exec("UPDATE code_sequences SET last_no = 0 WHERE name = 'CL'")
			return err
		}
		return err
	}
	if strings.HasPrefix(maxCode, "CL") {
		numPart := strings.TrimPrefix(maxCode, "CL")
		maxNum, _ := strconv.Atoi(numPart)
		_, err = tx.Exec("UPDATE code_sequences SET last_no = ? WHERE name = 'CL'", maxNum)
		return err
	}
	return nil
}

func InitializeSequenceFromMaxYjCode(tx *sql.Tx) error {
	var maxYj string
	err := tx.QueryRow("SELECT yj_code FROM product_master WHERE yj_code LIKE 'MA2Y%' ORDER BY yj_code DESC LIMIT 1").Scan(&maxYj)
	if err != nil {
		if err == sql.ErrNoRows {
			_, err = tx.Exec("UPDATE code_sequences SET last_no = 0 WHERE name = 'MA2Y'")
			return err
		}
		return err
	}
	if strings.HasPrefix(maxYj, "MA2Y") {
		numPart := strings.TrimPrefix(maxYj, "MA2Y")
		maxNum, _ := strconv.Atoi(numPart)
		_, err = tx.Exec("UPDATE code_sequences SET last_no = ? WHERE name = 'MA2Y'", maxNum)
		return err
	}
	return nil
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\db\stock.go -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\WASABI\db\stock.go

package db

import (
	"database/sql"
	"fmt"
)

/**
 * @brief 指定された単一製品の現在の理論在庫を、棚卸を考慮して正確に計算します。
 */
func CalculateCurrentStockForProduct(executor DBTX, janCode string) (float64, error) {
	var latestInventoryDate sql.NullString
	err := executor.QueryRow(`
		SELECT MAX(transaction_date) FROM transaction_records
		WHERE jan_code = ? AND flag = 0`, janCode).Scan(&latestInventoryDate)
	if err != nil && err != sql.ErrNoRows {
		return 0, fmt.Errorf("failed to get latest inventory date for %s: %w", janCode, err)
	}

	var baseStock float64
	var netChangeQuery string
	var args []interface{}

	if latestInventoryDate.Valid && latestInventoryDate.String != "" {
		err := executor.QueryRow(`
			SELECT SUM(yj_quantity) FROM transaction_records
			WHERE jan_code = ? AND flag = 0 AND transaction_date = ?`,
			janCode, latestInventoryDate.String).Scan(&baseStock)
		if err != nil {
			return 0, fmt.Errorf("failed to sum inventory for %s on %s: %w", janCode, latestInventoryDate.String, err)
		}

		netChangeQuery = `
			SELECT
				SUM(CASE
					WHEN flag IN (1, 4, 11) THEN yj_quantity
					WHEN flag IN (2, 3, 5, 12) THEN -yj_quantity
					ELSE 0
				END)
			FROM transaction_records
			WHERE jan_code = ? AND transaction_date > ?`
		args = []interface{}{janCode, latestInventoryDate.String}

	} else {
		baseStock = 0
		netChangeQuery = `
			SELECT
				SUM(CASE
					WHEN flag IN (1, 4, 11) THEN yj_quantity
					WHEN flag IN (2, 3, 5, 12) THEN -yj_quantity
					ELSE 0
				END)
			FROM transaction_records
			WHERE jan_code = ?`
		args = []interface{}{janCode}
	}

	var nullNetChange sql.NullFloat64
	err = executor.QueryRow(netChangeQuery, args...).Scan(&nullNetChange)
	if err != nil && err != sql.ErrNoRows {
		return 0, fmt.Errorf("failed to calculate net change for %s: %w", janCode, err)
	}
	netChange := nullNetChange.Float64

	return baseStock + netChange, nil
}

/**
 * @brief 全製品の現在庫を効率的に計算し、マップで返します。
 */
func GetAllCurrentStockMap(conn *sql.DB) (map[string]float64, error) {
	rows, err := conn.Query(`
		SELECT jan_code, transaction_date, flag, yj_quantity 
		FROM transaction_records 
		ORDER BY jan_code, transaction_date, id`)
	if err != nil {
		return nil, fmt.Errorf("failed to get all transactions for stock calculation: %w", err)
	}
	defer rows.Close()

	stockMap := make(map[string]float64)

	type txRecord struct {
		Date string
		Flag int
		Qty  float64
	}
	recordsByJan := make(map[string][]txRecord)

	for rows.Next() {
		var janCode, date string
		var flag int
		var qty float64
		if err := rows.Scan(&janCode, &date, &flag, &qty); err != nil {
			return nil, err
		}
		if janCode == "" {
			continue
		}
		recordsByJan[janCode] = append(recordsByJan[janCode], txRecord{Date: date, Flag: flag, Qty: qty})
	}

	for janCode, records := range recordsByJan {
		var latestInvDate string
		baseStock := 0.0

		invStocksOnDate := make(map[string]float64)
		for _, r := range records {
			if r.Flag == 0 {
				if r.Date > latestInvDate {
					latestInvDate = r.Date
				}
				invStocksOnDate[r.Date] += r.Qty
			}
		}
		if latestInvDate != "" {
			baseStock = invStocksOnDate[latestInvDate]
		}

		netChange := 0.0
		for _, r := range records {
			startDate := "00000000"
			if latestInvDate != "" {
				startDate = latestInvDate
			}

			if r.Date > startDate {
				switch r.Flag {
				case 1, 4, 11:
					netChange += r.Qty
				case 2, 3, 5, 12:
					netChange -= r.Qty
				}
			}
		}
		stockMap[janCode] = baseStock + netChange
	}

	return stockMap, nil
}

/**
 * @brief 指定された製品の、特定の日付時点での理論在庫を計算します。
 */
func CalculateStockOnDate(dbtx DBTX, productCode string, targetDate string) (float64, error) {
	var latestInventoryDate sql.NullString
	// 1. 基準日以前の最新の棚卸日を取得
	err := dbtx.QueryRow(`
		SELECT MAX(transaction_date) FROM transaction_records
		WHERE jan_code = ? AND flag = 0 AND transaction_date <= ?`,
		productCode, targetDate).Scan(&latestInventoryDate)
	if err != nil && err != sql.ErrNoRows {
		return 0, fmt.Errorf("failed to get latest inventory date for %s on or before %s: %w", productCode, targetDate, err)
	}

	if latestInventoryDate.Valid && latestInventoryDate.String != "" {
		// --- 棚卸履歴がある場合の計算 ---
		var baseStock float64
		// 1a. 棚卸日の在庫合計を基点とする
		err := dbtx.QueryRow(`
			SELECT SUM(yj_quantity) FROM transaction_records
			WHERE jan_code = ? AND flag = 0 AND transaction_date = ?`,
			productCode, latestInventoryDate.String).Scan(&baseStock)
		if err != nil {
			return 0, fmt.Errorf("failed to sum inventory for %s on %s: %w", productCode, latestInventoryDate.String, err)
		}

		// 1b. もし基準日が棚卸日当日なら、棚卸数量のみを返す
		if latestInventoryDate.String == targetDate {
			return baseStock, nil
		}

		// 1c. 棚卸日の翌日から基準日までの変動を計算
		var netChangeAfterInvDate sql.NullFloat64
		err = dbtx.QueryRow(`
			SELECT SUM(CASE WHEN flag IN (1, 4, 11) THEN yj_quantity WHEN flag IN (2, 3, 5, 12) THEN -yj_quantity ELSE 0 END)
			FROM transaction_records
			WHERE jan_code = ? AND flag != 0 AND transaction_date > ? AND transaction_date <= ?`,
			productCode, latestInventoryDate.String, targetDate).Scan(&netChangeAfterInvDate)
		if err != nil && err != sql.ErrNoRows {
			return 0, fmt.Errorf("failed to calculate net change after inventory date for %s: %w", productCode, err)
		}

		return baseStock + netChangeAfterInvDate.Float64, nil

	} else {
		// --- 棚卸履歴がない場合の計算 ---
		var totalNetChange sql.NullFloat64
		err = dbtx.QueryRow(`
			SELECT SUM(CASE WHEN flag IN (1, 4, 11) THEN yj_quantity WHEN flag IN (2, 3, 5, 12) THEN -yj_quantity ELSE 0 END)
			FROM transaction_records
			WHERE jan_code = ? AND flag != 0 AND transaction_date <= ?`,
			productCode, targetDate).Scan(&totalNetChange)
		if err != nil && err != sql.ErrNoRows {
			return 0, fmt.Errorf("failed to calculate total net change for %s: %w", productCode, err)
		}
		return totalNetChange.Float64, nil
	}
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\db\transaction_records.go -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\db\transaction_records.go
package db

import (
	"database/sql"
	"fmt"
	"log"
	"strings"
	"wasabi/mappers"
	"wasabi/model"
)

const TransactionColumns = `
    id, transaction_date, client_code, receipt_number, line_number, flag,
    jan_code, yj_code, product_name, kana_name, usage_classification, package_form, package_spec, maker_name,
    dat_quantity, jan_pack_inner_qty, jan_quantity, jan_pack_unit_qty, jan_unit_name, jan_unit_code,
    yj_quantity, yj_pack_unit_qty, yj_unit_name, unit_price, purchase_price, supplier_wholesale,
    subtotal, tax_amount, tax_rate, expiry_date, lot_number, flag_poison,
    flag_deleterious, flag_narcotic, flag_psychotropic, flag_stimulant,
    flag_stimulant_raw, process_flag_ma`

func ScanTransactionRecord(row interface{ Scan(...interface{}) error }) (*model.TransactionRecord, error) {
	var r model.TransactionRecord
	err := row.Scan(
		&r.ID, &r.TransactionDate, &r.ClientCode, &r.ReceiptNumber, &r.LineNumber, &r.Flag,
		&r.JanCode, &r.YjCode, &r.ProductName, &r.KanaName, &r.UsageClassification, &r.PackageForm, &r.PackageSpec, &r.MakerName,
		&r.DatQuantity, &r.JanPackInnerQty, &r.JanQuantity, &r.JanPackUnitQty, &r.JanUnitName, &r.JanUnitCode,
		&r.YjQuantity, &r.YjPackUnitQty, &r.YjUnitName, &r.UnitPrice, &r.PurchasePrice, &r.SupplierWholesale,
		&r.Subtotal, &r.TaxAmount, &r.TaxRate, &r.ExpiryDate, &r.LotNumber, &r.FlagPoison,
		&r.FlagDeleterious, &r.FlagNarcotic, &r.FlagPsychotropic, &r.FlagStimulant,
		&r.FlagStimulantRaw, &r.ProcessFlagMA,
	)
	if err != nil {
		return nil, err
	}
	return &r, nil
}

func PersistTransactionRecordsInTx(tx *sql.Tx, records []model.TransactionRecord) error {
	const q = `
INSERT OR REPLACE INTO transaction_records (
    transaction_date, client_code, receipt_number, line_number, flag,
    jan_code, yj_code, product_name, kana_name, usage_classification, package_form, package_spec, maker_name,
    dat_quantity, jan_pack_inner_qty, jan_quantity, jan_pack_unit_qty, jan_unit_name, jan_unit_code,
    yj_quantity, yj_pack_unit_qty, yj_unit_name, unit_price, purchase_price, supplier_wholesale,
    subtotal, tax_amount, tax_rate, expiry_date, lot_number, flag_poison,
    flag_deleterious, flag_narcotic, flag_psychotropic, flag_stimulant,
    flag_stimulant_raw, process_flag_ma
) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`

	stmt, err := tx.Prepare(q)
	if err != nil {
		return fmt.Errorf("failed to prepare statement for transaction_records: %w", err)
	}
	defer stmt.Close()

	for _, rec := range records {
		_, err = stmt.Exec(
			rec.TransactionDate, rec.ClientCode, rec.ReceiptNumber, rec.LineNumber, rec.Flag,
			rec.JanCode, rec.YjCode, rec.ProductName, rec.KanaName, rec.UsageClassification, rec.PackageForm, rec.PackageSpec, rec.MakerName,
			rec.DatQuantity, rec.JanPackInnerQty, rec.JanQuantity,
			rec.JanPackUnitQty,
			rec.JanUnitName, rec.JanUnitCode,
			rec.YjQuantity, rec.YjPackUnitQty, rec.YjUnitName, rec.UnitPrice, rec.PurchasePrice, rec.SupplierWholesale,
			rec.Subtotal, rec.TaxAmount, rec.TaxRate, rec.ExpiryDate, rec.LotNumber, rec.FlagPoison,
			rec.FlagDeleterious, rec.FlagNarcotic, rec.FlagPsychotropic, rec.FlagStimulant,
			rec.FlagStimulantRaw, rec.ProcessFlagMA,
		)
		if err != nil {
			log.Printf("FAILED to insert into transaction_records: JAN=%s, Error: %v", rec.JanCode, err)
			return fmt.Errorf("failed to exec statement for transaction_records (JAN: %s): %w", rec.JanCode, err)
		}
	}
	return nil
}

func PersistTransactionRecordsWithMasterMappingInTx(tx *sql.Tx, records []model.TransactionRecord) error {
	var productCodes []string
	codeMap := make(map[string]struct{})
	for _, rec := range records {
		if _, exists := codeMap[rec.JanCode]; !exists {
			productCodes = append(productCodes, rec.JanCode)
			codeMap[rec.JanCode] = struct{}{}
		}
	}

	masters, err := GetProductMastersByCodesMap(tx, productCodes)
	if err != nil {
		return fmt.Errorf("failed to pre-fetch masters for persisting records: %w", err)
	}

	const q = `
INSERT OR REPLACE INTO transaction_records (
    transaction_date, client_code, receipt_number, line_number, flag,
    jan_code, yj_code, product_name, kana_name, usage_classification, package_form, package_spec, maker_name,
    dat_quantity, jan_pack_inner_qty, jan_quantity, jan_pack_unit_qty, jan_unit_name, jan_unit_code,
    yj_quantity, yj_pack_unit_qty, yj_unit_name, unit_price, purchase_price, supplier_wholesale,
    subtotal, tax_amount, tax_rate, expiry_date, lot_number, flag_poison,
    flag_deleterious, flag_narcotic, flag_psychotropic, flag_stimulant,
    flag_stimulant_raw, process_flag_ma
) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`

	stmt, err := tx.Prepare(q)
	if err != nil {
		return fmt.Errorf("failed to prepare statement for transaction_records: %w", err)
	}
	defer stmt.Close()

	for _, rec := range records {
		if master, ok := masters[rec.JanCode]; ok {
			mappers.MapProductMasterToTransaction(&rec, master)
		}

		_, err = stmt.Exec(
			rec.TransactionDate, rec.ClientCode, rec.ReceiptNumber, rec.LineNumber, rec.Flag,
			rec.JanCode, rec.YjCode, rec.ProductName, rec.KanaName, rec.UsageClassification, rec.PackageForm, rec.PackageSpec, rec.MakerName,
			rec.DatQuantity, rec.JanPackInnerQty, rec.JanQuantity,
			rec.JanPackUnitQty,
			rec.JanUnitName, rec.JanCode,
			rec.YjQuantity, rec.YjPackUnitQty, rec.YjUnitName, rec.UnitPrice, rec.PurchasePrice, rec.SupplierWholesale,
			rec.Subtotal, rec.TaxAmount, rec.TaxRate, rec.ExpiryDate, rec.LotNumber, rec.FlagPoison,
			rec.FlagDeleterious, rec.FlagNarcotic, rec.FlagPsychotropic, rec.FlagStimulant,
			rec.FlagStimulantRaw, rec.ProcessFlagMA,
		)
		if err != nil {
			log.Printf("FAILED to insert into transaction_records: JAN=%s, Error: %v", rec.JanCode, err)
			return fmt.Errorf("failed to exec statement for transaction_records (JAN: %s): %w", rec.JanCode, err)
		}
	}
	return nil
}

func GetReceiptNumbersByDate(conn *sql.DB, date string) ([]string, error) {
	const q = `SELECT DISTINCT receipt_number FROM transaction_records 
               WHERE transaction_date = ? AND receipt_number LIKE 'io%' 
               ORDER BY receipt_number`
	rows, err := conn.Query(q, date)
	if err != nil {
		return nil, fmt.Errorf("failed to get receipt numbers by date: %w", err)
	}
	defer rows.Close()

	var numbers []string
	for rows.Next() {
		var number string
		if err = rows.Scan(&number); err != nil {
			return nil, err
		}
		numbers = append(numbers, number)
	}
	return numbers, nil
}

func GetTransactionsByReceiptNumber(conn *sql.DB, receiptNumber string) ([]model.TransactionRecord, error) {
	q := `SELECT ` + TransactionColumns + ` FROM transaction_records WHERE receipt_number = ? ORDER BY line_number`
	rows, err := conn.Query(q, receiptNumber)
	if err != nil {
		return nil, fmt.Errorf("failed to get transactions by receipt number: %w", err)
	}
	defer rows.Close()

	var records []model.TransactionRecord
	for rows.Next() {
		r, err := ScanTransactionRecord(rows)
		if err != nil {
			return nil, err
		}
		records = append(records, *r)
	}
	return records, nil
}

func DeleteTransactionsByReceiptNumberInTx(tx *sql.Tx, receiptNumber string) error {
	const q = `DELETE FROM transaction_records WHERE receipt_number = ?`
	_, err := tx.Exec(q, receiptNumber)
	if err != nil {
		return fmt.Errorf("failed to delete transactions for receipt %s: %w", receiptNumber, err)
	}
	return nil
}

func DeleteTransactionsByFlagAndDateAndCodes(tx *sql.Tx, flag int, date string, productCodes []string) error {
	if len(productCodes) == 0 {
		return nil
	}

	placeholders := strings.Repeat("?,", len(productCodes)-1) + "?"
	q := fmt.Sprintf(`DELETE FROM transaction_records WHERE flag = ? AND transaction_date = ? AND jan_code IN (%s)`, placeholders)

	args := make([]interface{}, 0, len(productCodes)+2)
	args = append(args, flag, date)
	for _, code := range productCodes {
		args = append(args, code)
	}

	_, err := tx.Exec(q, args...)
	if err != nil {
		return fmt.Errorf("failed to delete transactions by flag, date, and codes: %w", err)
	}
	return nil
}

func GetInventoryTransactionsByDate(conn *sql.DB, date string) ([]model.TransactionRecord, error) {
	q := `SELECT ` + TransactionColumns + ` FROM transaction_records WHERE flag = 0 AND transaction_date = ? ORDER BY product_name`
	rows, err := conn.Query(q, date)
	if err != nil {
		return nil, fmt.Errorf("failed to get inventory transactions by date: %w", err)
	}
	defer rows.Close()

	var records []model.TransactionRecord
	for rows.Next() {
		r, err := ScanTransactionRecord(rows)
		if err != nil {
			return nil, err
		}
		records = append(records, *r)
	}
	return records, nil
}

func DeleteTransactionByIDInTx(tx *sql.Tx, id int) error {
	const q = `DELETE FROM transaction_records WHERE id = ?`
	res, err := tx.Exec(q, id)
	if err != nil {
		return fmt.Errorf("failed to delete transaction with id %d: %w", id, err)
	}
	rowsAffected, err := res.RowsAffected()
	if err != nil {
		return fmt.Errorf("failed to check rows affected for id %d: %w", id, err)
	}
	if rowsAffected == 0 {
		return fmt.Errorf("no transaction found to delete with id %d", id)
	}
	return nil
}

func GetAllTransactionsForProductAfterDate(conn *sql.DB, janCode string, date string) ([]model.TransactionRecord, error) {
	q := `SELECT ` + TransactionColumns + ` FROM transaction_records 
          WHERE jan_code = ? AND transaction_date > ? AND flag != 0
          ORDER BY transaction_date, id`

	rows, err := conn.Query(q, janCode, date)
	if err != nil {
		return nil, fmt.Errorf("failed to get transactions after date for %s: %w", janCode, err)
	}
	defer rows.Close()

	var records []model.TransactionRecord
	for rows.Next() {
		r, err := ScanTransactionRecord(rows)
		if err != nil {
			return nil, err
		}
		records = append(records, *r)
	}
	return records, nil
}

func GetTransactionsForProductInDateRange(conn *sql.DB, janCode string, startDate string, endDate string) ([]model.TransactionRecord, error) {
	q := `SELECT ` + TransactionColumns + ` FROM transaction_records 
          WHERE jan_code = ? AND transaction_date BETWEEN ? AND ?
          ORDER BY transaction_date DESC, id DESC`

	rows, err := conn.Query(q, janCode, startDate, endDate)
	if err != nil {
		return nil, fmt.Errorf("failed to get transactions in date range for %s: %w", janCode, err)
	}
	defer rows.Close()

	var records []model.TransactionRecord
	for rows.Next() {
		r, err := ScanTransactionRecord(rows)
		if err != nil {
			return nil, err
		}
		records = append(records, *r)
	}
	return records, nil
}

func DeleteTransactionsByFlagAndDate(tx *sql.Tx, flag int, date string) error {
	const q = `DELETE FROM transaction_records WHERE flag = ? AND transaction_date = ?`
	_, err := tx.Exec(q, flag, date)
	if err != nil {
		return fmt.Errorf("failed to delete transactions for flag %d, date %s: %w", flag, date, err)
	}
	return nil
}

func DeleteZeroFillInventoryTransactions(tx *sql.Tx, date string, janCodes []string) error {
	if len(janCodes) == 0 {
		return nil
	}

	placeholders := strings.Repeat("?,", len(janCodes)-1) + "?"
	q := fmt.Sprintf(`
        DELETE FROM transaction_records 
        WHERE flag = 0 
          AND transaction_date = ? 
          AND line_number LIKE 'Z%%' 
          AND jan_code IN (%s)`, placeholders)

	args := make([]interface{}, 0, len(janCodes)+1)
	args = append(args, date)
	for _, jan := range janCodes {
		args = append(args, jan)
	}

	_, err := tx.Exec(q, args...)
	if err != nil {
		return fmt.Errorf("failed to delete zero-fill inventory transactions for date %s: %w", date, err)
	}
	return nil
}

func GetLastInventoryDateMap(conn *sql.DB) (map[string]string, error) {
	rows, err := conn.Query(`
        SELECT jan_code, MAX(transaction_date) 
        FROM transaction_records 
        WHERE flag = 0 AND jan_code != ''
        GROUP BY jan_code
    `)
	if err != nil {
		return nil, fmt.Errorf("failed to get last inventory dates: %w", err)
	}
	defer rows.Close()

	dateMap := make(map[string]string)
	for rows.Next() {
		var janCode string
		var lastDate sql.NullString
		if err := rows.Scan(&janCode, &lastDate); err != nil {
			return nil, err
		}
		if lastDate.Valid {
			dateMap[janCode] = lastDate.String
		}
	}
	return dateMap, nil
}

func UpdateFullTransactionInTx(tx *sql.Tx, record *model.TransactionRecord) error {
	const q = `
        UPDATE transaction_records SET
            jan_code = ?, yj_code = ?, product_name = ?, kana_name = ?, usage_classification = ?, package_form = ?, 
            package_spec = ?, maker_name = ?, jan_pack_inner_qty = ?, jan_pack_unit_qty = ?, 
            jan_unit_name = ?, jan_unit_code = ?, yj_pack_unit_qty = ?, yj_unit_name = ?,
            unit_price = ?, purchase_price = ?, supplier_wholesale = ?,
            flag_poison = ?, flag_deleterious = ?, flag_narcotic = ?, flag_psychotropic = ?,
            flag_stimulant = ?, flag_stimulant_raw = ?,
            yj_quantity = ?, subtotal = ?,
            process_flag_ma = ?
        WHERE id = ?`

	_, err := tx.Exec(q,
		record.JanCode, record.YjCode, record.ProductName, record.KanaName, record.UsageClassification, record.PackageForm,
		record.PackageSpec, record.MakerName, record.JanPackInnerQty, record.JanPackUnitQty,
		record.JanUnitName, record.JanUnitCode, record.YjPackUnitQty, record.YjUnitName,
		record.UnitPrice, record.PurchasePrice, record.SupplierWholesale,
		record.FlagPoison, record.FlagDeleterious, record.FlagNarcotic, record.FlagPsychotropic,
		record.FlagStimulant, record.FlagStimulantRaw,
		record.YjQuantity, record.Subtotal,
		record.ProcessFlagMA,
		record.ID,
	)
	if err != nil {
		return fmt.Errorf("failed to update transaction ID %d: %w", record.ID, err)
	}
	return nil
}

func ClearAllTransactions(conn *sql.DB) error {
	tx, err := conn.Begin()
	if err != nil {
		return fmt.Errorf("failed to start transaction for clearing transactions: %w",
			err)
	}
	defer tx.Rollback()

	if _, err := tx.Exec(`DELETE FROM transaction_records`); err != nil {
		return fmt.Errorf("failed to execute delete from transaction_records: %w", err)
	}

	if _, err := tx.Exec(`UPDATE sqlite_sequence SET seq = 0 WHERE name = 'transaction_records'`); err != nil {
		log.Printf("Could not reset sequence for transaction_records (this is normal if table was empty): %v", err)
	}

	return tx.Commit()
}

func DeleteUsageTransactionsInDateRange(tx *sql.Tx, minDate, maxDate string) error {
	const q = `DELETE FROM transaction_records WHERE flag = 3 AND transaction_date BETWEEN ? AND ?`
	_, err := tx.Exec(q, minDate, maxDate)
	if err != nil {
		return fmt.Errorf("failed to delete usage transactions: %w", err)
	}
	return nil
}

func GetLastInventoryDate(tx *sql.Tx, janCode string) string {
	var lastDate sql.NullString
	tx.QueryRow("SELECT MAX(transaction_date) FROM transaction_records WHERE jan_code = ? AND flag = 0", janCode).Scan(&lastDate)
	if lastDate.Valid {
		return lastDate.String
	}
	return ""
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\db\valuation.go -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\db\valuation.go
package db

import (
	"database/sql"
	"fmt"
	"sort"
	"strings"
	"wasabi/model"
	"wasabi/units"
)

// ValuationGroup は剤型ごとの在庫評価額の集計結果を保持します。
type ValuationGroup struct {
	UsageClassification string                     `json:"usageClassification"`
	DetailRows          []model.ValuationDetailRow `json:"detailRows"`
	TotalNhiValue       float64                    `json:"totalNhiValue"`
	TotalPurchaseValue  float64                    `json:"totalPurchaseValue"`
}

func GetInventoryValuation(conn *sql.DB, filters model.ValuationFilters) ([]ValuationGroup, error) {
	masterQuery := `SELECT ` + SelectColumns + ` FROM product_master WHERE 1=1`
	var masterArgs []interface{}
	if filters.KanaName != "" {
		masterQuery += " AND (kana_name LIKE ? OR product_name LIKE ?)"
		masterArgs = append(masterArgs, "%"+filters.KanaName+"%", "%"+filters.KanaName+"%")
	}
	if filters.UsageClassification != "" && filters.UsageClassification != "all" {
		masterQuery += " AND usage_classification = ?"
		masterArgs = append(masterArgs, filters.UsageClassification)
	}

	allMasters, err := getAllProductMastersFiltered(conn, masterQuery, masterArgs...)
	if err != nil {
		return nil, fmt.Errorf("failed to get filtered product masters: %w", err)
	}
	if len(allMasters) == 0 {
		return []ValuationGroup{}, nil
	}

	yjHasJcshmsMaster := make(map[string]bool)
	mastersByJanCode := make(map[string]*model.ProductMaster)
	for _, master := range allMasters {
		if master.Origin == "JCSHMS" {
			yjHasJcshmsMaster[master.YjCode] = true
		}
		mastersByJanCode[master.ProductCode] = master
	}

	mastersByPackageKey := make(map[string][]*model.ProductMaster)
	for _, master := range allMasters {
		key := fmt.Sprintf("%s|%s|%g|%s", master.YjCode, master.PackageForm, master.JanPackInnerQty, master.YjUnitName)
		mastersByPackageKey[key] = append(mastersByPackageKey[key], master)
	}

	var detailRows []model.ValuationDetailRow

	for _, mastersInPackageGroup := range mastersByPackageKey {
		var totalStockForPackage float64
		for _, m := range mastersInPackageGroup {
			stock, err := CalculateStockOnDate(conn, m.ProductCode, filters.Date)
			if err != nil {
				return nil, fmt.Errorf("failed to calculate stock on date for product %s: %w", m.ProductCode, err)
			}
			totalStockForPackage += stock
		}

		if totalStockForPackage == 0 {
			continue
		}

		var repMaster *model.ProductMaster
		if len(mastersInPackageGroup) > 0 {
			repMaster = mastersInPackageGroup[0]
			for _, m := range mastersInPackageGroup {
				if m.Origin == "JCSHMS" {
					repMaster = m
					break
				}
			}
		} else {
			continue
		}

		showAlert := false
		if repMaster.Origin != "JCSHMS" && !yjHasJcshmsMaster[repMaster.YjCode] {
			showAlert = true
		}

		tempJcshms := model.JCShms{
			JC037: repMaster.PackageForm, JC039: repMaster.YjUnitName, JC044: repMaster.YjPackUnitQty,
			JA006: sql.NullFloat64{Float64: repMaster.JanPackInnerQty, Valid: true},
			JA008: sql.NullFloat64{Float64: repMaster.JanPackUnitQty, Valid: true},
			JA007: sql.NullString{String: fmt.Sprintf("%d", repMaster.JanUnitCode), Valid: true},
		}
		spec := units.FormatPackageSpec(&tempJcshms)

		// ▼▼▼【ここから修正】▼▼▼
		// repMaster.NhiPrice は既にYJ単位あたりの単価として保存されているため、そのまま使用します。
		unitNhiPrice := repMaster.NhiPrice

		// totalNhiValue(薬価金額)は「総在庫数(YJ単位) × YJ単価」で計算します。
		totalNhiValue := totalStockForPackage * unitNhiPrice

		// packageNhiPrice(包装薬価)は「YJ単価 × YJ包装数量」で逆算して表示します。
		packageNhiPrice := unitNhiPrice * repMaster.YjPackUnitQty

		// repMaster.PurchasePrice は包装単位の納入価として保存されているため、YJ単位の単価を計算します。
		var totalPurchaseValue float64
		if repMaster.YjPackUnitQty > 0 {
			unitPurchasePrice := repMaster.PurchasePrice / repMaster.YjPackUnitQty
			totalPurchaseValue = totalStockForPackage * unitPurchasePrice
		}
		// ▲▲▲【修正ここまで】▲▲▲

		detailRows = append(detailRows, model.ValuationDetailRow{
			YjCode:               repMaster.YjCode,
			ProductName:          repMaster.ProductName,
			ProductCode:          repMaster.ProductCode,
			PackageSpec:          spec,
			Stock:                totalStockForPackage,
			YjUnitName:           repMaster.YjUnitName,
			PackageNhiPrice:      packageNhiPrice,
			PackagePurchasePrice: repMaster.PurchasePrice,
			TotalNhiValue:        totalNhiValue,
			TotalPurchaseValue:   totalPurchaseValue,
			ShowAlert:            showAlert,
		})
	}

	resultGroups := make(map[string]*ValuationGroup)
	for _, row := range detailRows {
		master, ok := mastersByJanCode[row.ProductCode]
		if !ok {
			continue
		}
		uc := master.UsageClassification
		group, ok := resultGroups[uc]
		if !ok {
			group = &ValuationGroup{UsageClassification: uc}
			resultGroups[uc] = group
		}
		group.DetailRows = append(group.DetailRows, row)
		group.TotalNhiValue += row.TotalNhiValue
		group.TotalPurchaseValue += row.TotalPurchaseValue
	}

	order := map[string]int{"1": 1, "内": 1, "2": 2, "外": 2, "3": 3, "歯": 3, "4": 4, "注": 4, "5": 5, "機": 5, "6": 6, "他": 6}
	var finalResult []ValuationGroup
	for _, group := range resultGroups {
		sort.Slice(group.DetailRows, func(i, j int) bool {
			return mastersByJanCode[group.DetailRows[i].ProductCode].KanaName < mastersByJanCode[group.DetailRows[j].ProductCode].KanaName
		})
		finalResult = append(finalResult, *group)
	}
	sort.Slice(finalResult, func(i, j int) bool {
		prioI, okI := order[strings.TrimSpace(finalResult[i].UsageClassification)]
		if !okI {
			prioI = 7
		}
		prioJ, okJ := order[strings.TrimSpace(finalResult[j].UsageClassification)]
		if !okJ {
			prioJ = 7
		}
		return prioI < prioJ
	})

	return finalResult, nil
}

// getAllProductMastersFiltered はフィルタ条件に基づいて製品マスターを取得するヘルパー関数です。
func getAllProductMastersFiltered(conn *sql.DB, query string, args ...interface{}) ([]*model.ProductMaster, error) {
	rows, err := conn.Query(query, args...)
	if err != nil {
		return nil, fmt.Errorf("GetAllProductMastersFiltered query failed: %w", err)
	}
	defer rows.Close()

	var masters []*model.ProductMaster
	for rows.Next() {
		m, err := ScanProductMaster(rows)
		if err != nil {
			return nil, err
		}
		masters = append(masters, m)
	}
	return masters, nil
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\db\wholesalers.go -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\db\wholesalers.go

package db

import (
	"database/sql"
	"fmt"
	"wasabi/model"
)

/**
 * @brief 全ての卸業者を wholesaler_code 順で取得します。
 * @param conn データベース接続
 * @return []model.Wholesaler 卸業者のスライス
 * @return error 処理中にエラーが発生した場合
 */
func GetAllWholesalers(conn *sql.DB) ([]model.Wholesaler, error) {
	rows, err := conn.Query("SELECT wholesaler_code, wholesaler_name FROM wholesalers ORDER BY wholesaler_code")
	if err != nil {
		return nil, fmt.Errorf("failed to get all wholesalers: %w", err)
	}
	defer rows.Close()

	// 空のスライスで初期化することで、卸業者が0件の場合にJSONでnullではなく空配列[]を返す
	wholesalers := make([]model.Wholesaler, 0)
	for rows.Next() {
		var w model.Wholesaler
		if err := rows.Scan(&w.Code, &w.Name); err != nil {
			return nil, err
		}
		wholesalers = append(wholesalers, w)
	}
	return wholesalers, nil
}

/**
 * @brief 新しい卸業者を作成します。
 * @param conn データベース接続
 * @param code 卸業者コード
 * @param name 卸業者名
 * @return error 処理中にエラーが発生した場合
 */
func CreateWholesaler(conn *sql.DB, code, name string) error {
	const q = `INSERT INTO wholesalers (wholesaler_code, wholesaler_name) VALUES (?, ?)`
	_, err := conn.Exec(q, code, name)
	if err != nil {
		return fmt.Errorf("CreateWholesaler failed: %w", err)
	}
	return nil
}

/**
 * @brief 指定されたコードの卸業者を削除します。
 * @param conn データベース接続
 * @param code 削除する卸業者のコード
 * @return error 処理中にエラーが発生した場合
 */
func DeleteWholesaler(conn *sql.DB, code string) error {
	const q = `DELETE FROM wholesalers WHERE wholesaler_code = ?`
	_, err := conn.Exec(q, code)
	if err != nil {
		return fmt.Errorf("failed to delete wholesaler with code %s: %w", code, err)
	}
	return nil
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\deadstock\handler.go -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\deadstock\handler.go
package deadstock

import (
	"database/sql"
	"encoding/csv"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strconv"
	"strings"
	"time"
	"wasabi/config"
	"wasabi/db"
	"wasabi/model"

	"golang.org/x/text/encoding/japanese"
	"golang.org/x/text/transform"
)

func GetDeadStockHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		q := r.URL.Query()
		coefficient, err := strconv.ParseFloat(q.Get("coefficient"), 64)
		if err != nil {
			coefficient = 1.5
		}

		cfg, err := config.LoadConfig()
		if err != nil {
			http.Error(w, "設定ファイルの読み込みに失敗しました: "+err.Error(), http.StatusInternalServerError)
			return
		}

		now := time.Now()
		endDate := "99999999"
		startDate := now.AddDate(0, 0, -cfg.CalculationPeriodDays)

		// ▼▼▼【ここから修正】▼▼▼
		filters := model.DeadStockFilters{
			StartDate:        startDate.Format("20060102"),
			EndDate:          endDate,
			ExcludeZeroStock: q.Get("excludeZeroStock") == "true",
			Coefficient:      coefficient,
			KanaName:         q.Get("kanaName"),
			DosageForm:       q.Get("dosageForm"),
			ShelfNumber:      q.Get("shelfNumber"), // shelfNumber を追加
		}
		// ▲▲▲【修正ここまで】▲▲▲

		results, err := db.GetDeadStockList(conn, filters)
		if err != nil {
			http.Error(w, "Failed to get dead stock list: "+err.Error(), http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(results)
	}
}

func SaveDeadStockHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var payload []model.DeadStockRecord
		if err := json.NewDecoder(r.Body).Decode(&payload); err != nil {
			http.Error(w, "Invalid request body: "+err.Error(), http.StatusBadRequest)
			return
		}

		tx, err := conn.Begin()
		if err != nil {
			http.Error(w, "Failed to start transaction", http.StatusInternalServerError)
			return
		}
		defer tx.Rollback()

		productCodesMap := make(map[string]struct{})
		for _, rec := range payload {
			if rec.ProductCode != "" {
				productCodesMap[rec.ProductCode] = struct{}{}
			}
		}
		var productCodes []string
		for code := range productCodesMap {
			productCodes = append(productCodes, code)
		}

		if len(productCodes) > 0 {
			if err := db.DeleteDeadStockByProductCodesInTx(tx, productCodes); err != nil {
				http.Error(w, "Failed to delete old dead stock records: "+err.Error(), http.StatusInternalServerError)
				return
			}
		}

		if err := db.SaveDeadStockListInTx(tx, payload); err != nil {
			http.Error(w, "Failed to save dead stock records: "+err.Error(), http.StatusInternalServerError)
			return
		}

		if err := tx.Commit(); err != nil {
			http.Error(w, "Failed to commit transaction", http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{"message": "保存しました。"})
	}
}

func ImportDeadStockHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		file, _, err := r.FormFile("file")
		if err != nil {
			http.Error(w, "No file uploaded", http.StatusBadRequest)
			return
		}
		defer file.Close()

		reader := transform.NewReader(file, japanese.ShiftJIS.NewDecoder())
		csvReader := csv.NewReader(reader)
		csvReader.LazyQuotes = true
		rows, err := csvReader.ReadAll()
		if err != nil {
			http.Error(w, "Failed to parse CSV file: "+err.Error(), http.StatusBadRequest)
			return
		}

		var payload []model.DeadStockRecord
		productCodesMap := make(map[string]struct{})

		for i, row := range rows {
			if i == 0 || len(row) < 9 {
				continue
			}

			quantity, _ := strconv.ParseFloat(row[3], 64)
			if quantity <= 0 {
				continue
			}
			janPackInnerQty, _ := strconv.ParseFloat(row[8], 64)
			productCode := strings.Trim(strings.TrimSpace(row[1]), `="`)

			rec := model.DeadStockRecord{
				YjCode:           strings.Trim(strings.TrimSpace(row[0]), `="`),
				ProductCode:      productCode,
				StockQuantityJan: quantity,
				YjUnitName:       strings.TrimSpace(row[4]),
				ExpiryDate:       strings.TrimSpace(row[5]),
				LotNumber:        strings.TrimSpace(row[6]),
				PackageForm:      strings.TrimSpace(row[7]),
				JanPackInnerQty:  janPackInnerQty,
			}
			payload = append(payload, rec)
			if productCode != "" {
				productCodesMap[productCode] = struct{}{}
			}
		}

		if len(payload) == 0 {
			w.Header().Set("Content-Type", "application/json")
			json.NewEncoder(w).Encode(map[string]string{"message": "インポートする有効なデータがありませんでした。"})
			return
		}

		var productCodes []string
		for code := range productCodesMap {
			productCodes = append(productCodes, code)
		}

		tx, err := conn.Begin()
		if err != nil {
			http.Error(w, "Failed to start transaction", http.StatusInternalServerError)
			return
		}
		defer tx.Rollback()

		if len(productCodes) > 0 {
			if err := db.DeleteDeadStockByProductCodesInTx(tx, productCodes); err != nil {
				http.Error(w, "Failed to delete old dead stock records: "+err.Error(), http.StatusInternalServerError)
				return
			}
		}

		if err := db.SaveDeadStockListInTx(tx, payload); err != nil {
			http.Error(w, "Failed to save imported dead stock records: "+err.Error(), http.StatusInternalServerError)
			return
		}

		if err := tx.Commit(); err != nil {
			http.Error(w, "Failed to commit transaction", http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{
			"message": fmt.Sprintf("%d件のロット・期限情報をインポートしました。", len(payload)),
		})
	}
}

// ▼▼▼【ここから追加】▼▼▼
// ExportDeadStockHandler は画面のフィルタ条件に基づいて不動在庫リストをCSV形式でエクスポートします。
func ExportDeadStockHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		q := r.URL.Query()
		cfg, err := config.LoadConfig()
		if err != nil {
			http.Error(w, "設定ファイルの読み込みに失敗しました: "+err.Error(), http.StatusInternalServerError)
			return
		}

		now := time.Now()
		startDate := now.AddDate(0, 0, -cfg.CalculationPeriodDays)

		filters := model.DeadStockFilters{
			StartDate:        startDate.Format("20060102"),
			EndDate:          "99999999",
			ExcludeZeroStock: q.Get("excludeZeroStock") == "true",
			KanaName:         q.Get("kanaName"),
			DosageForm:       q.Get("dosageForm"),
			ShelfNumber:      q.Get("shelfNumber"), // shelfNumber を追加
		}

		results, err := db.GetDeadStockList(conn, filters)
		if err != nil {
			http.Error(w, "Failed to get dead stock list for export: "+err.Error(), http.StatusInternalServerError)
			return
		}

		fileName := fmt.Sprintf("不動在庫リスト_%s.csv", now.Format("20060102"))
		w.Header().Set("Content-Type", "text/csv")
		w.Header().Set("Content-Disposition", `attachment; filename="`+fileName+`"`)
		w.Write([]byte{0xEF, 0xBB, 0xBF}) // UTF-8 BOM

		csvWriter := csv.NewWriter(w)
		defer csvWriter.Flush()

		headers := []string{
			"yj_code", "product_code", "product_name", "stock_quantity",
			"yj_unit_name", "expiry_date", "lot_number", "package_form", "jan_pack_inner_qty",
		}
		if err := csvWriter.Write(headers); err != nil {
			http.Error(w, "Failed to write CSV header", http.StatusInternalServerError)
			return
		}

		for _, group := range results {
			for _, pkg := range group.PackageGroups {
				for _, prod := range pkg.Products {
					// 保存済みのロット・期限情報がある場合は、そのレコードごとに出力
					if len(prod.SavedRecords) > 0 {
						for _, rec := range prod.SavedRecords {
							record := []string{
								prod.YjCode,
								fmt.Sprintf("=%q", prod.ProductCode),
								prod.ProductName,
								strconv.FormatFloat(rec.StockQuantityJan, 'f', -1, 64),
								prod.YjUnitName,
								rec.ExpiryDate,
								rec.LotNumber,
								prod.PackageForm,
								strconv.FormatFloat(prod.JanPackInnerQty, 'f', -1, 64),
							}
							if err := csvWriter.Write(record); err != nil {
								log.Printf("Failed to write dead stock row to CSV (Code: %s): %v", prod.ProductCode, err)
							}
						}
					} else {
						// 保存済みのロット・期限情報がない場合は、製品情報と現在の理論在庫を出力
						record := []string{
							prod.YjCode,
							fmt.Sprintf("=%q", prod.ProductCode),
							prod.ProductName,
							strconv.FormatFloat(prod.CurrentStock, 'f', -1, 64),
							prod.YjUnitName,
							"", // expiry_date
							"", // lot_number
							prod.PackageForm,
							strconv.FormatFloat(prod.JanPackInnerQty, 'f', -1, 64),
						}
						if err := csvWriter.Write(record); err != nil {
							log.Printf("Failed to write dead stock row to CSV (Code: %s): %v", prod.ProductCode, err)
						}
					}
				}
			}
		}
	}
}

// ▲▲▲【追加ここまで】▲▲▲


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\edge\handler.go -----
package edge

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"time"

	"wasabi/config"
	"wasabi/dat"

	"context" // contextパッケージをインポート

	"github.com/chromedp/cdproto/browser"
	"github.com/chromedp/chromedp"
)

func writeJsonError(w http.ResponseWriter, message string, code int) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(code)
	json.NewEncoder(w).Encode(map[string]string{"message": message})
}

func DownloadHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// 1) 設定読み込み
		cfg, err := config.LoadConfig()
		if err != nil {
			writeJsonError(w, "設定ファイルの読み込みに失敗しました: "+err.Error(), http.StatusInternalServerError)
			return
		}
		if cfg.EdeUserID == "" || cfg.EdePassword == "" {
			writeJsonError(w, "IDまたはパスワードが設定されていません。", http.StatusBadRequest)
			return
		}
		// ▼▼▼【ここから修正】▼▼▼
		// Edgeパスのチェックを追加
		if cfg.EdgePath == "" {
			writeJsonError(w, "Edgeの実行パスが設定されていません。設定画面でパスを指定してください。", http.StatusBadRequest)
			return
		}
		// ▲▲▲【修正ここまで】▲▲▲
		// 2) 一時プロファイルディレクトリ作成
		tempDir, err := os.MkdirTemp("", "chromedp-edge-")
		if err != nil {
			writeJsonError(w, "一時プロファイルディレクトリの作成に失敗: "+err.Error(), http.StatusInternalServerError)
			return
		}
		defer os.RemoveAll(tempDir)

		// ▼▼▼【ここから修正】▼▼▼
		// 3) Edge実行ファイルのパス (ハードコードを削除し、設定値を使用)
		edgePath := cfg.EdgePath

		// 4) ExecAllocator を作成 (元のコードのまま)
		allocCtx, allocCancel := chromedp.NewExecAllocator(
			r.Context(),
			append(chromedp.DefaultExecAllocatorOptions[:],
				chromedp.ExecPath(edgePath), // ここで設定値が使われる
				chromedp.Flag("headless", false),
				chromedp.Flag("disable-gpu", true),
				chromedp.Flag("no-sandbox", true),
				chromedp.UserDataDir(tempDir),
			)...,
		)
		defer allocCancel()
		// ▲▲▲【修正ここまで】▲▲▲

		// 5) Context とロギング設定
		ctx, cancel := chromedp.NewContext(allocCtx, chromedp.WithLogf(log.Printf))
		defer cancel()

		// 6) ダウンロードフォルダ準備
		downloadDir, err := filepath.Abs(filepath.Join(".", "download", "DAT"))
		if err != nil {
			writeJsonError(w, "ダウンロードディレクトリの絶対パス取得に失敗: "+err.Error(), http.StatusInternalServerError)
			return
		}
		if err := os.MkdirAll(downloadDir, 0755); err != nil {
			writeJsonError(w, "ダウンロードディレクトリの作成に失敗: "+err.Error(), http.StatusInternalServerError)
			return
		}

		filesBefore, err := os.ReadDir(downloadDir)
		if err != nil {
			writeJsonError(w, "ダウンロードディレクトリの読み取りに失敗: "+err.Error(), http.StatusInternalServerError)
			return
		}
		filesBeforeMap := make(map[string]bool)
		for _, f := range filesBefore {
			filesBeforeMap[f.Name()] = true
		}

		// 7) ログインしてボタンをクリック
		var initialTS string
		err = chromedp.Run(ctx,
			browser.SetDownloadBehavior(browser.SetDownloadBehaviorBehaviorAllow).WithDownloadPath(downloadDir),
			chromedp.Navigate(`https://www.e-mednet.jp/`),
			chromedp.WaitVisible(`input[name="userid"]`),
			chromedp.SendKeys(`input[name="userid"]`, cfg.EdeUserID),
			chromedp.SendKeys(`input[name="userpsw"]`, cfg.EdePassword),
			chromedp.Click(`input[type="submit"][value="ログイン"]`),
			chromedp.WaitVisible(`//a[contains(@href, "busi_id=11")]`),
			chromedp.Click(`//a[contains(@href, "busi_id=11")]`),
			chromedp.WaitVisible(`//a[contains(text(), "納品受信(JAN)")]`),
			chromedp.Click(`//a[contains(text(), "納品受信(JAN)")]`),
			chromedp.WaitReady(`input[name="unreceive_button"]`),
			chromedp.Text(`table.result-list-table tbody tr:first-child td.col-transceiving-date`, &initialTS, chromedp.AtLeast(0)),
			chromedp.Click(`input[name="unreceive_button"]`),
		)
		if err != nil {
			writeJsonError(w, "自動操作に失敗しました: "+err.Error(), http.StatusInternalServerError)
			return
		}

		// 8) 結果待ちのロジック (medrecの方式)
		var newFilePath string
		var downloadSuccess, noDataFound bool
		timeout := time.After(30 * time.Second)
	CheckLoop:
		for {
			select {
			case <-timeout:
				writeJsonError(w, "30秒以内にサイトの反応が確認できませんでした。", http.StatusRequestTimeout)
				return
			case <-time.After(1 * time.Second):
				var newLatestTimestamp, resultText string

				checkCtx, cancelCheck := context.WithTimeout(ctx, 4*time.Second)
				_ = chromedp.Run(checkCtx,
					chromedp.Text(`table.result-list-table tbody tr:first-child td.col-transceiving-date`, &newLatestTimestamp, chromedp.AtLeast(0)),
				)
				cancelCheck()

				if strings.TrimSpace(newLatestTimestamp) != strings.TrimSpace(initialTS) {
					checkCtx, cancelCheck = context.WithTimeout(ctx, 4*time.Second)
					_ = chromedp.Run(checkCtx,
						chromedp.Text(`table.result-list-table tbody tr:first-child td.col-result`, &resultText, chromedp.AtLeast(0)),
					)
					cancelCheck()

					if strings.TrimSpace(resultText) == "正常完了" {
						downloadSuccess = true
						break CheckLoop
					}
					if strings.TrimSpace(resultText) == "受信データなし" {
						noDataFound = true
						break CheckLoop
					}
				}
			}
		}

		// 9) 「受信データなし」の場合のハンドリング
		if noDataFound {
			writeJsonError(w, "未受信の納品データはありませんでした。", http.StatusOK)
			return
		}

		// 10) ファイルダウンロード待機処理
		if downloadSuccess {
			timeoutFile := time.After(10 * time.Second)
		FileLoop:
			for {
				select {
				case <-timeoutFile:
					writeJsonError(w, "サイトの反応はありましたが、10秒以内にファイルが見つかりませんでした。", http.StatusInternalServerError)
					return
				case <-time.After(500 * time.Millisecond):
					filesAfter, _ := os.ReadDir(downloadDir)
					for _, f := range filesAfter {
						if !filesBeforeMap[f.Name()] && !strings.HasSuffix(f.Name(), ".crdownload") {
							newFilePath = filepath.Join(downloadDir, f.Name())
							break FileLoop
						}
					}
				}
			}
		} else {
			writeJsonError(w, "ダウンロードされたファイルの検知に失敗しました。", http.StatusInternalServerError)
			return
		}

		// 11) DAT ファイル処理
		processedRecords, err := dat.ProcessDatFile(conn, newFilePath)
		if err != nil {
			writeJsonError(w, "ダウンロードしたDATファイルの処理に失敗: "+err.Error(), http.StatusInternalServerError)
			return
		}

		// 12) レスポンス
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{
			"message": fmt.Sprintf("%d件の納品データをダウンロードし登録しました。", len(processedRecords)),
		})
	}
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\guidedinventory\handler.go -----
package guidedinventory

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"time"
	"wasabi/db"
	"wasabi/model"
	"wasabi/units"
)

type StockLedgerYJGroupView struct {
	model.StockLedgerYJGroup
	PackageLedgers []StockLedgerPackageGroupView `json:"packageLedgers"`
}
type StockLedgerPackageGroupView struct {
	model.StockLedgerPackageGroup
	Masters []model.ProductMasterView `json:"masters"`
}
type ResponseDataView struct {
	TransactionLedger []StockLedgerYJGroupView  `json:"transactionLedger"`
	YesterdaysStock   *StockLedgerYJGroupView   `json:"yesterdaysStock"`
	PrecompDetails    []model.TransactionRecord `json:"precompDetails"`
	DeadStockDetails  []model.DeadStockRecord   `json:"deadStockDetails"`
}

// ▼▼▼【ここから修正】▼▼▼
// データベースから取得したモデルを、画面表示用のビューモデルに変換する
func convertToView(yjGroups []model.StockLedgerYJGroup) []StockLedgerYJGroupView {
	if yjGroups == nil {
		return nil
	}

	viewGroups := make([]StockLedgerYJGroupView, 0, len(yjGroups))

	for _, group := range yjGroups {
		newYjGroup := StockLedgerYJGroupView{
			StockLedgerYJGroup: group,
			PackageLedgers:     make([]StockLedgerPackageGroupView, 0, len(group.PackageLedgers)),
		}

		for _, pkg := range group.PackageLedgers {
			newPkgGroup := StockLedgerPackageGroupView{
				StockLedgerPackageGroup: pkg,
				Masters:                 make([]model.ProductMasterView, 0, len(pkg.Masters)),
			}

			for _, master := range pkg.Masters {
				// 包装仕様の文字列を生成するために一時的な構造体にデータを詰め替える
				tempJcshms := model.JCShms{
					JC037: master.PackageForm,
					JC039: master.YjUnitName,
					JC044: master.YjPackUnitQty,
					JA006: sql.NullFloat64{Float64: master.JanPackInnerQty, Valid: true},
					JA008: sql.NullFloat64{Float64: master.JanPackUnitQty, Valid: true},
					JA007: sql.NullString{String: fmt.Sprintf("%d", master.JanUnitCode), Valid: true},
				}

				// JAN単位名を解決する
				var janUnitName string
				if master.JanUnitCode == 0 {
					janUnitName = master.YjUnitName
				} else {
					janUnitName = units.ResolveName(fmt.Sprintf("%d", master.JanUnitCode))
				}

				newMasterView := model.ProductMasterView{
					ProductMaster:        *master,
					FormattedPackageSpec: units.FormatPackageSpec(&tempJcshms),
					JanUnitName:          janUnitName,
				}
				newPkgGroup.Masters = append(newPkgGroup.Masters, newMasterView)
			}
			newYjGroup.PackageLedgers = append(newYjGroup.PackageLedgers, newPkgGroup)
		}
		viewGroups = append(viewGroups, newYjGroup)
	}
	return viewGroups
}

// ▲▲▲【修正ここまで】▲▲▲

func GetInventoryDataHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		q := r.URL.Query()
		yjCode := q.Get("yjCode")
		if yjCode == "" {
			http.Error(w, "yjCode is a required parameter", http.StatusBadRequest)
			return
		}
		now := time.Now()
		endDate := now
		startDate := now.AddDate(0, 0, -30)
		yesterdayDate := now.AddDate(0, 0, -1)
		filtersToday := model.AggregationFilters{
			StartDate: startDate.Format("20060102"),
			EndDate:   endDate.Format("20060102"),
			YjCode:    yjCode,
		}
		ledgerToday, err := db.GetStockLedger(conn, filtersToday)
		if err != nil {
			http.Error(w, "Failed to get today's stock ledger: "+err.Error(), http.StatusInternalServerError)
			return
		}
		filtersYesterday := model.AggregationFilters{
			StartDate: startDate.Format("20060102"),
			EndDate:   yesterdayDate.Format("20060102"),
			YjCode:    yjCode,
		}
		ledgerYesterday, err := db.GetStockLedger(conn, filtersYesterday)
		if err != nil {
			http.Error(w, "Failed to get yesterday's stock ledger: "+err.Error(), http.StatusInternalServerError)
			return
		}
		transactionLedgerView := convertToView(ledgerToday)
		var yesterdaysStockView *StockLedgerYJGroupView
		if len(ledgerYesterday) > 0 {
			view := convertToView(ledgerYesterday)
			if len(view) > 0 {
				yesterdaysStockView = &view[0]
			}
		}
		var productCodes []string
		if len(ledgerToday) > 0 {
			for _, pkg := range ledgerToday[0].PackageLedgers {
				for _, master := range pkg.Masters {
					productCodes = append(productCodes, master.ProductCode)
				}
			}
		}
		precompDetails, err := db.GetPreCompoundingDetailsByProductCodes(conn, productCodes)
		if err != nil {
			http.Error(w, "Failed to get pre-compounding details: "+err.Error(), http.StatusInternalServerError)
			return
		}
		tx, err := conn.Begin()
		if err != nil {
			http.Error(w, "Failed to start transaction for dead stock details", http.StatusInternalServerError)
			return
		}
		defer tx.Rollback()
		deadStockDetails, err := db.GetDeadStockByYjCode(tx, yjCode)
		if err != nil {
			log.Printf("WARN: Failed to get dead stock details for inventory adjustment: %v", err)
		}
		response := ResponseDataView{
			TransactionLedger: transactionLedgerView,
			YesterdaysStock:   yesterdaysStockView,
			PrecompDetails:    precompDetails,
			DeadStockDetails:  deadStockDetails,
		}
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(response)
	}
}

type SavePayload struct {
	Date          string                  `json:"date"`
	YjCode        string                  `json:"yjCode"`
	InventoryData map[string]float64      `json:"inventoryData"`
	DeadStockData []model.DeadStockRecord `json:"deadStockData"`
}

func SaveInventoryDataHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var payload SavePayload
		if err := json.NewDecoder(r.Body).Decode(&payload); err != nil {
			http.Error(w, "Invalid request body: "+err.Error(), http.StatusBadRequest)
			return
		}
		tx, err := conn.Begin()
		if err != nil {
			http.Error(w, "Failed to start transaction", http.StatusInternalServerError)
			return
		}
		defer tx.Rollback()
		masters, err := db.GetProductMastersByYjCode(tx, payload.YjCode)
		if err != nil {
			http.Error(w, "Failed to get product masters for yj: "+err.Error(), http.StatusInternalServerError)
			return
		}
		var allPackagings []model.ProductMaster
		for _, m := range masters {
			allPackagings = append(allPackagings, *m)
		}
		if err := db.SaveGuidedInventoryData(tx, payload.Date, payload.YjCode, allPackagings, payload.InventoryData, payload.DeadStockData); err != nil {
			http.Error(w, "Failed to save inventory data: "+err.Error(), http.StatusInternalServerError)
			return
		}
		if err := tx.Commit(); err != nil {
			http.Error(w, "Failed to commit transaction", http.StatusInternalServerError)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{"message": "棚卸データを保存しました。"})
	}
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\inout\handler.go -----
package inout

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strings"
	"time"
	"wasabi/db"
	"wasabi/mappers"
	"wasabi/mastermanager"
	"wasabi/model"
)

// SaveRecordInput defines the minimal structure for a line item from the frontend.
type SaveRecordInput struct {
	ProductCode string  `json:"productCode"`
	ProductName string  `json:"productName"` // Used as a fallback for mastermanager
	JanQuantity float64 `json:"janQuantity"`
	DatQuantity float64 `json:"datQuantity"` // 「個数」フィールド
	ExpiryDate  string  `json:"expiryDate"`
	LotNumber   string  `json:"lotNumber"`
}

// SavePayload defines the structure for the entire JSON payload from the frontend.
type SavePayload struct {
	IsNewClient           bool              `json:"isNewClient"`
	ClientCode            string            `json:"clientCode"`
	ClientName            string            `json:"clientName"`
	TransactionDate       string            `json:"transactionDate"`
	TransactionType       string            `json:"transactionType"`
	Records               []SaveRecordInput `json:"records"`
	OriginalReceiptNumber string            `json:"originalReceiptNumber"`
}

// SaveInOutHandler processes the saving of an in/out transaction.
func SaveInOutHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var payload SavePayload
		if err := json.NewDecoder(r.Body).Decode(&payload); err != nil {
			http.Error(w, "Invalid request body", http.StatusBadRequest)
			return
		}

		tx, err := conn.Begin()
		if err != nil {
			http.Error(w, "Failed to start transaction", http.StatusInternalServerError)
			return
		}
		defer tx.Rollback()

		clientCode := payload.ClientCode
		if payload.IsNewClient {
			exists, err := db.CheckClientExistsByName(tx, payload.ClientName)
			if err != nil {
				http.Error(w, "Failed to check client existence", http.StatusInternalServerError)
				return
			}
			if exists {
				http.Error(w, fmt.Sprintf("Client name '%s' already exists.", payload.ClientName), http.StatusConflict)
				return
			}
			newCode, err := db.NextSequenceInTx(tx, "CL", "CL", 4)
			if err != nil {
				http.Error(w, "Failed to generate new client code", http.StatusInternalServerError)
				return
			}
			if err := db.CreateClientInTx(tx, newCode, payload.ClientName); err != nil {
				http.Error(w, "Failed to create new client", http.StatusInternalServerError)
				return
			}
			clientCode = newCode
		}

		var receiptNumber string
		dateStr := payload.TransactionDate
		if dateStr == "" {
			dateStr = time.Now().Format("20060102")
		}

		if payload.OriginalReceiptNumber != "" {
			receiptNumber = payload.OriginalReceiptNumber

			payloadProductCodes := make(map[string]bool)
			for _, rec := range payload.Records {
				if rec.ProductCode != "" {
					payloadProductCodes[rec.ProductCode] = true
				}
			}

			if len(payloadProductCodes) > 0 {
				var codesToDelete []interface{}
				var placeholders []string
				codesToDelete = append(codesToDelete, receiptNumber)
				for code := range payloadProductCodes {
					codesToDelete = append(codesToDelete, code)
					placeholders = append(placeholders, "?")
				}

				deleteQuery := fmt.Sprintf("DELETE FROM transaction_records WHERE receipt_number = ? AND jan_code NOT IN (%s)", strings.Join(placeholders, ","))
				if _, err := tx.Exec(deleteQuery, codesToDelete...); err != nil {
					http.Error(w, "Failed to delete removed items from slip", http.StatusInternalServerError)
					return
				}
			} else {
				if err := db.DeleteTransactionsByReceiptNumberInTx(tx, receiptNumber); err != nil {
					http.Error(w, "Failed to delete all items from slip", http.StatusInternalServerError)
					return
				}
			}

		} else {
			var lastSeq int
			q := `SELECT CAST(SUBSTR(receipt_number, 11) AS INTEGER) FROM transaction_records 
				  WHERE receipt_number LIKE ? ORDER BY 1 DESC LIMIT 1`
			err = tx.QueryRow(q, "io"+dateStr+"%").Scan(&lastSeq)
			if err != nil && err != sql.ErrNoRows {
				http.Error(w, "Failed to get last receipt number sequence", http.StatusInternalServerError)
				return
			}
			newSeq := lastSeq + 1
			receiptNumber = fmt.Sprintf("io%s%03d", dateStr, newSeq)
		}

		var finalRecords []model.TransactionRecord
		flagMap := map[string]int{"入庫": 11, "出庫": 12}
		flag := flagMap[payload.TransactionType]

		var keyList, janList []string
		keySet, janSet := make(map[string]struct{}), make(map[string]struct{})
		for _, rec := range payload.Records {
			if rec.ProductCode != "" && rec.ProductCode != "0000000000000" {
				if _, seen := janSet[rec.ProductCode]; !seen {
					janSet[rec.ProductCode] = struct{}{}
					janList = append(janList, rec.ProductCode)
				}
			}
			key := rec.ProductCode
			if key == "" || key == "0000000000000" {
				key = fmt.Sprintf("9999999999999%s", rec.ProductName)
			}
			if _, seen := keySet[key]; !seen {
				keySet[key] = struct{}{}
				keyList = append(keyList, key)
			}
		}

		mastersMap, err := db.GetProductMastersByCodesMap(tx, keyList)
		if err != nil {
			http.Error(w, "Failed to pre-fetch product masters", http.StatusInternalServerError)
			return
		}
		jcshmsMap, err := db.GetJcshmsByCodesMap(tx, janList)
		if err != nil {
			http.Error(w, "Failed to pre-fetch JCSHMS data", http.StatusInternalServerError)
			return
		}

		for i, rec := range payload.Records {
			if rec.ProductCode == "" {
				continue
			}
			master, err := mastermanager.FindOrCreate(tx, rec.ProductCode, rec.ProductName, mastersMap, jcshmsMap)
			if err != nil {
				http.Error(w, fmt.Sprintf("Failed to resolve master for %s: %v", rec.ProductName, err), http.StatusInternalServerError)
				return
			}

			yjQuantity := rec.JanQuantity * master.JanPackInnerQty

			// ▼▼▼【ここから修正】▼▼▼
			// 単価にはマスターの薬価（YJ単位）を使用
			unitPrice := master.NhiPrice
			// 金額を「YJ数量 × YJ単位薬価」で計算
			subtotal := yjQuantity * unitPrice
			// ▲▲▲【修正ここまで】▲▲▲

			tr := model.TransactionRecord{
				TransactionDate: dateStr,
				ClientCode:      clientCode,
				ReceiptNumber:   receiptNumber,
				LineNumber:      fmt.Sprintf("%d", i+1),
				Flag:            flag,
				JanCode:         master.ProductCode,
				JanQuantity:     rec.JanQuantity,
				DatQuantity:     rec.DatQuantity,
				YjQuantity:      yjQuantity,
				Subtotal:        subtotal, // 正しく計算された金額を設定
				ExpiryDate:      rec.ExpiryDate,
				LotNumber:       rec.LotNumber,
			}

			if master.Origin == "JCSHMS" {
				tr.ProcessFlagMA = "COMPLETE"
			} else {
				tr.ProcessFlagMA = "PROVISIONAL"
			}

			// マッピング関数を呼ぶ（この中でUnitPriceが設定される）
			mappers.MapProductMasterToTransaction(&tr, master)
			finalRecords = append(finalRecords, tr)
		}

		if len(finalRecords) > 0 {
			if err := db.PersistTransactionRecordsInTx(tx, finalRecords); err != nil {
				log.Printf("Failed to persist records: %v", err)
				http.Error(w, "Failed to save records to database.", http.StatusInternalServerError)
				return
			}
		}

		if err := tx.Commit(); err != nil {
			http.Error(w, "Failed to commit transaction", http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		response := map[string]interface{}{
			"message":       "Saved successfully",
			"receiptNumber": receiptNumber,
		}
		if payload.IsNewClient {
			response["newClient"] = map[string]string{
				"code": clientCode,
				"name": payload.ClientName,
			}
		}
		json.NewEncoder(w).Encode(response)
	}
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\inventory\handler.go -----
package inventory

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"wasabi/db"
	"wasabi/mappers"
	"wasabi/mastermanager"
	"wasabi/model"
	"wasabi/parsers"
)

const insertTransactionQuery = `
INSERT OR REPLACE INTO transaction_records (
    transaction_date, client_code, receipt_number, line_number, flag,
    jan_code, yj_code, product_name, kana_name, usage_classification, package_form, package_spec, maker_name,
    dat_quantity, jan_pack_inner_qty, jan_quantity, jan_pack_unit_qty, jan_unit_name, jan_unit_code,
    yj_quantity, yj_pack_unit_qty, yj_unit_name, unit_price, purchase_price, supplier_wholesale,
    subtotal, tax_amount, tax_rate, expiry_date, lot_number, flag_poison,
    flag_deleterious, flag_narcotic, flag_psychotropic, flag_stimulant,
    flag_stimulant_raw, process_flag_ma
) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`

// UploadInventoryHandler handles the inventory file upload process.
func UploadInventoryHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var originalJournalMode string
		conn.QueryRow("PRAGMA journal_mode").Scan(&originalJournalMode)

		conn.Exec("PRAGMA journal_mode = MEMORY;")
		conn.Exec("PRAGMA synchronous = OFF;")

		defer func() {
			conn.Exec("PRAGMA synchronous = FULL;")
			conn.Exec(fmt.Sprintf("PRAGMA journal_mode = %s;", originalJournalMode))
			log.Println("Database settings restored for Inventory handler.")
		}()

		file, _, err := r.FormFile("file")
		if err != nil {
			http.Error(w, "File upload error", http.StatusBadRequest)
			return
		}
		defer file.Close()

		parsedData, err := parsers.ParseInventoryFile(file)
		if err != nil {
			http.Error(w, fmt.Sprintf("Failed to parse file: %v", err), http.StatusBadRequest)
			return
		}
		date := parsedData.Date
		if date == "" {
			http.Error(w, "Inventory date not found in file's H record", http.StatusBadRequest)
			return
		}

		tx, err := conn.Begin()
		if err != nil {
			http.Error(w, "Failed to start transaction", http.StatusInternalServerError)
			return
		}
		defer tx.Rollback()

		recordsToProcess := parsedData.Records

		janCodesFromFile := make([]string, 0, len(recordsToProcess))
		for _, rec := range recordsToProcess {
			if rec.JanCode != "" {
				janCodesFromFile = append(janCodesFromFile, rec.JanCode)
			}
		}

		if len(janCodesFromFile) > 0 {
			if err := db.DeleteTransactionsByFlagAndDateAndCodes(tx, 0, date, janCodesFromFile); err != nil {
				http.Error(w, "Failed to clear old inventory data for specified products: "+err.Error(), http.StatusInternalServerError)
				return
			}
		}

		if len(recordsToProcess) == 0 {
			if err := tx.Commit(); err != nil {
				http.Error(w, "Failed to commit transaction: "+err.Error(), http.StatusInternalServerError)
				return
			}
			w.Header().Set("Content-Type", "application/json")
			json.NewEncoder(w).Encode(map[string]interface{}{
				"message": "棚卸ファイルにデータがありませんでした。",
				"details": []model.TransactionRecord{},
			})
			return
		}

		for i := range recordsToProcess {
			recordsToProcess[i].YjQuantity = recordsToProcess[i].JanQuantity * recordsToProcess[i].JanPackInnerQty
		}

		var keyList, janList []string
		keySet, janSet := make(map[string]struct{}), make(map[string]struct{})
		for _, rec := range recordsToProcess {
			if rec.JanCode != "" && rec.JanCode != "0000000000000" {
				if _, seen := janSet[rec.JanCode]; !seen {
					janSet[rec.JanCode] = struct{}{}
					janList = append(janList, rec.JanCode)
				}
			}
			key := rec.JanCode
			if key == "" || key == "0000000000000" {
				key = fmt.Sprintf("9999999999999%s", rec.ProductName)
			}
			if _, seen := keySet[key]; !seen {
				keySet[key] = struct{}{}
				keyList = append(keyList, key)
			}
		}

		mastersMap, err := db.GetProductMastersByCodesMap(tx, keyList)
		if err != nil {
			tx.Rollback()
			http.Error(w, "Failed to pre-fetch product masters", http.StatusInternalServerError)
			return
		}
		jcshmsMap, err := db.GetJcshmsByCodesMap(tx, janList)
		if err != nil {
			tx.Rollback()
			http.Error(w, "Failed to pre-fetch JCSHMS data", http.StatusInternalServerError)
			return
		}

		stmt, err := tx.Prepare(insertTransactionQuery)
		if err != nil {
			tx.Rollback()
			http.Error(w, "Failed to prepare statement", http.StatusInternalServerError)
			return
		}
		defer stmt.Close()

		const batchSize = 500
		var finalRecords []model.TransactionRecord
		receiptNumber := fmt.Sprintf("INV%s", date)

		for i, rec := range recordsToProcess {
			tr := model.TransactionRecord{
				Flag: 0, JanCode: rec.JanCode, ProductName: rec.ProductName, YjQuantity: rec.YjQuantity,
				TransactionDate: date, ReceiptNumber: receiptNumber, LineNumber: fmt.Sprintf("%d", i+1),
			}

			master, err := mastermanager.FindOrCreate(tx, rec.JanCode, rec.ProductName, mastersMap, jcshmsMap)
			if err != nil {
				tx.Rollback()
				http.Error(w, fmt.Sprintf("mastermanager failed for jan %s: %v", rec.JanCode, err), http.StatusInternalServerError)
				return
			}

			if master.JanPackInnerQty > 0 {
				tr.JanQuantity = tr.YjQuantity / master.JanPackInnerQty
			}
			mappers.MapProductMasterToTransaction(&tr, master)

			// ▼▼▼【修正】Subtotalを計算する処理を追加 ▼▼▼
			tr.Subtotal = tr.YjQuantity * tr.UnitPrice
			// ▲▲▲【修正ここまで】▲▲▲

			if master.Origin == "JCSHMS" {
				tr.ProcessFlagMA = "COMPLETE"
			} else {
				tr.ProcessFlagMA = "PROVISIONAL"
			}

			_, err = stmt.Exec(
				tr.TransactionDate, tr.ClientCode, tr.ReceiptNumber, tr.LineNumber, tr.Flag,
				tr.JanCode, tr.YjCode, tr.ProductName, tr.KanaName, tr.UsageClassification, tr.PackageForm, tr.PackageSpec, tr.MakerName,
				tr.DatQuantity, tr.JanPackInnerQty, tr.JanQuantity, tr.JanPackUnitQty, tr.JanUnitName, tr.JanUnitCode,
				tr.YjQuantity, tr.YjPackUnitQty, tr.YjUnitName, tr.UnitPrice, tr.PurchasePrice, tr.SupplierWholesale,
				tr.Subtotal, tr.TaxAmount, tr.TaxRate, tr.ExpiryDate, tr.LotNumber, tr.FlagPoison,
				tr.FlagDeleterious, tr.FlagNarcotic, tr.FlagPsychotropic, tr.FlagStimulant,
				tr.FlagStimulantRaw, tr.ProcessFlagMA,
			)
			if err != nil {
				tx.Rollback()
				http.Error(w, fmt.Sprintf("Failed to insert record for JAN %s: %v", tr.JanCode, err), http.StatusInternalServerError)
				return
			}

			finalRecords = append(finalRecords, tr)

			if (i+1)%batchSize == 0 && i < len(recordsToProcess)-1 {
				if err := tx.Commit(); err != nil {
					log.Printf("transaction commit error (batch): %v", err)
					http.Error(w, "internal server error", http.StatusInternalServerError)
					return
				}
				tx, err = conn.Begin()
				if err != nil {
					http.Error(w, "Failed to begin next transaction", http.StatusInternalServerError)
					return
				}
				stmt, err = tx.Prepare(insertTransactionQuery)
				if err != nil {
					tx.Rollback()
					http.Error(w, "Failed to re-prepare statement", http.StatusInternalServerError)
					return
				}
			}
		}

		if err := tx.Commit(); err != nil {
			log.Printf("transaction commit error (final): %v", err)
			http.Error(w, "internal server error", http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]interface{}{
			"message": fmt.Sprintf("%d件の棚卸データをファイルから登録しました。", len(finalRecords)),
			"details": finalRecords,
		})
	}
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\inventory\manual_handler.go -----
package inventory

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"net/http"
	"wasabi/db"
	"wasabi/mappers"
	"wasabi/model"
)

// ListInventoryProductsHandler returns all product masters with their last inventory date.
func ListInventoryProductsHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		products, err := db.GetAllProductMasters(conn)
		if err != nil {
			http.Error(w, "Failed to get product list: "+err.Error(), http.StatusInternalServerError)
			return
		}

		dateMap, err := db.GetLastInventoryDateMap(conn)
		if err != nil {
			http.Error(w, "Failed to get last inventory dates: "+err.Error(), http.StatusInternalServerError)
			return
		}

		var result []model.InventoryProductView
		for _, p := range products {
			result = append(result, model.InventoryProductView{
				ProductMaster:     *p,
				LastInventoryDate: dateMap[p.ProductCode],
			})
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(result)
	}
}

type ManualInventoryRecord struct {
	ProductCode string  `json:"productCode"`
	YjQuantity  float64 `json:"yjQuantity"`
}

type ManualInventoryPayload struct {
	Date    string                  `json:"date"`
	Records []ManualInventoryRecord `json:"records"`
}

// SaveManualInventoryHandler saves the manually entered inventory counts.
func SaveManualInventoryHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var payload ManualInventoryPayload
		if err := json.NewDecoder(r.Body).Decode(&payload); err != nil {
			http.Error(w, "Invalid request body", http.StatusBadRequest)
			return
		}

		if payload.Date == "" {
			http.Error(w, "Date is required", http.StatusBadRequest)
			return
		}

		tx, err := conn.Begin()
		if err != nil {
			http.Error(w, "Failed to start transaction", http.StatusInternalServerError)
			return
		}
		defer tx.Rollback()

		var productCodes []string
		recordsMap := make(map[string]float64)
		for _, rec := range payload.Records {
			productCodes = append(productCodes, rec.ProductCode)
			recordsMap[rec.ProductCode] = rec.YjQuantity
		}

		if len(productCodes) > 0 {
			if err := db.DeleteTransactionsByFlagAndDateAndCodes(tx, 0, payload.Date, productCodes); err != nil {
				http.Error(w, "Failed to clear old inventory data for specified products", http.StatusInternalServerError)
				return
			}
		}

		if len(productCodes) == 0 {
			w.Header().Set("Content-Type", "application/json")
			json.NewEncoder(w).Encode(map[string]string{"message": "保存するデータがありませんでした。"})
			return
		}

		mastersMap, err := db.GetProductMastersByCodesMap(tx, productCodes)
		if err != nil {
			http.Error(w, "Failed to get product masters", http.StatusInternalServerError)
			return
		}

		var finalRecords []model.TransactionRecord
		receiptNumber := fmt.Sprintf("INV%s", payload.Date)

		for i, code := range productCodes {
			master, ok := mastersMap[code]
			if !ok {
				continue
			}

			tr := model.TransactionRecord{
				TransactionDate: payload.Date,
				Flag:            0, // 0 = Inventory
				JanCode:         master.ProductCode,
				YjQuantity:      recordsMap[code],
				ReceiptNumber:   receiptNumber,
				LineNumber:      fmt.Sprintf("%d", i+1),
			}

			if master.Origin == "JCSHMS" {
				tr.ProcessFlagMA = "COMPLETE"
			} else {
				tr.ProcessFlagMA = "PROVISIONAL"
			}

			if master.JanPackInnerQty > 0 {
				tr.JanQuantity = tr.YjQuantity / master.JanPackInnerQty
			}

			mappers.MapProductMasterToTransaction(&tr, master)

			// ▼▼▼【修正】Subtotalを計算する処理を追加 ▼▼▼
			tr.Subtotal = tr.YjQuantity * tr.UnitPrice
			// ▲▲▲【修正ここまで】▲▲▲

			finalRecords = append(finalRecords, tr)
		}

		if err := db.PersistTransactionRecordsInTx(tx, finalRecords); err != nil {
			http.Error(w, "Failed to save inventory records", http.StatusInternalServerError)
			return
		}

		if err := tx.Commit(); err != nil {
			http.Error(w, "Failed to commit transaction", http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{"message": fmt.Sprintf("%d件の棚卸データを保存しました。", len(finalRecords))})
	}
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\inventory\migrate_handler.go -----
package inventory

import (
	"bufio"
	"database/sql"
	"encoding/csv"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strconv"
	"strings"
	"wasabi/db"
	"wasabi/mappers"
	"wasabi/model"
)

// MigrationResultRow は移行処理の各行の結果を格納します
type MigrationResultRow struct {
	OriginalRow   []string                 `json:"originalRow"`
	ParsedRecord  model.UnifiedInputRecord `json:"parsedRecord"`
	MasterCreated string                   `json:"masterCreated"` // "JCSHMS", "PROVISIONAL", "EXISTED"
	ResultRecord  *model.TransactionRecord `json:"resultRecord"`
	Error         string                   `json:"error"`
	IsZeroFill    bool                     `json:"isZeroFill,omitempty"`
}

// MigrateInventoryHandler は在庫移行用のCSVアップロードを処理します
func MigrateInventoryHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		file, _, err := r.FormFile("file")
		if err != nil {
			http.Error(w, "ファイルのアップロードエラー: "+err.Error(), http.StatusBadRequest)
			return
		}
		defer file.Close()

		br := bufio.NewReader(file)
		bom, err := br.Peek(3)
		if err == nil && bom[0] == 0xef && bom[1] == 0xbb && bom[2] == 0xbf {
			br.Discard(3)
		}

		csvReader := csv.NewReader(br)
		csvReader.LazyQuotes = true
		allRows, err := csvReader.ReadAll()
		if err != nil {
			http.Error(w, "CSVファイルの解析に失敗: "+err.Error(), http.StatusBadRequest)
			return
		}

		if len(allRows) < 2 {
			http.Error(w, "CSVにヘッダー行またはデータ行がありません。", http.StatusBadRequest)
			return
		}

		headerMap := make(map[string]int)
		for i, header := range allRows[0] {
			headerMap[header] = i
		}

		dateIdx, okDate := headerMap["inventory_date"]
		codeIdx, okCode := headerMap["product_code"]
		qtyIdx, okQty := headerMap["quantity"]

		if !okDate || !okCode || !okQty {
			http.Error(w, "CSVヘッダーに 'inventory_date', 'product_code', 'quantity' が見つかりません。", http.StatusBadRequest)
			return
		}

		recordsByDate := make(map[string][]model.UnifiedInputRecord)
		originalRowsByDate := make(map[string][][]string)

		for i, row := range allRows {
			if i == 0 {
				continue
			}
			date := row[dateIdx]
			code := strings.Trim(strings.TrimSpace(row[codeIdx]), `="`)
			qty, _ := strconv.ParseFloat(row[qtyIdx], 64)

			if date != "" && code != "" {
				recordsByDate[date] = append(recordsByDate[date], model.UnifiedInputRecord{
					Date:       date,
					JanCode:    code,
					YjQuantity: qty,
				})
				originalRowsByDate[date] = append(originalRowsByDate[date], row)
			}
		}

		var finalResults []MigrationResultRow
		var totalImported int

		for date, recs := range recordsByDate {
			var dateResults []MigrationResultRow
			for i := range recs {
				dateResults = append(dateResults, MigrationResultRow{
					OriginalRow:  originalRowsByDate[date][i],
					ParsedRecord: recs[i],
				})
			}

			tx, err := conn.Begin()
			if err != nil {
				for i := range dateResults {
					dateResults[i].Error = "トランザクション開始エラー: " + err.Error()
				}
				finalResults = append(finalResults, dateResults...)
				continue
			}

			var productCodes []string
			csvProductCodesMap := make(map[string]struct{})
			for _, rec := range recs {
				if _, exists := csvProductCodesMap[rec.JanCode]; !exists {
					productCodes = append(productCodes, rec.JanCode)
					csvProductCodesMap[rec.JanCode] = struct{}{}
				}
			}

			mastersMap, err := db.GetProductMastersByCodesMap(tx, productCodes)
			if err != nil {
				tx.Rollback()
				for i := range dateResults {
					dateResults[i].Error = "既存マスターの検索中にエラーが発生: " + err.Error()
				}
				finalResults = append(finalResults, dateResults...)
				continue
			}

			for i, rec := range recs {
				if _, exists := mastersMap[rec.JanCode]; !exists {
					masterStatus := ""
					jcshms, errJcshms := db.GetJcshmsRecordByJan(tx, rec.JanCode)
					if errJcshms == nil && jcshms != nil {
						newMasterInput := mappers.JcshmsToProductMasterInput(jcshms, rec.JanCode)
						if errUpsert := db.UpsertProductMasterInTx(tx, newMasterInput); errUpsert == nil {
							masterStatus = "JCSHMS"
						}
					} else {
						newYjCode, errSeq := db.NextSequenceInTx(tx, "MA2Y", "MA2Y", 8)
						if errSeq == nil {
							provisionalMaster := model.ProductMasterInput{
								ProductCode: rec.JanCode, YjCode: newYjCode,
								ProductName: fmt.Sprintf("（JCSHMS未登録 JAN: %s）", rec.JanCode), Origin: "PROVISIONAL",
							}
							if errUpsert := db.UpsertProductMasterInTx(tx, provisionalMaster); errUpsert == nil {
								masterStatus = "PROVISIONAL"
							}
						}
					}
					dateResults[i].MasterCreated = masterStatus
				} else {
					dateResults[i].MasterCreated = "EXISTED"
				}
			}

			mastersMap, err = db.GetProductMastersByCodesMap(tx, productCodes)
			if err != nil {
				tx.Rollback()
				for i := range dateResults {
					dateResults[i].Error = "マスターの再検索中にエラーが発生: " + err.Error()
				}
				finalResults = append(finalResults, dateResults...)
				continue
			}

			if err := db.DeleteTransactionsByFlagAndDate(tx, 0, date); err != nil {
				tx.Rollback()
				for i := range dateResults {
					dateResults[i].Error = "古い棚卸データの削除に失敗: " + err.Error()
				}
				finalResults = append(finalResults, dateResults...)
				continue
			}

			for i, rec := range recs {
				master, ok := mastersMap[rec.JanCode]
				if !ok {
					dateResults[i].Error = "マスターデータの解決に失敗しました。"
					continue
				}

				tr := model.TransactionRecord{
					TransactionDate: rec.Date, Flag: 0, JanCode: rec.JanCode, YjQuantity: rec.YjQuantity,
					ReceiptNumber: fmt.Sprintf("MIGRATE-%s", date), LineNumber: strconv.Itoa(i + 1),
				}
				if master.JanPackInnerQty > 0 {
					tr.JanQuantity = tr.YjQuantity / master.JanPackInnerQty
				}
				mappers.MapProductMasterToTransaction(&tr, master)
				tr.ProcessFlagMA = "COMPLETE"

				// ▼▼▼【修正】Subtotalを計算する処理を追加 ▼▼▼
				tr.Subtotal = tr.YjQuantity * tr.UnitPrice
				// ▲▲▲【修正ここまで】▲▲▲

				if err := db.PersistTransactionRecordsInTx(tx, []model.TransactionRecord{tr}); err != nil {
					dateResults[i].Error = "レコード登録に失敗: " + err.Error()
					continue
				}
				dateResults[i].ResultRecord = &tr
				totalImported++
			}

			allMasters, err := db.GetAllProductMasters(tx)
			if err != nil {
				tx.Rollback()
				errorMsg := "ゼロフィル対象の全マスター取得に失敗: " + err.Error()
				for j := range dateResults {
					if dateResults[j].Error == "" {
						dateResults[j].Error = errorMsg
					}
				}
				finalResults = append(finalResults, dateResults...)
				continue
			}

			var zeroFillRecords []model.TransactionRecord
			var zeroFillResults []MigrationResultRow
			receiptNumber := fmt.Sprintf("MIGRATE-%s", date)
			zeroFillCounter := 0

			for _, master := range allMasters {
				if _, existsInCsv := csvProductCodesMap[master.ProductCode]; !existsInCsv {
					zeroFillCounter++
					tr := model.TransactionRecord{
						TransactionDate: date,
						Flag:            0,
						JanCode:         master.ProductCode,
						YjQuantity:      0,
						JanQuantity:     0,
						ReceiptNumber:   receiptNumber,
						LineNumber:      fmt.Sprintf("Z%d", zeroFillCounter),
						ProcessFlagMA:   "COMPLETE",
						UnitPrice:       0, // 金額も0なので単価も0
						Subtotal:        0,
					}
					mappers.MapProductMasterToTransaction(&tr, master)
					tr.UnitPrice = master.NhiPrice // ただし単価は記録しておく
					zeroFillRecords = append(zeroFillRecords, tr)

					zeroFillResults = append(zeroFillResults, MigrationResultRow{
						OriginalRow:   []string{"- (ゼロフィル対象) -"},
						ParsedRecord:  model.UnifiedInputRecord{JanCode: master.ProductCode, YjQuantity: 0},
						MasterCreated: "EXISTED",
						ResultRecord:  &tr,
						IsZeroFill:    true,
					})
				}
			}

			if len(zeroFillRecords) > 0 {
				if err := db.PersistTransactionRecordsInTx(tx, zeroFillRecords); err != nil {
					tx.Rollback()
					errorMsg := "ゼロフィルレコードのDB保存に失敗: " + err.Error()
					for j := range dateResults {
						if dateResults[j].Error == "" {
							dateResults[j].Error = errorMsg
						}
					}
					finalResults = append(finalResults, dateResults...)
					continue
				}
				totalImported += len(zeroFillRecords)
			}

			finalResults = append(finalResults, dateResults...)
			finalResults = append(finalResults, zeroFillResults...)

			if err := tx.Commit(); err != nil {
				log.Printf("Failed to commit transaction for date %s: %v", date, err)
			}
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]interface{}{
			"message": fmt.Sprintf("計%d件の在庫データを処理しました。", totalImported),
			"details": finalResults,
		})
	}
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\loader\handler.go -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\loader\handler.go
package loader

import (
	"database/sql"
	"encoding/csv"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"strconv"
	"strings"
	"wasabi/db"
	"wasabi/model"

	"golang.org/x/text/encoding/japanese"
	"golang.org/x/text/transform"
)

type UpdatedProductView struct {
	ProductCode string `json:"productCode"`
	ProductName string `json:"productName"`
	Status      string `json:"status"` // "UPDATED", "ORPHANED", "NEW"
}

func CreateMasterUpdateHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		log.Println("新しい要件に基づくJCSHMSマスター更新処理を開始します...")

		// === ステップ1: 必要なデータを全てメモリにロード ===
		newJcshmsData, err := loadCSVToMap("SOU/JCSHMS.CSV", false, 0)
		if err != nil {
			http.Error(w, "JCSHMS.CSVの読み込みに失敗しました: "+err.Error(), http.StatusInternalServerError)
			return
		}
		newJancodeData, err := loadCSVToMap("SOU/JANCODE.CSV", true, 1)
		if err != nil {
			http.Error(w, "JANCODE.CSVの読み込みに失敗しました: "+err.Error(), http.StatusInternalServerError)
			return
		}
		existingMasters, err := db.GetAllProductMasters(conn)
		if err != nil {
			http.Error(w, "既存の製品マスターの取得に失敗しました: "+err.Error(), http.StatusInternalServerError)
			return
		}

		tx, err := conn.Begin()
		if err != nil {
			http.Error(w, "トランザクションの開始に失敗しました", http.StatusInternalServerError)
			return
		}
		defer tx.Rollback()

		var updatedProducts, orphanedProducts, newlyAddedProducts []UpdatedProductView

		existingMastersMap := make(map[string]*model.ProductMaster)
		for _, m := range existingMasters {
			existingMastersMap[m.ProductCode] = m
		}

		// --- 既存マスターの更新と孤立化処理 ---
		for _, master := range existingMasters {
			jcshmsRow, matchFound := newJcshmsData[master.ProductCode]
			if matchFound {
				jancodeRow := newJancodeData[master.ProductCode]
				// ProductMasterInputへの変換ロジックを createInputFromCSV に集約
				input := createInputFromCSV(jcshmsRow, jancodeRow)
				if master.Origin == "PROVISIONAL" && input.YjCode == "" {
					input.Origin = "PROVISIONAL"
					input.YjCode = master.YjCode
				}
				// 既存のユーザー設定項目を維持する
				input.PurchasePrice = master.PurchasePrice
				input.SupplierWholesale = master.SupplierWholesale
				input.GroupCode = master.GroupCode
				input.ShelfNumber = master.ShelfNumber
				input.Category = master.Category
				input.UserNotes = master.UserNotes

				if err := db.UpsertProductMasterInTx(tx, input); err != nil {
					http.Error(w, fmt.Sprintf("マスターの上書き更新に失敗 (JAN: %s): %v", master.ProductCode, err), http.StatusInternalServerError)
					return
				}
				updatedProducts = append(updatedProducts, UpdatedProductView{ProductCode: master.ProductCode, ProductName: input.ProductName, Status: "UPDATED"})
			} else if master.Origin == "JCSHMS" {
				// JCSHMS由来のマスターがCSVから消えた場合、PROVISIONAL化する
				newProductName := master.ProductName
				if !strings.HasPrefix(master.ProductName, "◆") {
					newProductName = "◆" + newProductName
				}
				master.Origin = "PROVISIONAL"
				master.ProductName = newProductName
				// 更新用のInputを作成
				input := model.ProductMasterInput{
					ProductCode:         master.ProductCode,
					YjCode:              master.YjCode,
					Gs1Code:             master.Gs1Code,
					ProductName:         master.ProductName,
					KanaName:            master.KanaName,
					MakerName:           master.MakerName,
					Specification:       master.Specification,
					UsageClassification: master.UsageClassification,
					PackageForm:         master.PackageForm,
					YjUnitName:          master.YjUnitName,
					YjPackUnitQty:       master.YjPackUnitQty,
					JanPackInnerQty:     master.JanPackInnerQty,
					JanUnitCode:         master.JanUnitCode,
					JanPackUnitQty:      master.JanPackUnitQty,
					Origin:              master.Origin,
					NhiPrice:            master.NhiPrice,
					PurchasePrice:       master.PurchasePrice,
					FlagPoison:          master.FlagPoison,
					FlagDeleterious:     master.FlagDeleterious,
					FlagNarcotic:        master.FlagNarcotic,
					FlagPsychotropic:    master.FlagPsychotropic,
					FlagStimulant:       master.FlagStimulant,
					FlagStimulantRaw:    master.FlagStimulantRaw,
					IsOrderStopped:      master.IsOrderStopped,
					SupplierWholesale:   master.SupplierWholesale,
					GroupCode:           master.GroupCode,
					ShelfNumber:         master.ShelfNumber,
					Category:            master.Category,
					UserNotes:           master.UserNotes,
				}
				if err := db.UpsertProductMasterInTx(tx, input); err != nil {
					http.Error(w, fmt.Sprintf("マスターのPROVISIONAL化に失敗 (JAN: %s): %v", master.ProductCode, err), http.StatusInternalServerError)
					return
				}
				orphanedProducts = append(orphanedProducts, UpdatedProductView{ProductCode: master.ProductCode, ProductName: newProductName, Status: "ORPHANED"})
			}
		}

		// --- 新規マスターの追加処理 ---
		// ▼▼▼【ご指示により、JCSHMSマスターにしか存在しない新規品目を自動で追加する機能を削除】▼▼▼
		/*
			for productCode, jcshmsRow := range newJcshmsData {
				if _, exists := existingMastersMap[productCode]; !exists {
					jancodeRow := newJancodeData[productCode]
					input := createInputFromCSV(jcshmsRow, jancodeRow)
					if err := db.UpsertProductMasterInTx(tx, input); err != nil {
						http.Error(w, fmt.Sprintf("新規マスターの追加に失敗 (JAN: %s): %v", productCode, err), http.StatusInternalServerError)
						return
					}
					newlyAddedProducts = append(newlyAddedProducts, UpdatedProductView{ProductCode: productCode, ProductName: input.ProductName, Status: "NEW"})
				}
			}
		*/
		// ▲▲▲【削除ここまで】▲▲▲

		if err := tx.Commit(); err != nil {
			http.Error(w, "トランザクションのコミットに失敗しました", http.StatusInternalServerError)
			return
		}

		log.Println("新しい要件に基づくJCSHMSマスター更新処理が正常に完了しました。")
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]interface{}{
			"message":            "指定の要件で製品マスターの更新が完了しました。",
			"updatedProducts":    updatedProducts,
			"orphanedProducts":   orphanedProducts,
			"newlyAddedProducts": newlyAddedProducts,
		})
	}
}

func loadCSVToMap(filepath string, skipHeader bool, keyIndex int) (map[string][]string, error) {
	f, err := os.Open(filepath)
	if err != nil {
		return nil, err
	}
	defer f.Close()

	r := csv.NewReader(transform.NewReader(f, japanese.ShiftJIS.NewDecoder()))
	r.LazyQuotes = true
	r.FieldsPerRecord = -1
	if skipHeader {
		if _, err := r.Read(); err != nil && err != io.EOF {
			return nil, err
		}
	}

	dataMap := make(map[string][]string)
	for {
		row, err := r.Read()
		if err != nil {
			if err == io.EOF {
				break
			}
			return nil, err
		}
		if len(row) > keyIndex {
			dataMap[row[keyIndex]] = row
		}
	}
	return dataMap, nil
}

func createInputFromCSV(jcshmsRow, jancodeRow []string) model.ProductMasterInput {
	var input model.ProductMasterInput
	if len(jcshmsRow) < 67 {
		return input
	}

	yjPackUnitQty, _ := strconv.ParseFloat(jcshmsRow[44], 64)
	packagePrice, _ := strconv.ParseFloat(jcshmsRow[50], 64)

	var unitNhiPrice float64
	if yjPackUnitQty > 0 {
		unitNhiPrice = packagePrice / yjPackUnitQty
	}

	input.ProductCode = jcshmsRow[0]
	input.YjCode = jcshmsRow[9]
	input.ProductName = strings.TrimSpace(jcshmsRow[18])
	input.Specification = strings.TrimSpace(jcshmsRow[20])
	input.Origin = "JCSHMS"
	input.KanaName = jcshmsRow[22]
	input.MakerName = jcshmsRow[30]
	input.UsageClassification = jcshmsRow[13]
	input.PackageForm = jcshmsRow[37]
	input.YjUnitName = jcshmsRow[39]
	input.YjPackUnitQty = yjPackUnitQty
	input.NhiPrice = unitNhiPrice
	input.FlagPoison, _ = strconv.Atoi(jcshmsRow[61])
	input.FlagDeleterious, _ = strconv.Atoi(jcshmsRow[62])
	input.FlagNarcotic, _ = strconv.Atoi(jcshmsRow[63])
	input.FlagPsychotropic, _ = strconv.Atoi(jcshmsRow[64])
	input.FlagStimulant, _ = strconv.Atoi(jcshmsRow[65])
	input.FlagStimulantRaw, _ = strconv.Atoi(jcshmsRow[66])

	if input.YjCode == "" {
		input.UsageClassification = "他"
	}

	if len(jancodeRow) > 6 {
		input.JanPackInnerQty, _ = strconv.ParseFloat(jancodeRow[6], 64)
	}
	if len(jancodeRow) > 7 {
		input.JanUnitCode, _ = strconv.Atoi(jancodeRow[7])
	}
	if len(jancodeRow) > 8 {
		input.JanPackUnitQty, _ = strconv.ParseFloat(jancodeRow[8], 64)
	}
	return input
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\loader\loader.go -----
package loader

import (
	"database/sql"
	"encoding/csv"
	"fmt"
	"io"
	"os"
	"strconv"
	"strings"

	"golang.org/x/text/encoding/japanese"
	"golang.org/x/text/transform"
)

var tableSchemas = map[string]map[int]string{
	"jcshms": {
		44: "real",
		50: "real",
		61: "int", 62: "int", 63: "int", 64: "int", 65: "int", 66: "int",
	},
	"jancode": {
		7: "real",
		9: "real",
	},
}

// InitDatabase creates the schema and loads master data from CSV files.
func InitDatabase(db *sql.DB) error {
	if err := applySchema(db); err != nil {
		return fmt.Errorf("failed to apply schema.sql: %w", err)
	}
	// ▼▼▼ [修正点] 関数呼び出しを loadCSV から LoadCSV に変更 ▼▼▼
	if err := LoadCSV(db, "SOU/JCSHMS.CSV", "jcshms", 125, false); err != nil {
		return fmt.Errorf("failed to load JCSHMS.CSV: %w", err)
	}
	if err := LoadCSV(db, "SOU/JANCODE.CSV", "jancode", 30, true); err != nil {
		return fmt.Errorf("failed to load JANCODE.CSV: %w", err)
	}
	// ▲▲▲ 修正ここまで ▲▲▲
	return nil
}

func applySchema(db *sql.DB) error {
	schema, err := os.ReadFile("schema.sql")
	if err != nil {
		return err
	}
	_, err = db.Exec(string(schema))
	return err
}

func LoadCSV(db *sql.DB, filepath, tablename string, columns int, skipHeader bool) error {
	f, err := os.Open(filepath)
	if err != nil {
		return err
	}
	defer f.Close()

	r := csv.NewReader(transform.NewReader(f, japanese.ShiftJIS.NewDecoder()))
	r.LazyQuotes = true
	r.FieldsPerRecord = -1

	if skipHeader {
		if _, err := r.Read(); err != nil && err != io.EOF {
			return err
		}
	}

	tx, err := db.Begin()
	if err != nil {
		return err
	}
	defer tx.Rollback()

	placeholders := strings.Repeat("?,", columns-1) + "?"
	stmt, err := tx.Prepare(fmt.Sprintf("INSERT OR REPLACE INTO %s VALUES (%s)", tablename, placeholders))
	if err != nil {
		return err
	}
	defer stmt.Close()

	schema := tableSchemas[tablename]

	for {
		row, err := r.Read()
		if err == io.EOF {
			break
		}
		if err != nil || len(row) < columns {
			continue
		}

		args := make([]interface{}, columns)
		for i, val := range row[:columns] {
			if colType, ok := schema[i+1]; ok {
				trimmedVal := strings.TrimSpace(val)
				switch colType {
				case "real":
					num, _ := strconv.ParseFloat(trimmedVal, 64)
					args[i] = num
				case "int":
					num, _ := strconv.ParseInt(trimmedVal, 10, 64)
					args[i] = num
				}
			} else {
				args[i] = val
			}
		}

		if _, err := stmt.Exec(args...); err != nil {
			continue
		}
	}
	return tx.Commit()
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\mappers\jcshms_to_master.go -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\mappers\jcshms_to_master.go
package mappers

import (
	"strconv"
	"strings"
	"wasabi/model"
)

// JcshmsToProductMasterInput はJCSHMSのレコードをProductMasterInputに変換します。
func JcshmsToProductMasterInput(jcshms *model.JCShms, janCode string) model.ProductMasterInput {
	return model.ProductMasterInput{
		ProductCode:         janCode,
		YjCode:              jcshms.JC009,
		Gs1Code:             jcshms.JC122,
		ProductName:         strings.TrimSpace(jcshms.JC018), // JC018: 商品名
		KanaName:            strings.TrimSpace(jcshms.JC022), // JC022: 商品名カナ
		MakerName:           strings.TrimSpace(jcshms.JC030),
		Specification:       strings.TrimSpace(jcshms.JC020), // JC020: 規格容量
		UsageClassification: strings.TrimSpace(jcshms.JC013),
		PackageForm:         strings.TrimSpace(jcshms.JC037),
		YjUnitName:          strings.TrimSpace(jcshms.JC039),
		YjPackUnitQty:       jcshms.JC044,
		JanPackInnerQty:     jcshms.JA006.Float64,
		JanUnitCode:         parseInt(jcshms.JA007.String),
		JanPackUnitQty:      jcshms.JA008.Float64,
		Origin:              "JCSHMS",
		NhiPrice:            jcshms.JC050,
		FlagPoison:          jcshms.JC061,
		FlagDeleterious:     jcshms.JC062,
		FlagNarcotic:        jcshms.JC063,
		FlagPsychotropic:    jcshms.JC064,
		FlagStimulant:       jcshms.JC065,
		FlagStimulantRaw:    jcshms.JC066,
		IsOrderStopped:      0, // デフォルトは発注可
	}
}

func parseInt(s string) int {
	i, _ := strconv.Atoi(strings.TrimSpace(s))
	return i
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\mappers\mappers.go -----
package mappers

import (
	"database/sql"
	"strconv"
	"wasabi/model"
	"wasabi/units"
)

// MapProductMasterToTransaction は、ProductMaster構造体の情報からTransactionRecord構造体へ必要なデータをコピーします。
func MapProductMasterToTransaction(ar *model.TransactionRecord, master *model.ProductMaster) {
	// 取引記録に単価が設定されていない場合、マスターの薬価をデフォルト値として使用します。
	if ar.UnitPrice == 0 {
		ar.UnitPrice = master.NhiPrice
	}

	// product_master から transaction_records へ共通して存在する情報をコピーします。
	ar.JanCode = master.ProductCode
	ar.YjCode = master.YjCode
	// WASABIではproduct_nameに規格が含まれることが期待されるため、tkrのロジックを応用します。
	if master.Specification != "" {
		ar.ProductName = master.ProductName + " " + master.Specification
	} else {
		ar.ProductName = master.ProductName
	}
	ar.KanaName = master.KanaName
	ar.UsageClassification = master.UsageClassification
	ar.PackageForm = master.PackageForm
	ar.MakerName = master.MakerName
	ar.JanPackInnerQty = master.JanPackInnerQty
	ar.JanPackUnitQty = master.JanPackUnitQty
	ar.YjPackUnitQty = master.YjPackUnitQty
	ar.PurchasePrice = master.PurchasePrice
	ar.SupplierWholesale = master.SupplierWholesale
	ar.FlagPoison = master.FlagPoison
	ar.FlagDeleterious = master.FlagDeleterious
	ar.FlagNarcotic = master.FlagNarcotic
	ar.FlagPsychotropic = master.FlagPsychotropic
	ar.FlagStimulant = master.FlagStimulant
	ar.FlagStimulantRaw = master.FlagStimulantRaw

	// 単位名の解決ロジック (tkrのロジックを流用)
	ar.YjUnitName = units.ResolveName(master.YjUnitName)
	ar.JanUnitCode = strconv.Itoa(master.JanUnitCode)
	if master.JanUnitCode == 0 {
		ar.JanUnitName = ar.YjUnitName
	} else {
		ar.JanUnitName = units.ResolveName(ar.JanUnitCode)
	}

	// 包装仕様文字列の生成ロジック (tkrのロジックを流用)
	// この処理のために、一時的にJCShms構造体の形式にデータを当てはめます。
	tempJcshms := model.JCShms{
		JC037: master.PackageForm,
		JC039: master.YjUnitName,
		JC044: master.YjPackUnitQty,
		JA006: sql.NullFloat64{Float64: master.JanPackInnerQty, Valid: true},
		JA008: sql.NullFloat64{Float64: master.JanPackUnitQty, Valid: true},
		JA007: sql.NullString{String: strconv.Itoa(master.JanUnitCode), Valid: true},
	}
	ar.PackageSpec = units.FormatPackageSpec(&tempJcshms)
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\masteredit\handler.go -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\masteredit\handler.go (全体)
package masteredit

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strings"
	"wasabi/db"
	"wasabi/mappers"
	"wasabi/model"
)

// (GetEditableMastersHandler, UpdateMasterHandler, CreateProvisionalMasterHandler, SetOrderStoppedHandler は変更なし)

func GetEditableMastersHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		masters, err := db.GetAllProductMasters(conn)
		if err != nil {
			http.Error(w, "Failed to get editable masters", http.StatusInternalServerError)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(masters)
	}
}
func UpdateMasterHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		if r.Method != http.MethodPost {
			http.Error(w, "Method Not Allowed", http.StatusMethodNotAllowed)
			return
		}
		var input model.ProductMasterInput
		if err := json.NewDecoder(r.Body).Decode(&input); err != nil {
			http.Error(w, "Invalid request body", http.StatusBadRequest)
			return
		}
		if input.ProductCode == "" {
			http.Error(w, "Product Code (JAN) cannot be empty.", http.StatusBadRequest)
			return
		}
		tx, err := conn.Begin()
		if err != nil {
			http.Error(w, "Failed to start transaction", http.StatusInternalServerError)
			return
		}
		defer tx.Rollback()
		if err := db.UpsertProductMasterInTx(tx, input); err != nil {
			http.Error(w, "Failed to upsert product master", http.StatusInternalServerError)
			return
		}
		if err := tx.Commit(); err != nil {
			http.Error(w, "Failed to commit transaction", http.StatusInternalServerError)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{"message": "Saved successfully."})
	}
}

type CreateProvisionalMasterRequest struct {
	Gs1Code     string `json:"gs1Code"`
	ProductCode string `json:"productCode"` // 13-digit JAN
}

func CreateProvisionalMasterHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var req CreateProvisionalMasterRequest
		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
			http.Error(w, "Invalid request body", http.StatusBadRequest)
			return
		}
		if req.Gs1Code == "" || req.ProductCode == "" {
			http.Error(w, "gs1Code and productCode are required", http.StatusBadRequest)
			return
		}
		tx, err := conn.Begin()
		if err != nil {
			http.Error(w, "Failed to start transaction", http.StatusInternalServerError)
			return
		}
		defer tx.Rollback()
		var jcshmsRecord *model.JCShms
		var foundJanCode string
		jcshmsRecord, foundJanCode, err = db.GetJcshmsRecordByGS1(tx, req.Gs1Code)
		if err != nil && err != sql.ErrNoRows {
			http.Error(w, "Failed to search JCSHMS master by GS1: "+err.Error(), http.StatusInternalServerError)
			return
		}
		if jcshmsRecord == nil {
			jcshmsRecord, err = db.GetJcshmsRecordByJan(tx, req.ProductCode)
			if err != nil && err != sql.ErrNoRows {
				http.Error(w, "Failed to search JCSHMS master by JAN: "+err.Error(), http.StatusInternalServerError)
				return
			}
			if jcshmsRecord != nil {
				foundJanCode = req.ProductCode
			}
		}
		var yjCodeToReturn string
		if jcshmsRecord != nil {
			input := mappers.JcshmsToProductMasterInput(jcshmsRecord, foundJanCode)
			input.Gs1Code = req.Gs1Code
			if err := db.UpsertProductMasterInTx(tx, input); err != nil {
				http.Error(w, "Failed to create master from JCSHMS: "+err.Error(), http.StatusInternalServerError)
				return
			}
			yjCodeToReturn = input.YjCode
		} else {
			newYjCode, err := db.NextSequenceInTx(tx, "MA2Y", "MA2Y", 8)
			if err != nil {
				http.Error(w, "Failed to generate new YJ code", http.StatusInternalServerError)
				return
			}
			provisionalInput := model.ProductMasterInput{
				ProductCode: req.ProductCode,
				Gs1Code:     req.Gs1Code,
				YjCode:      newYjCode,
				ProductName: fmt.Sprintf("(JCSHMS未登録 %s)", req.Gs1Code),
				Origin:      "PROVISIONAL",
			}
			if err := db.UpsertProductMasterInTx(tx, provisionalInput); err != nil {
				http.Error(w, "Failed to create provisional master", http.StatusInternalServerError)
				return
			}
			yjCodeToReturn = newYjCode
		}
		if err := tx.Commit(); err != nil {
			http.Error(w, "Failed to commit transaction", http.StatusInternalServerError)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{"yjCode": yjCodeToReturn})
	}
}

type SetOrderStoppedRequest struct {
	ProductCode string `json:"productCode"`
	Status      int    `json:"status"` // 0: 発注可, 1: 発注不可
}

func SetOrderStoppedHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var req SetOrderStoppedRequest
		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
			http.Error(w, "Invalid request body", http.StatusBadRequest)
			return
		}
		if req.ProductCode == "" {
			http.Error(w, "productCode is required", http.StatusBadRequest)
			return
		}
		tx, err := conn.Begin()
		if err != nil {
			http.Error(w, "Failed to start transaction", http.StatusInternalServerError)
			return
		}
		defer tx.Rollback()
		master, err := db.GetProductMasterByCode(tx, req.ProductCode)
		if err != nil {
			http.Error(w, "Failed to get product master: "+err.Error(), http.StatusInternalServerError)
			return
		}
		if master == nil {
			http.Error(w, "Product not found", http.StatusNotFound)
			return
		}
		master.IsOrderStopped = req.Status
		input := model.ProductMasterInput{
			ProductCode:         master.ProductCode,
			YjCode:              master.YjCode,
			Gs1Code:             master.Gs1Code,
			ProductName:         master.ProductName,
			Specification:       master.Specification,
			KanaName:            master.KanaName,
			MakerName:           master.MakerName,
			UsageClassification: master.UsageClassification,
			PackageForm:         master.PackageForm,
			YjUnitName:          master.YjUnitName,
			YjPackUnitQty:       master.YjPackUnitQty,
			JanPackInnerQty:     master.JanPackInnerQty,
			JanUnitCode:         master.JanUnitCode,
			JanPackUnitQty:      master.JanPackUnitQty,
			Origin:              master.Origin,
			NhiPrice:            master.NhiPrice,
			PurchasePrice:       master.PurchasePrice,
			FlagPoison:          master.FlagPoison,
			FlagDeleterious:     master.FlagDeleterious,
			FlagNarcotic:        master.FlagNarcotic,
			FlagPsychotropic:    master.FlagPsychotropic,
			FlagStimulant:       master.FlagStimulant,
			FlagStimulantRaw:    master.FlagStimulantRaw,
			IsOrderStopped:      master.IsOrderStopped,
			SupplierWholesale:   master.SupplierWholesale,
			GroupCode:           master.GroupCode,
			ShelfNumber:         master.ShelfNumber,
			Category:            master.Category,
			UserNotes:           master.UserNotes,
		}
		if err := db.UpsertProductMasterInTx(tx, input); err != nil {
			http.Error(w, "Failed to update product master", http.StatusInternalServerError)
			return
		}
		if err := tx.Commit(); err != nil {
			http.Error(w, "Failed to commit transaction", http.StatusInternalServerError)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{"message": "更新しました。"})
	}
}

// ▼▼▼【ここから追加】▼▼▼
// BulkUpdateShelfNumbersRequest は棚番一括更新APIのリクエストボディの構造体です。
type BulkUpdateShelfNumbersRequest struct {
	ShelfNumber string   `json:"shelfNumber"`
	Gs1Codes    []string `json:"gs1Codes"`
}

// BulkUpdateShelfNumbersHandler は、複数のGS1コードに紐づく品目の棚番を一括で更新します。
func BulkUpdateShelfNumbersHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var req BulkUpdateShelfNumbersRequest
		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
			http.Error(w, "Invalid request body: "+err.Error(), http.StatusBadRequest)
			return
		}

		if req.ShelfNumber == "" || len(req.Gs1Codes) == 0 {
			http.Error(w, "shelfNumber and gs1Codes are required", http.StatusBadRequest)
			return
		}

		tx, err := conn.Begin()
		if err != nil {
			http.Error(w, "Failed to start transaction: "+err.Error(), http.StatusInternalServerError)
			return
		}
		defer tx.Rollback()

		stmt, err := tx.Prepare("UPDATE product_master SET shelf_number = ? WHERE gs1_code = ?")
		if err != nil {
			http.Error(w, "Failed to prepare update statement: "+err.Error(), http.StatusInternalServerError)
			return
		}
		defer stmt.Close()

		var updatedCount int
		var notFoundCodes []string

		for _, gs1Code := range req.Gs1Codes {
			// (01)が付いている場合や前後に空白がある場合を考慮
			cleanGs1 := strings.TrimSpace(strings.TrimPrefix(gs1Code, "(01)"))

			res, err := stmt.Exec(req.ShelfNumber, cleanGs1)
			if err != nil {
				// 個々のエラーはログに出力するが、処理は続行する
				log.Printf("Failed to update shelf number for gs1_code %s: %v", cleanGs1, err)
				continue
			}

			rowsAffected, err := res.RowsAffected()
			if err != nil {
				log.Printf("Failed to get affected rows for gs1_code %s: %v", cleanGs1, err)
				continue
			}

			if rowsAffected > 0 {
				updatedCount++
			} else {
				notFoundCodes = append(notFoundCodes, gs1Code)
			}
		}

		if err := tx.Commit(); err != nil {
			http.Error(w, "Failed to commit transaction: "+err.Error(), http.StatusInternalServerError)
			return
		}

		message := fmt.Sprintf("%d件の棚番を更新しました。", updatedCount)
		if len(notFoundCodes) > 0 {
			message += fmt.Sprintf(" %d件は見つかりませんでした: %s", len(notFoundCodes), strings.Join(notFoundCodes, ", "))
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{"message": message})
	}
}

// ▲▲▲【追加ここまで】▲▲▲


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\mastermanager\mastermanager.go -----
package mastermanager

import (
	"database/sql"
	"fmt"
	"strconv"
	"strings"
	"wasabi/db"
	"wasabi/model"
)

// FindOrCreate は、マスターの特定と作成に関する全てのロジックを集約した関数です。
func FindOrCreate(
	tx *sql.Tx,
	janCode string,
	productName string,
	mastersMap map[string]*model.ProductMaster,
	jcshmsMap map[string]*model.JCShms,
) (*model.ProductMaster, error) {

	key := janCode
	isSyntheticKey := false
	if key == "" || key == "0000000000000" {
		key = fmt.Sprintf("9999999999999%s", productName)
		isSyntheticKey = true
	}

	// 1. まずメモリ上のキャッシュ（マップ）を確認
	if master, ok := mastersMap[key]; ok {
		return master, nil
	}

	// 2. 次にデータベースを検索 (tkrのロジック)
	existingMaster, err := db.GetProductMasterByCode(tx, key)
	if err != nil {
		return nil, fmt.Errorf("failed to check for existing master %s: %w", key, err)
	}
	// もしDBに存在すれば、それを使用する
	if existingMaster != nil {
		mastersMap[key] = existingMaster // メモリマップにも追加して次回以降の検索を高速化
		return existingMaster, nil
	}

	// 3. JCSHMSマスターから作成を試みる
	if !isSyntheticKey {
		if jcshms, ok := jcshmsMap[janCode]; ok && jcshms.JC018 != "" {
			// ヘルパー関数を呼び出して、新しいDB構造に基づいたデータを作成
			input := createMasterInputFromJcshms(janCode, jcshms)

			if err := db.UpsertProductMasterInTx(tx, input); err != nil {
				return nil, fmt.Errorf("failed to create master from jcshms: %w", err)
			}
			newMaster := createMasterModelFromInput(input)
			mastersMap[key] = &newMaster
			return &newMaster, nil
		}
	}

	// 4. メモリにもDBにもJCSHMSにも存在しない場合、新しい仮マスターを作成
	newYj, err := db.NextSequenceInTx(tx, "MA2Y", "MA2Y", 8)
	if err != nil {
		return nil, fmt.Errorf("failed to get next sequence for provisional master: %w", err)
	}

	provisionalInput := model.ProductMasterInput{
		ProductCode: key,
		YjCode:      newYj,
		ProductName: productName, // DATファイルから読み取った名前を基本製品名として設定
		Origin:      "PROVISIONAL",
	}

	if err := db.UpsertProductMasterInTx(tx, provisionalInput); err != nil {
		return nil, fmt.Errorf("failed to create provisional master: %w", err)
	}

	newMaster := createMasterModelFromInput(provisionalInput)
	mastersMap[key] = &newMaster
	return &newMaster, nil
}

// createMasterInputFromJcshms はJCSHMSのデータからDB登録用のProductMasterInputを作成します。
func createMasterInputFromJcshms(jan string, jcshms *model.JCShms) model.ProductMasterInput {
	var nhiPrice float64
	if jcshms.JC044 > 0 {
		nhiPrice = jcshms.JC050 / jcshms.JC044
	}
	janUnitCodeVal, _ := strconv.Atoi(jcshms.JA007.String)

	input := model.ProductMasterInput{
		ProductCode:         jan,
		YjCode:              jcshms.JC009,
		ProductName:         strings.TrimSpace(jcshms.JC018), // 基本製品名 (JC018)
		Specification:       strings.TrimSpace(jcshms.JC020), // 規格 (JC020)
		Gs1Code:             jcshms.JC122,                    // GS1コード (JC122)
		Origin:              "JCSHMS",
		KanaName:            jcshms.JC022,
		MakerName:           jcshms.JC030,
		UsageClassification: jcshms.JC013,
		PackageForm:         jcshms.JC037,
		YjUnitName:          jcshms.JC039,
		YjPackUnitQty:       jcshms.JC044,
		NhiPrice:            nhiPrice,
		FlagPoison:          jcshms.JC061,
		FlagDeleterious:     jcshms.JC062,
		FlagNarcotic:        jcshms.JC063,
		FlagPsychotropic:    jcshms.JC064,
		FlagStimulant:       jcshms.JC065,
		FlagStimulantRaw:    jcshms.JC066,
		JanPackInnerQty:     jcshms.JA006.Float64,
		JanUnitCode:         janUnitCodeVal,
		JanPackUnitQty:      jcshms.JA008.Float64,
	}
	return input
}

// createMasterModelFromInput はDB登録用のInputからメモリマップ格納用のProductMasterを作成します。
func createMasterModelFromInput(input model.ProductMasterInput) model.ProductMaster {
	return model.ProductMaster{
		ProductCode:         input.ProductCode,
		YjCode:              input.YjCode,
		Gs1Code:             input.Gs1Code,
		ProductName:         input.ProductName,
		KanaName:            input.KanaName,
		MakerName:           input.MakerName,
		Specification:       input.Specification,
		UsageClassification: input.UsageClassification,
		PackageForm:         input.PackageForm,
		YjUnitName:          input.YjUnitName,
		YjPackUnitQty:       input.YjPackUnitQty,
		JanPackInnerQty:     input.JanPackInnerQty,
		JanUnitCode:         input.JanUnitCode,
		JanPackUnitQty:      input.JanPackUnitQty,
		Origin:              input.Origin,
		NhiPrice:            input.NhiPrice,
		PurchasePrice:       input.PurchasePrice,
		FlagPoison:          input.FlagPoison,
		FlagDeleterious:     input.FlagDeleterious,
		FlagNarcotic:        input.FlagNarcotic,
		FlagPsychotropic:    input.FlagPsychotropic,
		FlagStimulant:       input.FlagStimulant,
		FlagStimulantRaw:    input.FlagStimulantRaw,
		IsOrderStopped:      input.IsOrderStopped,
		SupplierWholesale:   input.SupplierWholesale,
		GroupCode:           input.GroupCode,
		ShelfNumber:         input.ShelfNumber,
		Category:            input.Category,
		UserNotes:           input.UserNotes,
	}
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\medrec\handler.go -----
package medrec

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"time"
	"wasabi/config"
	"wasabi/dat"

	"github.com/chromedp/cdproto/browser"
	"github.com/chromedp/chromedp"
)

func writeJsonError(w http.ResponseWriter, message string, code int) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(code)
	json.NewEncoder(w).Encode(map[string]string{"message": message})
}

func findChromePath() string {
	paths := []string{
		filepath.Join(os.Getenv("ProgramFiles"), "Google", "Chrome", "Application", "chrome.exe"),
		filepath.Join(os.Getenv("ProgramFiles(x86)"), "Google", "Chrome", "Application", "chrome.exe"),
	}
	for _, path := range paths {
		if _, err := os.Stat(path); err == nil {
			return path
		}
	}
	return ""
}

func DownloadHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		cfg, err := config.LoadConfig()
		if err != nil {
			writeJsonError(w, "設定ファイルの読み込みに失敗しました: "+err.Error(), http.StatusInternalServerError)
			return
		}

		if cfg.EmednetUserID == "" || cfg.EmednetPassword == "" {
			writeJsonError(w, "IDまたはパスワードが設定されていません。", http.StatusBadRequest)
			return
		}

		tempDir, err := os.MkdirTemp("", "chromedp-medrec-")
		if err != nil {
			writeJsonError(w, "一時プロファイルディレクトリの作成に失敗: "+err.Error(), http.StatusInternalServerError)
			return
		}
		defer os.RemoveAll(tempDir)

		opts := append(chromedp.DefaultExecAllocatorOptions[:],
			chromedp.Flag("headless", false),
			chromedp.Flag("disable-gpu", true),
			chromedp.UserDataDir(tempDir),
		)

		if execPath := findChromePath(); execPath != "" {
			opts = append(opts, chromedp.ExecPath(execPath))
		}

		allocCtx, cancel := chromedp.NewExecAllocator(context.Background(), opts...)
		defer cancel()

		ctx, cancel := chromedp.NewContext(allocCtx, chromedp.WithLogf(log.Printf))
		defer cancel()

		downloadDir, err := filepath.Abs(filepath.Join(".", "download", "DAT"))
		if err != nil {
			writeJsonError(w, "ダウンロードディレクトリの絶対パス取得に失敗: "+err.Error(), http.StatusInternalServerError)
			return
		}
		if err := os.MkdirAll(downloadDir, 0755); err != nil {
			writeJsonError(w, "ダウンロードディレクトリの作成に失敗: "+err.Error(), http.StatusInternalServerError)
			return
		}

		filesBefore, err := os.ReadDir(downloadDir)
		if err != nil {
			writeJsonError(w, "ダウンロードディレクトリの読み取りに失敗: "+err.Error(), http.StatusInternalServerError)
			return
		}
		filesBeforeMap := make(map[string]bool)
		for _, f := range filesBefore {
			filesBeforeMap[f.Name()] = true
		}

		var initialLatestTimestamp string
		err = chromedp.Run(ctx,
			// ▼▼▼【ここを修正】 page. -> browser. に変更 ▼▼▼
			browser.SetDownloadBehavior(browser.SetDownloadBehaviorBehaviorAllow).WithDownloadPath(downloadDir),
			// ▲▲▲【修正ここまで】▲▲▲
			chromedp.Navigate(`https://www.e-mednet.jp/`),
			chromedp.WaitVisible(`input[name="userid"]`),
			chromedp.SendKeys(`input[name="userid"]`, cfg.EmednetUserID),
			chromedp.SendKeys(`input[name="userpsw"]`, cfg.EmednetPassword),
			chromedp.Click(`input[type="submit"][value="ログイン"]`),
			chromedp.WaitVisible(`//a[contains(@href, "busi_id=11")]`),
			chromedp.Click(`//a[contains(@href, "busi_id=11")]`),
			chromedp.WaitVisible(`//a[contains(text(), "納品受信(JAN)")]`),
			chromedp.Click(`//a[contains(text(), "納品受信(JAN)")]`),
			chromedp.WaitReady(`input[name="unreceive_button"]`),
			chromedp.Text(`table.result-list-table tbody tr:first-child td.col-transceiving-date`, &initialLatestTimestamp, chromedp.AtLeast(0)),
			chromedp.Click(`input[name="unreceive_button"]`),
		)
		if err != nil {
			writeJsonError(w, "自動操作に失敗しました: "+err.Error(), http.StatusInternalServerError)
			return
		}

		var newFilePath string
		var downloadSuccess, noDataFound bool
		timeout := time.After(30 * time.Second)
	CheckLoop:
		for {
			select {
			case <-timeout:
				writeJsonError(w, "30秒以内にサイトの反応が確認できませんでした。", http.StatusRequestTimeout)
				return
			case <-time.After(1 * time.Second):
				var newLatestTimestamp, resultText string

				checkCtx, cancelCheck := context.WithTimeout(ctx, 4*time.Second)
				_ = chromedp.Run(checkCtx,
					chromedp.Text(`table.result-list-table tbody tr:first-child td.col-transceiving-date`, &newLatestTimestamp, chromedp.AtLeast(0)),
				)
				cancelCheck()

				if strings.TrimSpace(newLatestTimestamp) != strings.TrimSpace(initialLatestTimestamp) {
					checkCtx, cancelCheck = context.WithTimeout(ctx, 4*time.Second)
					_ = chromedp.Run(checkCtx,
						chromedp.Text(`table.result-list-table tbody tr:first-child td.col-result`, &resultText, chromedp.AtLeast(0)),
					)
					cancelCheck()

					if strings.TrimSpace(resultText) == "正常完了" {
						downloadSuccess = true
						break CheckLoop
					}
					if strings.TrimSpace(resultText) == "受信データなし" {
						noDataFound = true
						break CheckLoop
					}
				}
			}
		}

		if noDataFound {
			writeJsonError(w, "未受信の納品データはありませんでした。", http.StatusOK)
			return
		}

		if downloadSuccess {
			timeoutFile := time.After(10 * time.Second)
		FileLoop:
			for {
				select {
				case <-timeoutFile:
					writeJsonError(w, "サイトの反応はありましたが、10秒以内にファイルが見つかりませんでした。", http.StatusInternalServerError)
					return
				case <-time.After(500 * time.Millisecond):
					filesAfter, _ := os.ReadDir(downloadDir)
					for _, f := range filesAfter {
						if !filesBeforeMap[f.Name()] && !strings.HasSuffix(f.Name(), ".crdownload") {
							newFilePath = filepath.Join(downloadDir, f.Name())
							break FileLoop
						}
					}
				}
			}
		} else {
			writeJsonError(w, "ダウンロードされたファイルの検知に失敗しました。", http.StatusInternalServerError)
			return
		}

		processedRecords, err := dat.ProcessDatFile(conn, newFilePath)
		if err != nil {
			writeJsonError(w, "ダウンロードしたDATファイルの処理に失敗: "+err.Error(), http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{
			"message": fmt.Sprintf("%d件の納品データをダウンロードし登録しました。", len(processedRecords)),
		})
	}
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\model\types.go -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\model\types.go
package model

import "database/sql"

// ProductMaster は製品マスターの完全なデータ構造です。(tkrから移植)
type ProductMaster struct {
	ProductCode         string  `json:"productCode"`
	YjCode              string  `json:"yjCode"`
	ProductName         string  `json:"productName"`
	KanaName            string  `json:"kanaName"`
	MakerName           string  `json:"makerName"`
	Gs1Code             string  `json:"gs1Code"`
	PackageForm         string  `json:"packageForm"`
	Specification       string  `json:"specification"`
	UsageClassification string  `json:"usageClassification"`
	YjUnitName          string  `json:"yjUnitName"`
	YjPackUnitQty       float64 `json:"yjPackUnitQty"`
	JanPackInnerQty     float64 `json:"janPackInnerQty"`
	JanUnitCode         int     `json:"janUnitCode"`
	JanPackUnitQty      float64 `json:"janPackUnitQty"`
	Origin              string  `json:"origin"`
	NhiPrice            float64 `json:"nhiPrice"`
	PurchasePrice       float64 `json:"purchasePrice"`
	FlagPoison          int     `json:"flagPoison"`
	FlagDeleterious     int     `json:"flagDeleterious"`
	FlagNarcotic        int     `json:"flagNarcotic"`
	FlagPsychotropic    int     `json:"flagPsychotropic"`
	FlagStimulant       int     `json:"flagStimulant"`
	FlagStimulantRaw    int     `json:"flagStimulantRaw"`
	IsOrderStopped      int     `json:"isOrderStopped"`
	SupplierWholesale   string  `json:"supplierWholesale"`
	GroupCode           string  `json:"groupCode"`
	ShelfNumber         string  `json:"shelfNumber"`
	Category            string  `json:"category"`
	UserNotes           string  `json:"userNotes"`
}

// ProductMasterInput は製品マスターを登録・更新する際の入力データ構造です。(tkrから移植)
type ProductMasterInput struct {
	ProductCode         string  `json:"productCode"`
	YjCode              string  `json:"yjCode"`
	ProductName         string  `json:"productName"`
	KanaName            string  `json:"kanaName"`
	MakerName           string  `json:"makerName"`
	Gs1Code             string  `json:"gs1Code"`
	PackageForm         string  `json:"packageForm"`
	Specification       string  `json:"specification"`
	UsageClassification string  `json:"usageClassification"`
	YjUnitName          string  `json:"yjUnitName"`
	YjPackUnitQty       float64 `json:"yjPackUnitQty"`
	JanPackInnerQty     float64 `json:"janPackInnerQty"`
	JanUnitCode         int     `json:"janUnitCode"`
	JanPackUnitQty      float64 `json:"janPackUnitQty"`
	Origin              string  `json:"origin"`
	NhiPrice            float64 `json:"nhiPrice"`
	PurchasePrice       float64 `json:"purchasePrice"`
	FlagPoison          int     `json:"flagPoison"`
	FlagDeleterious     int     `json:"flagDeleterious"`
	FlagNarcotic        int     `json:"flagNarcotic"`
	FlagPsychotropic    int     `json:"flagPsychotropic"`
	FlagStimulant       int     `json:"flagStimulant"`
	FlagStimulantRaw    int     `json:"flagStimulantRaw"`
	IsOrderStopped      int     `json:"isOrderStopped"`
	SupplierWholesale   string  `json:"supplierWholesale"`
	GroupCode           string  `json:"groupCode"`
	ShelfNumber         string  `json:"shelfNumber"`
	Category            string  `json:"category"`
	UserNotes           string  `json:"userNotes"`
}

// (以下はWASABIに元々あった型定義)
type JCShms struct {
	JC009 string
	JC013 string
	JC018 string
	JC020 string
	JC022 string
	JC030 string
	JC037 string
	JC039 string
	JC044 float64
	JC050 float64
	JC061 int
	JC062 int
	JC063 int
	JC064 int
	JC065 int
	JC066 int
	JC122 string
	JA006 sql.NullFloat64
	JA007 sql.NullString
	JA008 sql.NullFloat64
}

type ValuationPackageDetail struct {
	ProductCode   string  `json:"productCode"`
	PackageSpec   string  `json:"packageSpec"`
	Stock         float64 `json:"stock"`
	NhiPrice      float64 `json:"nhiPrice"`
	PurchasePrice float64 `json:"purchasePrice"`
}

type TransactionRecord struct {
	ID                  int     `json:"id"`
	TransactionDate     string  `json:"transactionDate"`
	ClientCode          string  `json:"clientCode"`
	ReceiptNumber       string  `json:"receiptNumber"`
	LineNumber          string  `json:"lineNumber"`
	Flag                int     `json:"flag"`
	JanCode             string  `json:"janCode"`
	YjCode              string  `json:"yjCode"`
	ProductName         string  `json:"productName"`
	KanaName            string  `json:"kanaName"`
	UsageClassification string  `json:"usageClassification"`
	PackageForm         string  `json:"packageForm"`
	PackageSpec         string  `json:"packageSpec"`
	MakerName           string  `json:"makerName"`
	DatQuantity         float64 `json:"datQuantity"`
	JanPackInnerQty     float64 `json:"janPackInnerQty"`
	JanQuantity         float64 `json:"janQuantity"`
	JanPackUnitQty      float64 `json:"janPackUnitQty"`
	JanUnitName         string  `json:"janUnitName"`
	JanUnitCode         string  `json:"janUnitCode"`
	YjQuantity          float64 `json:"yjQuantity"`
	YjPackUnitQty       float64 `json:"yjPackUnitQty"`
	YjUnitName          string  `json:"yjUnitName"`
	UnitPrice           float64 `json:"unitPrice"`
	PurchasePrice       float64 `json:"purchasePrice"`
	SupplierWholesale   string  `json:"supplierWholesale"`
	Subtotal            float64 `json:"subtotal"`
	TaxAmount           float64 `json:"taxAmount"`
	TaxRate             float64 `json:"taxRate"`
	ExpiryDate          string  `json:"expiryDate"`
	LotNumber           string  `json:"lotNumber"`
	FlagPoison          int     `json:"flagPoison"`
	FlagDeleterious     int     `json:"flagDeleterious"`
	FlagNarcotic        int     `json:"flagNarcotic"`
	FlagPsychotropic    int     `json:"flagPsychotropic"`
	FlagStimulant       int     `json:"flagStimulant"`
	FlagStimulantRaw    int     `json:"flagStimulantRaw"`
	ProcessFlagMA       string  `json:"processFlagMA"`
}

func (t *TransactionRecord) SignedYjQty() float64 {
	switch t.Flag {
	case 1, 4, 11:
		return t.YjQuantity
	case 2, 3, 5, 12:
		return -t.YjQuantity
	default:
		return 0
	}
}

func (t *TransactionRecord) ToProductMaster() *ProductMaster {
	return &ProductMaster{
		ProductCode:         t.JanCode,
		YjCode:              t.YjCode,
		ProductName:         t.ProductName,
		KanaName:            t.KanaName,
		UsageClassification: t.UsageClassification,
		PackageForm:         t.PackageForm,
		JanPackInnerQty:     t.JanPackInnerQty,
		YjUnitName:          t.YjUnitName,
	}
}

type ProductMasterView struct {
	ProductMaster
	FormattedPackageSpec string `json:"formattedPackageSpec"`
	JanUnitName          string `json:"janUnitName"`
}

type InventoryProductView struct {
	ProductMaster
	LastInventoryDate string `json:"lastInventoryDate"`
}

type Client struct {
	Code string `json:"code"`
	Name string `json:"name"`
}

type AggregationFilters struct {
	StartDate    string
	EndDate      string
	KanaName     string
	DrugTypes    []string
	DosageForm   string
	Coefficient  float64
	YjCode       string
	MovementOnly bool
	ShelfNumber  string
}

type ValuationFilters struct {
	Date                string
	KanaName            string
	UsageClassification string
}

type StockLedgerYJGroup struct {
	YjCode                string                    `json:"yjCode"`
	ProductName           string                    `json:"productName"`
	YjUnitName            string                    `json:"yjUnitName"`
	PackageLedgers        []StockLedgerPackageGroup `json:"packageLedgers"`
	StartingBalance       interface{}               `json:"startingBalance"`
	NetChange             float64                   `json:"netChange"`
	EndingBalance         interface{}               `json:"endingBalance"`
	TotalReorderPoint     float64                   `json:"totalReorderPoint"`
	IsReorderNeeded       bool                      `json:"isReorderNeeded"`
	TotalBaseReorderPoint float64                   `json:"totalBaseReorderPoint"`
	TotalPrecompounded    float64                   `json:"totalPrecompounded"`
}

type StockLedgerPackageGroup struct {
	PackageKey             string              `json:"packageKey"`
	JanUnitName            string              `json:"janUnitName"`
	StartingBalance        interface{}         `json:"startingBalance"`
	Transactions           []LedgerTransaction `json:"transactions"`
	NetChange              float64             `json:"netChange"`
	EndingBalance          interface{}         `json:"endingBalance"`
	EffectiveEndingBalance float64             `json:"effectiveEndingBalance"`
	MaxUsage               float64             `json:"maxUsage"`
	ReorderPoint           float64             `json:"reorderPoint"`
	IsReorderNeeded        bool                `json:"isReorderNeeded"`
	Masters                []*ProductMaster    `json:"masters"`
	BaseReorderPoint       float64             `json:"baseReorderPoint"`
	PrecompoundedTotal     float64             `json:"precompoundedTotal"`
	DeliveryHistory        []TransactionRecord `json:"deliveryHistory,omitempty"`
}

type LedgerTransaction struct {
	TransactionRecord
	RunningBalance float64 `json:"runningBalance"`
}

type UnifiedInputRecord struct {
	Date            string  `json:"date"`
	JanCode         string  `json:"janCode"`
	YjCode          string  `json:"yjCode"`
	ProductName     string  `json:"productName"`
	DatQuantity     float64 `json:"datQuantity"`
	JanPackInnerQty float64 `json:"janPackInnerQty"`
	JanQuantity     float64 `json:"janQuantity"`
	YjQuantity      float64 `json:"yjQuantity"`
	YjUnitName      string  `json:"yjUnitName"`
	ClientCode      string  `json:"clientCode"`
	ReceiptNumber   string  `json:"receiptNumber"`
	LineNumber      string  `json:"lineNumber"`
	Flag            int     `json:"flag"`
	UnitPrice       float64 `json:"unitPrice"`
	Subtotal        float64 `json:"subtotal"`
	ExpiryDate      string  `json:"expiryDate"`
	LotNumber       string  `json:"lotNumber"`
}

type DeadStockGroup struct {
	YjCode        string                  `json:"yjCode"`
	ProductName   string                  `json:"productName"`
	TotalStock    float64                 `json:"totalStock"`
	PackageGroups []DeadStockPackageGroup `json:"packageGroups"`
}

type DeadStockPackageGroup struct {
	PackageKey         string              `json:"packageKey"`
	TotalStock         float64             `json:"totalStock"`
	Products           []DeadStockProduct  `json:"products"`
	RecentTransactions []TransactionRecord `json:"recentTransactions,omitempty"`
}

type DeadStockProduct struct {
	ProductMaster
	CurrentStock  float64           `json:"currentStock"`
	SavedRecords  []DeadStockRecord `json:"savedRecords"`
	LastUsageDate string            `json:"lastUsageDate"`
}

type DeadStockRecord struct {
	ID               int     `json:"id"`
	ProductCode      string  `json:"productCode"`
	YjCode           string  `json:"yjCode"`
	PackageForm      string  `json:"packageForm"`
	JanPackInnerQty  float64 `json:"janPackInnerQty"`
	YjUnitName       string  `json:"yjUnitName"`
	StockQuantityJan float64 `json:"stockQuantityJan"`
	ExpiryDate       string  `json:"expiryDate"`
	LotNumber        string  `json:"lotNumber"`
}

type DeadStockFilters struct {
	StartDate        string
	EndDate          string
	ExcludeZeroStock bool
	Coefficient      float64
	KanaName         string
	DosageForm       string
	ShelfNumber      string
}

type PreCompoundingRecord struct {
	ID            int     `json:"id"`
	PatientNumber string  `json:"patientNumber"`
	ProductCode   string  `json:"productCode"`
	Quantity      float64 `json:"quantity"`
	CreatedAt     string  `json:"createdAt"`
}

type Wholesaler struct {
	Code string `json:"code"`
	Name string `json:"name"`
}

type Backorder struct {
	YjCode          string  `json:"yjCode"`
	PackageForm     string  `json:"packageForm"`
	JanPackInnerQty float64 `json:"janPackInnerQty"`
	YjUnitName      string  `json:"yjUnitName"`
	OrderDate       string  `json:"orderDate"`
	YjQuantity      float64 `json:"yjQuantity"`
	ProductName     string  `json:"productName"`
	YjPackUnitQty   float64 `json:"yjPackUnitQty"`
	JanPackUnitQty  float64 `json:"janPackUnitQty"`
	JanUnitCode     int     `json:"janUnitCode"`
}

type PriceUpdate struct {
	ProductCode      string  `json:"productCode"`
	NewPurchasePrice float64 `json:"newPrice"`
	NewSupplier      string  `json:"newWholesaler"`
}

type QuoteData struct {
	ProductMaster
	Quotes map[string]float64 `json:"quotes"`
}

type ValuationDetailRow struct {
	YjCode               string  `json:"yjCode"`
	ProductName          string  `json:"productName"`
	ProductCode          string  `json:"productCode"`
	PackageSpec          string  `json:"packageSpec"`
	Stock                float64 `json:"stock"`
	YjUnitName           string  `json:"yjUnitName"`
	PackageNhiPrice      float64 `json:"packageNhiPrice"`
	PackagePurchasePrice float64 `json:"packagePurchasePrice"`
	TotalNhiValue        float64 `json:"totalNhiValue"`
	TotalPurchaseValue   float64 `json:"totalPurchaseValue"`
	ShowAlert            bool    `json:"showAlert"`
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\orders\handlee.go -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\orders\handlee.go
package orders

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"net/http"
	"strconv"
	"time"
	"wasabi/config"
	"wasabi/db"
	"wasabi/model"
	"wasabi/units"
)

type OrderCandidatesResponse struct {
	Candidates  []OrderCandidateYJGroup `json:"candidates"`
	Wholesalers []model.Wholesaler      `json:"wholesalers"`
}

type OrderCandidateYJGroup struct {
	model.StockLedgerYJGroup
	PackageLedgers []OrderCandidatePackageGroup `json:"packageLedgers"`
}

type OrderCandidatePackageGroup struct {
	model.StockLedgerPackageGroup
	Masters []model.ProductMasterView `json:"masters"`
}

func GenerateOrderCandidatesHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		kanaName := r.URL.Query().Get("kanaName")
		dosageForm := r.URL.Query().Get("dosageForm")
		shelfNumber := r.URL.Query().Get("shelfNumber")
		coefficientStr := r.URL.Query().Get("coefficient")
		coefficient, err := strconv.ParseFloat(coefficientStr, 64)
		if err != nil {
			coefficient = 1.3
		}

		cfg, err := config.LoadConfig()
		if err != nil {
			http.Error(w, "設定ファイルの読み込みに失敗しました: "+err.Error(), http.StatusInternalServerError)
			return
		}

		now := time.Now()
		endDate := "99991231"
		startDate := now.AddDate(0, 0, -cfg.CalculationPeriodDays)

		filters := model.AggregationFilters{
			StartDate:   startDate.Format("20060102"),
			EndDate:     endDate,
			KanaName:    kanaName,
			DosageForm:  dosageForm,
			ShelfNumber: shelfNumber,
			Coefficient: coefficient,
		}

		yjGroups, err := db.GetStockLedger(conn, filters)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}

		var candidates []OrderCandidateYJGroup
		for _, group := range yjGroups {
			if group.IsReorderNeeded {
				newYjGroup := OrderCandidateYJGroup{
					StockLedgerYJGroup: group,
					PackageLedgers:     []OrderCandidatePackageGroup{},
				}

				for _, pkg := range group.PackageLedgers {
					newPkgGroup := OrderCandidatePackageGroup{
						StockLedgerPackageGroup: pkg,
						Masters:                 []model.ProductMasterView{},
					}
					for _, master := range pkg.Masters {
						tempJcshms := model.JCShms{
							JC037: master.PackageForm,
							JC039: master.YjUnitName,
							JC044: master.YjPackUnitQty,
							JA006: sql.NullFloat64{Float64: master.JanPackInnerQty, Valid: true},
							JA008: sql.NullFloat64{Float64: master.JanPackUnitQty, Valid: true},
							JA007: sql.NullString{String: fmt.Sprintf("%d", master.JanUnitCode), Valid: true},
						}
						formattedSpec := units.FormatPackageSpec(&tempJcshms)

						newPkgGroup.Masters = append(newPkgGroup.Masters, model.ProductMasterView{
							ProductMaster:        *master,
							FormattedPackageSpec: formattedSpec,
						})
					}
					newYjGroup.PackageLedgers = append(newYjGroup.PackageLedgers, newPkgGroup)
				}
				candidates = append(candidates, newYjGroup)
			}
		}

		wholesalers, err := db.GetAllWholesalers(conn)
		if err != nil {
			http.Error(w, "Failed to get wholesalers", http.StatusInternalServerError)
			return
		}

		response := OrderCandidatesResponse{
			Candidates:  candidates,
			Wholesalers: wholesalers,
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(response)
	}
}

func PlaceOrderHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var payload []model.Backorder
		if err := json.NewDecoder(r.Body).Decode(&payload); err != nil {
			http.Error(w, "Invalid request body", http.StatusBadRequest)
			return
		}

		tx, err := conn.Begin()
		if err != nil {
			http.Error(w, "Failed to start transaction", http.StatusInternalServerError)
			return
		}
		defer tx.Rollback()

		today := time.Now().Format("20060102")
		for i := range payload {
			if payload[i].OrderDate == "" {
				payload[i].OrderDate = today
			}
		}

		if err := db.UpsertBackordersInTx(tx, payload); err != nil {
			http.Error(w, "Failed to save backorders", http.StatusInternalServerError)
			return
		}

		if err := tx.Commit(); err != nil {
			http.Error(w, "Failed to commit transaction", http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{"message": "発注内容を発注残として登録しました。"})
	}
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\parsers\dat_parser.go -----
// C:\Dev\WASABI\parsers\dat_parser.go
package parsers

import (
	"bufio"
	"io"
	"strconv"
	"strings"
	"wasabi/model"

	"golang.org/x/text/encoding/japanese"
	"golang.org/x/text/transform"
)

// ParseDatは、固定長のDATファイルからレコードを抽出し、UnifiedInputRecordのスライスを返します。
func ParseDat(r io.Reader) ([]model.UnifiedInputRecord, error) {
	scanner := bufio.NewScanner(r)
	var records []model.UnifiedInputRecord
	var currentWholesale string

	for scanner.Scan() {
		line := scanner.Text()
		if len(line) == 0 {
			continue
		}

		switch line[0:1] {
		case "S":
			if len(line) >= 13 {
				currentWholesale = strings.TrimSpace(line[3:13])
			}
		case "D":
			if len(line) < 121 {
				line += strings.Repeat(" ", 121-len(line))
			}

			// 型変換をここで行う
			productNameSJIS := line[38:78]
			utf8Bytes, _, _ := transform.Bytes(japanese.ShiftJIS.NewDecoder(), []byte(productNameSJIS))

			flag, _ := strconv.Atoi(strings.TrimSpace(line[3:4]))
			datqty, _ := strconv.ParseFloat(strings.TrimSpace(line[78:83]), 64)
			unitprice, _ := strconv.ParseFloat(strings.TrimSpace(line[83:92]), 64)
			subtotal, _ := strconv.ParseFloat(strings.TrimSpace(line[92:101]), 64)

			// UnifiedInputRecordを直接構築
			rec := model.UnifiedInputRecord{
				ClientCode:    currentWholesale,
				Flag:          flag,
				Date:          strings.TrimSpace(line[4:12]),
				ReceiptNumber: strings.TrimSpace(line[12:22]),
				LineNumber:    strings.TrimSpace(line[22:24]),
				JanCode:       strings.TrimSpace(line[25:38]),
				ProductName:   strings.TrimSpace(string(utf8Bytes)),
				DatQuantity:   datqty,
				UnitPrice:     unitprice,
				Subtotal:      subtotal,
				ExpiryDate:    strings.TrimSpace(line[109:115]), // 文字列として直接格納
				LotNumber:     strings.TrimSpace(line[115:121]),
			}
			records = append(records, rec)
		}
	}
	return records, scanner.Err()
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\parsers\inventory_parser.go -----
package parsers

import (
	"encoding/csv"
	"fmt"
	"io"
	"strconv"
	"strings"
	"wasabi/model"

	"golang.org/x/text/encoding/japanese"
	"golang.org/x/text/transform"
)

// ParsedInventoryDataはファイル全体の構造体です
type ParsedInventoryData struct {
	Date    string
	Records []model.UnifiedInputRecord
}

// trimQuotesは文字列から空白とシングルクォートを除去します
func trimQuotes(s string) string {
	return strings.Trim(strings.TrimSpace(s), "'")
}

// ParseInventoryFileは棚卸ファイルを解析し、UnifiedInputRecordのスライスを返します
func ParseInventoryFile(r io.Reader) (*ParsedInventoryData, error) {
	decoder := japanese.ShiftJIS.NewDecoder()
	reader := csv.NewReader(transform.NewReader(r, decoder))
	reader.FieldsPerRecord = -1

	var result ParsedInventoryData

	// ▼▼▼ [修正点] 重複するJANコードの数量を合算するためのマップを準備 ▼▼▼
	recordMap := make(map[string]*model.UnifiedInputRecord)
	// ▲▲▲ 修正ここまで ▲▲▲

	records, err := reader.ReadAll()
	if err != nil {
		return nil, fmt.Errorf("csv read all error: %w", err)
	}

	for _, row := range records {
		if len(row) == 0 {
			continue
		}

		rowType := strings.TrimSpace(row[0])
		switch rowType {
		case "H":
			if len(row) > 4 {
				result.Date = trimQuotes(row[4])
			}
		case "R1":
			if len(row) > 45 {
				janCode := trimQuotes(row[45])
				if janCode == "" {
					continue // JANコードがないレコードは集計できないためスキップ
				}

				physicalJanQty, _ := strconv.ParseFloat(strings.TrimSpace(row[21]), 64)

				// ▼▼▼ [修正点] 重複チェックと数量の合算ロジック ▼▼▼
				if existing, ok := recordMap[janCode]; ok {
					// 既にマップに存在する場合、数量を加算
					existing.JanQuantity += physicalJanQty
				} else {
					// マップに存在しない場合、新しいレコードとして追加
					innerPackQty, _ := strconv.ParseFloat(strings.TrimSpace(row[17]), 64)
					recordMap[janCode] = &model.UnifiedInputRecord{
						ProductName:     trimQuotes(row[12]),
						YjUnitName:      trimQuotes(row[16]),
						JanPackInnerQty: innerPackQty,
						JanQuantity:     physicalJanQty,
						YjCode:          trimQuotes(row[42]),
						JanCode:         janCode,
					}
				}
				// ▲▲▲ 修正ここまで ▲▲▲
			}
		}
	}

	// ▼▼▼ [修正点] 合算後のマップから最終的なスライスを作成 ▼▼▼
	finalRecords := make([]model.UnifiedInputRecord, 0, len(recordMap))
	for _, rec := range recordMap {
		finalRecords = append(finalRecords, *rec)
	}
	result.Records = finalRecords
	// ▲▲▲ 修正ここまで ▲▲▲

	return &result, nil
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\parsers\usage_parser.go -----
package parsers

import (
	"encoding/csv"
	"fmt"
	"io"
	"strconv"
	"wasabi/model"

	"golang.org/x/text/encoding/japanese"
	"golang.org/x/text/transform"
)

// ParseUsageはUSAGE CSVを解析し、UnifiedInputRecordのスライスを返します。
func ParseUsage(r io.Reader) ([]model.UnifiedInputRecord, error) {
	reader := csv.NewReader(transform.NewReader(r, japanese.ShiftJIS.NewDecoder()))
	reader.FieldsPerRecord = -1

	var records []model.UnifiedInputRecord
	for {
		rec, err := reader.Read()
		if err == io.EOF {
			break
		}
		if err != nil {
			return nil, fmt.Errorf("csv read error: %w", err)
		}

		if len(rec) < 6 {
			continue // skip incomplete rows
		}

		yjQty, _ := strconv.ParseFloat(rec[4], 64)

		unifiedRec := model.UnifiedInputRecord{
			Date:        rec[0],
			YjCode:      rec[1],
			JanCode:     rec[2],
			ProductName: rec[3],
			YjQuantity:  yjQty,
			YjUnitName:  rec[5],
		}
		records = append(records, unifiedRec)
	}
	return records, nil
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\precomp\handler.go -----
package precomp

import (
	"database/sql"
	"encoding/csv"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"strconv"
	"wasabi/db"
	"wasabi/model"

	"golang.org/x/text/encoding/japanese"
	"golang.org/x/text/transform"
)

// PrecompPayload は保存・更新時にフロントエンドから受け取るデータ構造です
type PrecompPayload struct {
	PatientNumber string                  `json:"patientNumber"`
	Records       []db.PrecompRecordInput `json:"records"`
}

// LoadResponse は呼び出し時にフロントエンドへ返すデータ構造です
type LoadResponse struct {
	Status  string                    `json:"status"`
	Records []model.TransactionRecord `json:"records"`
}

// SavePrecompHandler は予製データを保存・更新します
func SavePrecompHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var payload PrecompPayload
		if err := json.NewDecoder(r.Body).Decode(&payload); err != nil {
			http.Error(w, "Invalid request body", http.StatusBadRequest)
			return
		}

		if payload.PatientNumber == "" {
			http.Error(w, "Patient number is required", http.StatusBadRequest)
			return
		}

		tx, err := conn.Begin()
		if err != nil {
			http.Error(w, "Failed to start transaction", http.StatusInternalServerError)
			return
		}
		defer tx.Rollback()

		if err := db.UpsertPreCompoundingRecordsInTx(tx, payload.PatientNumber, payload.Records); err != nil {
			log.Printf("ERROR: Failed to save pre-compounding records for patient %s: %v", payload.PatientNumber, err)
			http.Error(w, "Failed to save pre-compounding records: "+err.Error(), http.StatusInternalServerError)
			return
		}

		if err := tx.Commit(); err != nil {
			http.Error(w, "Failed to commit transaction", http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{"message": "予製データを保存しました。"})
	}
}

// LoadPrecompHandler は患者の予製データと現在のステータスを返します
func LoadPrecompHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		patientNumber := r.URL.Query().Get("patientNumber")
		if patientNumber == "" {
			http.Error(w, "Patient number is required", http.StatusBadRequest)
			return
		}

		status, err := db.GetPreCompoundingStatusByPatient(conn, patientNumber)
		if err != nil {
			http.Error(w, "Failed to get pre-compounding status: "+err.Error(), http.StatusInternalServerError)
			return
		}
		records, err := db.GetPreCompoundingRecordsByPatient(conn, patientNumber)
		if err != nil {
			http.Error(w, "Failed to load pre-compounding records: "+err.Error(), http.StatusInternalServerError)
			return
		}

		response := LoadResponse{
			Status:  status,
			Records: records,
		}
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(response)
	}
}

// ClearPrecompHandler は予製データを完全に削除します
func ClearPrecompHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		patientNumber := r.URL.Query().Get("patientNumber")
		if patientNumber == "" {
			http.Error(w, "Patient number is required", http.StatusBadRequest)
			return
		}

		if err := db.DeletePreCompoundingRecordsByPatient(conn, patientNumber); err != nil {
			http.Error(w, "Failed to clear pre-compounding records: "+err.Error(), http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{"message": "予製データを完全に削除しました。"})
	}
}

// SuspendPrecompHandler は予製を中断状態にします
func SuspendPrecompHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var payload struct {
			PatientNumber string `json:"patientNumber"`
		}
		if err := json.NewDecoder(r.Body).Decode(&payload); err != nil {
			http.Error(w, "Invalid request body", http.StatusBadRequest)
			return
		}
		if payload.PatientNumber == "" {
			http.Error(w, "Patient number is required", http.StatusBadRequest)
			return
		}
		tx, err := conn.Begin()
		if err != nil {
			http.Error(w, "Failed to start transaction", http.StatusInternalServerError)
			return
		}
		defer tx.Rollback()
		if err := db.SuspendPreCompoundingRecordsByPatient(tx, payload.PatientNumber); err != nil {
			http.Error(w, "Failed to suspend pre-compounding records: "+err.Error(), http.StatusInternalServerError)
			return
		}
		if err := tx.Commit(); err != nil {
			http.Error(w, "Failed to commit transaction", http.StatusInternalServerError)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{"message": "予製を中断しました。"})
	}
}

// ResumePrecompHandler は予製を再開状態にします
func ResumePrecompHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var payload struct {
			PatientNumber string `json:"patientNumber"`
		}
		if err := json.NewDecoder(r.Body).Decode(&payload); err != nil {
			http.Error(w, "Invalid request body", http.StatusBadRequest)
			return
		}
		if payload.PatientNumber == "" {
			http.Error(w, "Patient number is required", http.StatusBadRequest)
			return
		}
		tx, err := conn.Begin()
		if err != nil {
			http.Error(w, "Failed to start transaction", http.StatusInternalServerError)
			return
		}
		defer tx.Rollback()
		if err := db.ResumePreCompoundingRecordsByPatient(tx, payload.PatientNumber); err != nil {
			http.Error(w, "Failed to resume pre-compounding records: "+err.Error(), http.StatusInternalServerError)
			return
		}
		if err := tx.Commit(); err != nil {
			http.Error(w, "Failed to commit transaction", http.StatusInternalServerError)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{"message": "予製を再開しました。"})
	}
}

// GetStatusPrecompHandler は予製の現在の状態を返します
func GetStatusPrecompHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		patientNumber := r.URL.Query().Get("patientNumber")
		if patientNumber == "" {
			http.Error(w, "Patient number is required", http.StatusBadRequest)
			return
		}
		status, err := db.GetPreCompoundingStatusByPatient(conn, patientNumber)
		if err != nil {
			http.Error(w, "Failed to get status: "+err.Error(), http.StatusInternalServerError)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{"status": status})
	}
}

func ExportPrecompHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		patientNumber := r.URL.Query().Get("patientNumber")
		if patientNumber == "" {
			http.Error(w, "Patient number is required", http.StatusBadRequest)
			return
		}

		records, err := db.GetPreCompoundingRecordsByPatient(conn, patientNumber)
		if err != nil {
			http.Error(w, "Failed to load pre-compounding records: "+err.Error(), http.StatusInternalServerError)
			return
		}

		dirPath := filepath.Join("download", "exports")
		if err := os.MkdirAll(dirPath, 0755); err != nil {
			http.Error(w, "Failed to create directory", http.StatusInternalServerError)
			return
		}
		fileName := fmt.Sprintf("precomp_%s.csv", patientNumber)
		filePath := filepath.Join(dirPath, fileName)

		file, err := os.Create(filePath)
		if err != nil {
			http.Error(w, "Failed to create file", http.StatusInternalServerError)
			return
		}
		defer file.Close()

		file.Write([]byte{0xEF, 0xBB, 0xBF}) // UTF-8 BOM
		csvWriter := csv.NewWriter(file)

		header := []string{"product_code", "product_name", "quantity_jan", "unit_name"}
		csvWriter.Write(header)

		for _, rec := range records {
			row := []string{
				fmt.Sprintf(`="%s"`, rec.JanCode), // Excel対応
				rec.ProductName,
				fmt.Sprintf("%f", rec.JanQuantity),
				rec.JanUnitName,
			}
			csvWriter.Write(row)
		}
		csvWriter.Flush()

		http.ServeFile(w, r, filePath)
	}
}

func ImportPrecompHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		if err := r.ParseMultipartForm(10 << 20); err != nil { // 10MB limit
			http.Error(w, "File upload error", http.StatusBadRequest)
			return
		}

		patientNumber := r.FormValue("patientNumber")
		if patientNumber == "" {
			http.Error(w, "Patient number is required", http.StatusBadRequest)
			return
		}

		file, _, err := r.FormFile("file")
		if err != nil {
			http.Error(w, "No file uploaded", http.StatusBadRequest)
			return
		}
		defer file.Close()

		reader := transform.NewReader(file, japanese.ShiftJIS.NewDecoder())
		csvReader := csv.NewReader(reader)
		csvReader.LazyQuotes = true

		records, err := csvReader.ReadAll()
		if err != nil {
			http.Error(w, "Failed to parse CSV file", http.StatusBadRequest)
			return
		}

		var precompRecords []db.PrecompRecordInput
		for i, row := range records {
			if i == 0 || len(row) < 3 {
				continue
			}
			productCode := row[0]
			quantity, err := strconv.ParseFloat(row[2], 64)
			if err != nil || productCode == "" {
				continue
			}
			precompRecords = append(precompRecords, db.PrecompRecordInput{
				ProductCode: productCode,
				JanQuantity: quantity,
			})
		}

		tx, err := conn.Begin()
		if err != nil {
			http.Error(w, "Failed to start transaction", http.StatusInternalServerError)
			return
		}
		defer tx.Rollback()

		if err := db.UpsertPreCompoundingRecordsInTx(tx, patientNumber, precompRecords); err != nil {
			http.Error(w, "Failed to save pre-compounding records: "+err.Error(), http.StatusInternalServerError)
			return
		}

		if err := tx.Commit(); err != nil {
			http.Error(w, "Failed to commit transaction", http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{
			"message": fmt.Sprintf("%d件の予製データをインポートしました。", len(precompRecords)),
		})
	}
}

func ExportAllPrecompHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		records, err := db.GetAllPreCompoundingRecords(conn)
		if err != nil {
			http.Error(w, "Failed to load all pre-compounding records: "+err.Error(), http.StatusInternalServerError)
			return
		}

		fileName := "precomp_all.csv"
		w.Header().Set("Content-Type", "text/csv")
		w.Header().Set("Content-Disposition", "attachment; filename="+fileName)
		w.Write([]byte{0xEF, 0xBB, 0xBF}) // UTF-8 BOM

		csvWriter := csv.NewWriter(w)
		defer csvWriter.Flush()

		header := []string{"patient_number", "product_code", "product_name", "quantity_jan", "unit_name"}
		if err := csvWriter.Write(header); err != nil {
			log.Printf("Failed to write CSV header for all precomp export: %v", err)
			return
		}

		for _, rec := range records {
			row := []string{
				rec.ClientCode,
				rec.JanCode,
				rec.ProductName,
				fmt.Sprintf("%f", rec.JanQuantity),
				rec.JanUnitName,
			}
			if err := csvWriter.Write(row); err != nil {
				log.Printf("Failed to write CSV row for all precomp export: %v", err)
				continue
			}
		}
	}
}

func BulkImportPrecompHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		file, _, err := r.FormFile("file")
		if err != nil {
			http.Error(w, "No file uploaded", http.StatusBadRequest)
			return
		}
		defer file.Close()

		reader := transform.NewReader(file, japanese.ShiftJIS.NewDecoder())
		csvReader := csv.NewReader(reader)
		csvReader.LazyQuotes = true

		records, err := csvReader.ReadAll()
		if err != nil {
			http.Error(w, "Failed to parse CSV file", http.StatusBadRequest)
			return
		}

		recordsByPatient := make(map[string][]db.PrecompRecordInput)
		var importedCount int
		for i, row := range records {
			if i == 0 || len(row) < 4 {
				continue
			}
			patientNumber := row[0]
			productCode := row[1]
			quantity, err := strconv.ParseFloat(row[3], 64)
			if err != nil || productCode == "" || patientNumber == "" {
				continue
			}
			recordsByPatient[patientNumber] = append(recordsByPatient[patientNumber], db.PrecompRecordInput{
				ProductCode: productCode,
				JanQuantity: quantity,
			})
			importedCount++
		}

		if len(recordsByPatient) == 0 {
			http.Error(w, "No valid data found in CSV file.", http.StatusBadRequest)
			return
		}

		tx, err := conn.Begin()
		if err != nil {
			http.Error(w, "Failed to start transaction", http.StatusInternalServerError)
			return
		}
		defer tx.Rollback()

		for patientNumber, precompRecords := range recordsByPatient {
			if err := db.UpsertPreCompoundingRecordsInTx(tx, patientNumber, precompRecords); err != nil {
				http.Error(w, fmt.Sprintf("Failed to save records for patient %s: %s", patientNumber, err.Error()), http.StatusInternalServerError)
				return
			}
		}

		if err := tx.Commit(); err != nil {
			http.Error(w, "Failed to commit transaction", http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{
			"message": fmt.Sprintf("%d名の患者の予製データ（計%d件）をインポートしました。", len(recordsByPatient), importedCount),
		})
	}
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\pricing\handler.go -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\pricing\handler.go

package pricing

import (
	"bufio"
	"database/sql"
	"encoding/csv"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strconv"
	"strings"
	"time"
	"wasabi/db"
	"wasabi/model"
	"wasabi/units"
)

func GetExportDataHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		wholesalerName := r.URL.Query().Get("wholesalerName")
		unregisteredOnlyStr := r.URL.Query().Get("unregisteredOnly")
		unregisteredOnly := unregisteredOnlyStr == "true"

		if wholesalerName == "" {
			http.Error(w, "Wholesaler name is required", http.StatusBadRequest)
			return
		}

		allMasters, err := db.GetAllProductMasters(conn)
		if err != nil {
			http.Error(w, "Failed to get products for export", http.StatusInternalServerError)
			return
		}

		var mastersToProcess []*model.ProductMaster
		for _, p := range allMasters {
			if strings.HasPrefix(p.ProductCode, "99999") && len(p.ProductCode) > 13 {
				continue
			}
			mastersToProcess = append(mastersToProcess, p)
		}

		var dataToExport []*model.ProductMaster
		if unregisteredOnly {
			for _, p := range mastersToProcess {
				if p.SupplierWholesale == "" {
					uc := p.UsageClassification
					if uc == "機" || uc == "他" || ((uc == "内" || uc == "外" || uc == "歯" || uc == "注") && p.Origin == "JCSHMS") {
						dataToExport = append(dataToExport, p)
					}
				}
			}
			if len(dataToExport) == 0 {
				http.Error(w, "Export target not found", http.StatusNotFound)
				return
			}
		} else {
			dataToExport = mastersToProcess
		}

		dateStr := r.URL.Query().Get("date")
		fileType := "ALL"
		if unregisteredOnly {
			fileType = "UNREGISTERED"
		}
		fileName := fmt.Sprintf("価格見積依頼_%s_%s_%s.csv", wholesalerName, fileType, dateStr)

		w.Header().Set("Content-Type", "text/csv")
		w.Header().Set("Content-Disposition", "attachment; filename="+fileName)

		// ▼▼▼【ここを修正】BOMを書き込む行を削除 ▼▼▼
		// w.Write([]byte{0xEF, 0xBB, 0xBF}) // UTF-8 BOM
		// ▲▲▲【修正ここまで】▲▲▲

		csvWriter := csv.NewWriter(w)
		defer csvWriter.Flush()

		headers := []string{"product_code", "product_name", "maker_name", "package_spec", "purchase_price"}
		csvWriter.Write(headers)

		for _, m := range dataToExport {
			tempJcshms := model.JCShms{
				JC037: m.PackageForm,
				JC039: m.YjUnitName,
				JC044: m.YjPackUnitQty,
				JA006: sql.NullFloat64{Float64: m.JanPackInnerQty, Valid: true},
				JA008: sql.NullFloat64{Float64: m.JanPackUnitQty, Valid: true},
				JA007: sql.NullString{String: fmt.Sprintf("%d", m.JanUnitCode), Valid: true},
			}
			formattedSpec := units.FormatPackageSpec(&tempJcshms)

			record := []string{
				fmt.Sprintf("=%q", m.ProductCode),
				m.ProductName,
				m.MakerName,
				formattedSpec,
				"", // purchase_price is left empty
			}
			csvWriter.Write(record)
		}
	}
}

type QuoteDataWithSpec struct {
	model.ProductMaster
	FormattedPackageSpec string             `json:"formattedPackageSpec"`
	Quotes               map[string]float64 `json:"quotes"`
}

type UploadResponse struct {
	ProductData     []QuoteDataWithSpec `json:"productData"`
	WholesalerOrder []string            `json:"wholesalerOrder"`
}

func UploadQuotesHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		if err := r.ParseMultipartForm(32 << 20); err != nil {
			http.Error(w, "File upload error", http.StatusBadRequest)
			return
		}

		allMasters, err := db.GetAllProductMasters(conn)
		if err != nil {
			http.Error(w, "Failed to get all product masters", http.StatusInternalServerError)
			return
		}

		quotesByProduct := make(map[string]map[string]float64)
		wholesalerFiles := r.MultipartForm.File["files"]
		wholesalerNames := r.MultipartForm.Value["wholesalerNames"]

		if len(wholesalerFiles) != len(wholesalerNames) {
			http.Error(w, "File and wholesaler name mismatch", http.StatusBadRequest)
			return
		}

		for i, fileHeader := range wholesalerFiles {
			wholesalerName := wholesalerNames[i]
			file, err := fileHeader.Open()
			if err != nil {
				log.Printf("WARN: could not open uploaded file for %s: %v", wholesalerName, err)
				continue
			}
			defer file.Close()

			// ▼▼▼【ここから修正】BOMを自動的にスキップする処理を追加 ▼▼▼
			br := bufio.NewReader(file)
			bom, err := br.Peek(3)
			if err == nil && bom[0] == 0xef && bom[1] == 0xbb && bom[2] == 0xbf {
				br.Read(make([]byte, 3)) // BOMを読み飛ばす
			}
			csvReader := csv.NewReader(br)
			// ▲▲▲【修正ここまで】▲▲▲

			csvReader.LazyQuotes = true
			rows, err := csvReader.ReadAll()
			if err != nil || len(rows) < 1 {
				log.Printf("WARN: could not parse CSV for %s: %v", wholesalerName, err)
				continue
			}

			header := rows[0]
			codeIndex, priceIndex := -1, -1
			for i, h := range header {
				if h == "product_code" {
					codeIndex = i
				}
				if h == "purchase_price" {
					priceIndex = i
				}
			}

			if codeIndex == -1 || priceIndex == -1 {
				log.Printf("WARN: required columns not found in file from %s", wholesalerName)
				continue
			}

			for _, row := range rows[1:] {
				if len(row) <= codeIndex || len(row) <= priceIndex {
					continue
				}

				productCode := strings.Trim(strings.TrimSpace(row[codeIndex]), `="`)
				priceStr := row[priceIndex]

				if productCode == "" || priceStr == "" {
					continue
				}

				price, err := strconv.ParseFloat(priceStr, 64)
				if err != nil {
					continue
				}

				if _, ok := quotesByProduct[productCode]; !ok {
					quotesByProduct[productCode] = make(map[string]float64)
				}
				quotesByProduct[productCode][wholesalerName] = price
			}
		}

		var responseData []QuoteDataWithSpec
		for _, master := range allMasters {
			tempJcshms := model.JCShms{
				JC037: master.PackageForm,
				JC039: master.YjUnitName,
				JC044: master.YjPackUnitQty,
				JA006: sql.NullFloat64{Float64: master.JanPackInnerQty, Valid: true},
				JA008: sql.NullFloat64{Float64: master.JanPackUnitQty, Valid: true},
				JA007: sql.NullString{String: fmt.Sprintf("%d", master.JanUnitCode), Valid: true},
			}
			formattedSpec := units.FormatPackageSpec(&tempJcshms)

			responseData = append(responseData, QuoteDataWithSpec{
				ProductMaster:        *master,
				FormattedPackageSpec: formattedSpec,
				Quotes:               quotesByProduct[master.ProductCode],
			})
		}

		finalResponse := UploadResponse{
			ProductData:     responseData,
			WholesalerOrder: wholesalerNames,
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(finalResponse)
	}
}

func BulkUpdateHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var payload []model.PriceUpdate
		if err := json.NewDecoder(r.Body).Decode(&payload); err != nil {
			http.Error(w, "Invalid request body: "+err.Error(), http.StatusBadRequest)
			return
		}

		tx, err := conn.Begin()
		if err != nil {
			http.Error(w, "Failed to start transaction", http.StatusInternalServerError)
			return
		}
		defer tx.Rollback()

		if err := db.UpdatePricesAndSuppliersInTx(tx, payload); err != nil {
			http.Error(w, "Failed to update prices: "+err.Error(), http.StatusInternalServerError)
			return
		}

		if err := tx.Commit(); err != nil {
			http.Error(w, "Failed to commit transaction", http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{
			"message": fmt.Sprintf("%d件の医薬品マスターを更新しました。", len(payload)),
		})
	}
}

func GetAllMastersForPricingHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		allMasters, err := db.GetAllProductMasters(conn)
		if err != nil {
			http.Error(w, "Failed to get all product masters for pricing", http.StatusInternalServerError)
			return
		}

		responseData := make([]QuoteDataWithSpec, 0, len(allMasters))
		for _, master := range allMasters {
			tempJcshms := model.JCShms{
				JC037: master.PackageForm,
				JC039: master.YjUnitName,
				JC044: master.YjPackUnitQty,
				JA006: sql.NullFloat64{Float64: master.JanPackInnerQty, Valid: true},
				JA008: sql.NullFloat64{Float64: master.JanPackUnitQty, Valid: true},
				JA007: sql.NullString{String: fmt.Sprintf("%d", master.JanUnitCode), Valid: true},
			}
			formattedSpec := units.FormatPackageSpec(&tempJcshms)

			responseData = append(responseData, QuoteDataWithSpec{
				ProductMaster:        *master,
				FormattedPackageSpec: formattedSpec,
				Quotes:               make(map[string]float64),
			})
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(responseData)
	}
}

func DirectImportHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		file, _, err := r.FormFile("file")
		if err != nil {
			http.Error(w, "No file uploaded", http.StatusBadRequest)
			return
		}
		defer file.Close()

		// ▼▼▼【ここから修正】BOMを自動的にスキップする処理を追加 ▼▼▼
		br := bufio.NewReader(file)
		bom, err := br.Peek(3)
		if err == nil && bom[0] == 0xef && bom[1] == 0xbb && bom[2] == 0xbf {
			br.Read(make([]byte, 3)) // BOMを読み飛ばす
		}
		csvReader := csv.NewReader(br)
		// ▲▲▲【修正ここまで】▲▲▲

		csvReader.LazyQuotes = true
		rows, err := csvReader.ReadAll()
		if err != nil {
			http.Error(w, "Failed to parse CSV file: "+err.Error(), http.StatusBadRequest)
			return
		}

		var updates []model.PriceUpdate
		for i, row := range rows {
			if i == 0 {
				continue
			}
			if len(row) < 6 {
				continue
			}

			productCode := strings.Trim(strings.TrimSpace(row[0]), `="`)
			priceStr := strings.TrimSpace(row[4])
			supplierCode := strings.TrimSpace(row[5])

			if productCode == "" || priceStr == "" || supplierCode == "" {
				continue
			}

			price, err := strconv.ParseFloat(priceStr, 64)
			if err != nil {
				continue
			}

			updates = append(updates, model.PriceUpdate{
				ProductCode:      productCode,
				NewPurchasePrice: price,
				NewSupplier:      supplierCode,
			})
		}

		if len(updates) == 0 {
			http.Error(w, "No valid data to import found in the file.", http.StatusBadRequest)
			return
		}

		tx, err := conn.Begin()
		if err != nil {
			http.Error(w, "Failed to start transaction", http.StatusInternalServerError)
			return
		}
		defer tx.Rollback()

		if err := db.UpdatePricesAndSuppliersInTx(tx, updates); err != nil {
			http.Error(w, "Failed to update prices: "+err.Error(), http.StatusInternalServerError)
			return
		}

		if err := tx.Commit(); err != nil {
			http.Error(w, "Failed to commit transaction", http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{
			"message": fmt.Sprintf("%d件の納入価と卸情報を更新しました。", len(updates)),
		})
	}
}

func BackupExportHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		allMasters, err := db.GetAllProductMasters(conn)
		if err != nil {
			http.Error(w, "Failed to get products for backup export", http.StatusInternalServerError)
			return
		}

		now := time.Now()
		fileName := fmt.Sprintf("納入価・卸バックアップ_%s.csv", now.Format("20060102_150405"))
		w.Header().Set("Content-Type", "text/csv")
		w.Header().Set("Content-Disposition", "attachment; filename="+fileName)

		// ▼▼▼【ここを修正】BOMを書き込む行を削除 ▼▼▼
		// w.Write([]byte{0xEF, 0xBB, 0xBF})
		// ▲▲▲【修正ここまで】▲▲▲

		csvWriter := csv.NewWriter(w)
		defer csvWriter.Flush()

		headers := []string{"product_code", "product_name", "maker_name", "package_spec", "purchase_price", "supplier_wholesale"}
		csvWriter.Write(headers)

		for _, m := range allMasters {
			tempJcshms := model.JCShms{
				JC037: m.PackageForm,
				JC039: m.YjUnitName,
				JC044: m.YjPackUnitQty,
				JA006: sql.NullFloat64{Float64: m.JanPackInnerQty, Valid: true},
				JA008: sql.NullFloat64{Float64: m.JanPackUnitQty, Valid: true},
				JA007: sql.NullString{String: fmt.Sprintf("%d", m.JanUnitCode), Valid: true},
			}
			formattedSpec := units.FormatPackageSpec(&tempJcshms)

			record := []string{
				fmt.Sprintf("=%q", m.ProductCode),
				m.ProductName,
				m.MakerName,
				formattedSpec,
				strconv.FormatFloat(m.PurchasePrice, 'f', 2, 64),
				m.SupplierWholesale,
			}
			csvWriter.Write(record)
		}
	}
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\product\handler.go -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\product\handler.go
package product

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"net/http"
	"strings"
	"time"
	"wasabi/config"
	"wasabi/db"
	"wasabi/model"
	"wasabi/units"
)

var kanaRowMap = map[string][]string{
	"ア": {"ア", "イ", "ウ", "エ", "オ"},
	"カ": {"カ", "キ", "ク", "ケ", "コ"},
	"サ": {"サ", "シ", "ス", "セ", "ソ"},
	"タ": {"タ", "チ", "ツ", "テ", "ト"},
	"ナ": {"ナ", "ニ", "ヌ", "ネ", "ノ"},
	"ハ": {"ハ", "ヒ", "フ", "ヘ", "ホ"},
	"マ": {"マ", "ミ", "ム", "メ", "モ"},
	"ヤ": {"ヤ", "ユ", "ヨ"},
	"ラ": {"ラ", "リ", "ル", "レ", "ロ"},
	"ワ": {"ワ", "ヰ", "ヱ", "ヲ", "ン"},
}

func toKatakana(s string) string {
	var res string
	for _, r := range s {
		if r >= 'ぁ' && r <= 'ゔ' {
			res += string(r + 0x60)
		} else {
			res += string(r)
		}
	}
	return res
}
func toHiragana(s string) string {
	var res string
	for _, r := range s {
		if r >= 'ァ' && r <= 'ヴ' {
			res += string(r - 0x60)
		} else {
			res += string(r)
		}
	}
	return res
}

var kanaVariants = map[rune][]rune{
	'ア': {'ァ'}, 'イ': {'ィ'}, 'ウ': {'ゥ'}, 'エ': {'ェ'}, 'オ': {'ォ'},
	'カ': {'ガ'}, 'キ': {'ギ'}, 'ク': {'グ'}, 'ケ': {'ゲ'}, 'コ': {'ゴ'},
	'サ': {'ザ'}, 'シ': {'ジ'}, 'ス': {'ズ'}, 'セ': {'ゼ'}, 'ソ': {'ゾ'},
	'タ': {'ダ'}, 'チ': {'ヂ'}, 'ツ': {'ッ', 'ヅ'}, 'テ': {'デ'}, 'ト': {'ド'},
	'ハ': {'バ', 'パ'}, 'ヒ': {'ビ', 'ピ'}, 'フ': {'ブ', 'プ'}, 'ヘ': {'ベ', 'ペ'}, 'ホ': {'ボ', 'ポ'},
	'ヤ': {'ャ'}, 'ユ': {'ュ'}, 'ヨ': {'ョ'},
	'ワ': {'ヮ'},
}

func SearchProductsHandler(conn *sql.DB) http.HandlerFunc {
	handler := func(w http.ResponseWriter, r *http.Request) {
		q := r.URL.Query()
		dosageForm := q.Get("dosageForm")
		kanaInitial := q.Get("kanaInitial")
		searchQuery := q.Get("q")
		isDeadStockOnly := q.Get("deadStockOnly") == "true"
		drugTypesParam := q.Get("drugTypes")
		shelfNumber := q.Get("shelfNumber")
		var results []model.ProductMasterView

		if isDeadStockOnly {
			cfg, err := config.LoadConfig()
			if err != nil {
				http.Error(w, "設定ファイルの読み込みに失敗しました: "+err.Error(), http.StatusInternalServerError)
				return
			}
			now := time.Now()
			endDate := "99991231"
			startDate := now.AddDate(0, 0, -cfg.CalculationPeriodDays)
			filters := model.DeadStockFilters{
				StartDate:        startDate.Format("20060102"),
				EndDate:          endDate,
				ExcludeZeroStock: true,
				KanaName:         searchQuery,
				DosageForm:       dosageForm,
				ShelfNumber:      shelfNumber,
			}

			deadStockGroups, dsErr := db.GetDeadStockList(conn, filters)
			if dsErr != nil {
				http.Error(w, "Failed to get dead stock list: "+dsErr.Error(), http.StatusInternalServerError)
				return
			}
			seenYjCodes := make(map[string]bool)
			for _, group := range deadStockGroups {
				for _, pkg := range group.PackageGroups {
					for _, prod := range pkg.Products {
						if !seenYjCodes[prod.YjCode] {
							master := prod.ProductMaster
							tempJcshms := model.JCShms{
								JC037: master.PackageForm,
								JC039: master.YjUnitName,
								JC044: master.YjPackUnitQty,
								JA006: sql.NullFloat64{Float64: master.JanPackInnerQty, Valid: true},
								JA008: sql.NullFloat64{Float64: master.JanPackUnitQty, Valid: true},
								JA007: sql.NullString{String: fmt.Sprintf("%d", master.JanUnitCode), Valid: true},
							}
							view := model.ProductMasterView{
								ProductMaster:        master,
								FormattedPackageSpec: units.FormatPackageSpec(&tempJcshms),
								JanUnitName:          units.ResolveName(fmt.Sprintf("%d", master.JanUnitCode)),
							}
							results = append(results, view)
							seenYjCodes[master.YjCode] = true
						}
					}
				}
			}
		} else {
			query := `SELECT ` + db.SelectColumns + ` FROM product_master p WHERE p.yj_code != ''`
			var args []interface{}
			if dosageForm != "" {
				query += " AND p.usage_classification LIKE ?"
				args = append(args, "%"+dosageForm+"%")
			}
			if kanaInitial != "" {
				if kanaChars, ok := kanaRowMap[toKatakana(kanaInitial)]; ok {
					var conditions []string
					for _, charStr := range kanaChars {
						baseRunes := []rune(charStr)
						if len(baseRunes) == 0 {
							continue
						}
						baseRune := baseRunes[0]
						charsToTest := []rune{baseRune}
						if variants, found := kanaVariants[baseRune]; found {
							charsToTest = append(charsToTest, variants...)
						}
						for _, char := range charsToTest {
							kataChar, hiraChar := string(char), toHiragana(string(char))
							conditions = append(conditions, "p.kana_name LIKE ? OR p.kana_name LIKE ?")
							args = append(args, kataChar+"%", hiraChar+"%")
						}
					}
					if len(conditions) > 0 {
						query += " AND (" + strings.Join(conditions, " OR ") + ")"
					}
				}
			}
			if drugTypesParam != "" {
				drugTypes := strings.Split(drugTypesParam, ",")
				if len(drugTypes) > 0 && drugTypes[0] != "" {
					var conditions []string
					flagMap := map[string]string{
						"poison": "p.flag_poison = 1", "deleterious": "p.flag_deleterious = 1",
						"narcotic": "p.flag_narcotic = 1", "psychotropic1": "p.flag_psychotropic = 1",
						"psychotropic2": "p.flag_psychotropic = 2", "psychotropic3": "p.flag_psychotropic = 3",
					}
					for _, dt := range drugTypes {
						if cond, ok := flagMap[dt]; ok {
							conditions = append(conditions, cond)
						}
					}
					if len(conditions) > 0 {
						query += " AND (" + strings.Join(conditions, " OR ") + ")"
					}
				}
			}
			if searchQuery != "" {
				query += " AND (p.kana_name LIKE ? OR p.product_name LIKE ?)"
				args = append(args, "%"+searchQuery+"%", "%"+searchQuery+"%")
			}
			if shelfNumber != "" {
				query += " AND p.shelf_number LIKE ?"
				args = append(args, "%"+shelfNumber+"%")
			}
			query += ` ORDER BY
				CASE
					WHEN TRIM(p.usage_classification) = '内' OR TRIM(p.usage_classification) = '1' THEN 1
					WHEN TRIM(p.usage_classification) = '外' OR TRIM(p.usage_classification) = '2' THEN 2
					WHEN TRIM(p.usage_classification) = '注' OR TRIM(p.usage_classification) = '3' THEN 3
					WHEN TRIM(p.usage_classification) = '歯' OR TRIM(p.usage_classification) = '4' THEN 4
					WHEN TRIM(p.usage_classification) = '機' OR TRIM(p.usage_classification) = '5' THEN 5
					WHEN TRIM(p.usage_classification) = '他' OR TRIM(p.usage_classification) = '6' THEN 6
					ELSE 7
				END,
				p.kana_name`
			rows, queryErr := conn.Query(query, args...)
			if queryErr != nil {
				http.Error(w, "Failed to search products: "+queryErr.Error(), http.StatusInternalServerError)
				return
			}
			defer rows.Close()
			seenYjCodes := make(map[string]bool)
			for rows.Next() {
				master, scanErr := db.ScanProductMaster(rows)
				if scanErr != nil {
					http.Error(w, "Failed to scan product: "+scanErr.Error(), http.StatusInternalServerError)
					return
				}
				if !seenYjCodes[master.YjCode] {
					tempJcshms := model.JCShms{
						JC037: master.PackageForm, JC039: master.YjUnitName, JC044: master.YjPackUnitQty,
						JA006: sql.NullFloat64{Float64: master.JanPackInnerQty, Valid: true},
						JA008: sql.NullFloat64{Float64: master.JanPackUnitQty, Valid: true},
						JA007: sql.NullString{String: fmt.Sprintf("%d", master.JanUnitCode), Valid: true},
					}
					view := model.ProductMasterView{
						ProductMaster: *master, FormattedPackageSpec: units.FormatPackageSpec(&tempJcshms),
						JanUnitName: units.ResolveName(fmt.Sprintf("%d", master.JanUnitCode)),
					}
					results = append(results, view)
					seenYjCodes[master.YjCode] = true
				}
			}
		}
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(results)
	}
	return handler
}

type ProductLedgerResponse struct {
	LedgerTransactions []model.LedgerTransaction `json:"ledgerTransactions"`
	PrecompDetails     []model.TransactionRecord `json:"precompDetails"`
}

func GetProductLedgerHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		productCode := strings.TrimPrefix(r.URL.Path, "/api/ledger/product/")
		if productCode == "" {
			http.Error(w, "Product code is required", http.StatusBadRequest)
			return
		}

		// GetStockLedgerのロジックを参考に、単一製品コードに特化した台帳を生成する

		// 1. 対象製品の全期間の取引を取得
		txRows, err := conn.Query(`SELECT `+db.TransactionColumns+` FROM transaction_records WHERE jan_code = ? ORDER BY transaction_date, id`, productCode)
		if err != nil {
			http.Error(w, "Failed to get transactions for product: "+err.Error(), http.StatusInternalServerError)
			return
		}
		defer txRows.Close()

		var allTxsForProduct []*model.TransactionRecord
		for txRows.Next() {
			t, err := db.ScanTransactionRecord(txRows)
			if err != nil {
				http.Error(w, "Failed to scan transaction record: "+err.Error(), http.StatusInternalServerError)
				return
			}
			allTxsForProduct = append(allTxsForProduct, t)
		}

		// 2. 表示期間を設定（直近30日間とする）
		endDate := time.Now()
		startDate := endDate.AddDate(0, 0, -30)
		startDateStr := startDate.Format("20060102")
		endDateStr := endDate.Format("20060102")

		// 3. 期間前在庫（繰越在庫）を計算
		var startingBalance float64
		latestInventoryDateBeforePeriod := ""
		txsBeforePeriod := []*model.TransactionRecord{}
		inventorySumsByDate := make(map[string]float64)

		for _, t := range allTxsForProduct {
			if t.TransactionDate < startDateStr {
				txsBeforePeriod = append(txsBeforePeriod, t)
				if t.Flag == 0 { // 棚卸レコード
					inventorySumsByDate[t.TransactionDate] += t.YjQuantity
					if t.TransactionDate > latestInventoryDateBeforePeriod {
						latestInventoryDateBeforePeriod = t.TransactionDate
					}
				}
			}
		}

		if latestInventoryDateBeforePeriod != "" {
			startingBalance = inventorySumsByDate[latestInventoryDateBeforePeriod]
			for _, t := range txsBeforePeriod {
				if t.TransactionDate > latestInventoryDateBeforePeriod {
					startingBalance += t.SignedYjQty()
				}
			}
		} else {
			for _, t := range txsBeforePeriod {
				startingBalance += t.SignedYjQty()
			}
		}

		// 4. 期間内の変動と残高を計算
		var ledgerTxs []model.LedgerTransaction
		runningBalance := startingBalance

		periodInventorySums := make(map[string]float64)
		for _, t := range allTxsForProduct {
			if t.TransactionDate >= startDateStr && t.TransactionDate <= endDateStr && t.Flag == 0 {
				periodInventorySums[t.TransactionDate] += t.YjQuantity
			}
		}

		lastProcessedDate := ""
		for _, t := range allTxsForProduct {
			if t.TransactionDate >= startDateStr && t.TransactionDate <= endDateStr {
				if t.TransactionDate != lastProcessedDate && lastProcessedDate != "" {
					if inventorySum, ok := periodInventorySums[lastProcessedDate]; ok {
						runningBalance = inventorySum
					}
				}

				// 棚卸(flag=0)の場合はその日の棚卸合計値で残高を上書きし、それ以外は変動量を加算する
				if t.Flag == 0 {
					if inventorySum, ok := periodInventorySums[t.TransactionDate]; ok {
						runningBalance = inventorySum
					}
				} else {
					runningBalance += t.SignedYjQty()
				}

				ledgerTxs = append(ledgerTxs, model.LedgerTransaction{TransactionRecord: *t, RunningBalance: runningBalance})
				lastProcessedDate = t.TransactionDate
			}
		}

		// 5. 関連する予製引当を取得
		precomps, err := db.GetPreCompoundingDetailsByProductCodes(conn, []string{productCode})
		if err != nil {
			http.Error(w, "Failed to get precomp details: "+err.Error(), http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(ProductLedgerResponse{
			LedgerTransactions: ledgerTxs,
			PrecompDetails:     precomps,
		})
	}
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\reprocess\handler.go -----
package reprocess

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"wasabi/db"
	"wasabi/mappers"
	"wasabi/model"
)

// ProcessTransactionsHandler は全ての取引データを最新のマスター情報で更新します。
func ProcessTransactionsHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// 全ての製品マスターをメモリにロード（高速化のため）
		allMasters, err := db.GetAllProductMasters(conn)
		if err != nil {
			http.Error(w, "Failed to fetch all product masters: "+err.Error(), http.StatusInternalServerError)
			return
		}
		// ▼▼▼【ここを修正】▼▼▼
		mastersMap := make(map[string]*model.ProductMaster)
		// ▲▲▲【修正ここまで】▲▲▲
		for _, m := range allMasters {
			mastersMap[m.ProductCode] = m
		}

		// 全ての取引レコードを取得
		rows, err := conn.Query("SELECT " + db.TransactionColumns + " FROM transaction_records")
		if err != nil {
			http.Error(w, "Failed to fetch all transaction records: "+err.Error(), http.StatusInternalServerError)
			return
		}
		defer rows.Close()

		var allRecords []model.TransactionRecord
		for rows.Next() {
			rec, err := db.ScanTransactionRecord(rows)
			if err != nil {
				http.Error(w, "Failed to scan transaction record: "+err.Error(), http.StatusInternalServerError)
				return
			}
			allRecords = append(allRecords, *rec)
		}

		if len(allRecords) == 0 {
			w.Header().Set("Content-Type", "application/json")
			json.NewEncoder(w).Encode(map[string]string{"message": "再計算対象の取引データはありませんでした。"})
			return
		}

		// バッチ処理で更新
		const batchSize = 500
		updatedCount := 0
		for i := 0; i < len(allRecords); i += batchSize {
			end := i + batchSize
			if end > len(allRecords) {
				end = len(allRecords)
			}
			batch := allRecords[i:end]

			tx, err := conn.Begin()
			if err != nil {
				http.Error(w, "Failed to start transaction: "+err.Error(), http.StatusInternalServerError)
				return
			}

			for _, rec := range batch {
				master, ok := mastersMap[rec.JanCode]
				if !ok {
					continue
				}

				// 1. 最新のマスター情報をレコードにマッピング
				mappers.MapProductMasterToTransaction(&rec, master)

				// 2. 数量を再計算
				if rec.JanQuantity > 0 && master.JanPackInnerQty > 0 {
					rec.YjQuantity = rec.JanQuantity * master.JanPackInnerQty
				} else if rec.YjQuantity > 0 && rec.JanQuantity == 0 && master.JanPackInnerQty > 0 {
					rec.JanQuantity = rec.YjQuantity / master.JanPackInnerQty
				}

				// 3. 金額を再計算 (取引種別に応じてロジックを分岐)
				switch rec.Flag {
				case 1: // 納品
					// rec.PurchasePriceには「取引時点での包装納入価」が保存されているはず。
					// もしそれが0で、rec.UnitPriceに古い箱単価が入っている場合はそれを使用する。
					packagePurchasePrice := rec.PurchasePrice
					if packagePurchasePrice <= 0 && rec.UnitPrice > 0 {
						packagePurchasePrice = rec.UnitPrice
					}

					// 正しいYJ単位の単価を再計算
					if master.YjPackUnitQty > 0 && packagePurchasePrice > 0 {
						rec.UnitPrice = packagePurchasePrice / master.YjPackUnitQty
					}
					// 金額を再計算
					rec.Subtotal = rec.YjQuantity * rec.UnitPrice

				case 0, 3, 4, 5: // 棚卸、処方など
					rec.UnitPrice = master.NhiPrice // 薬価を単価とする
					rec.Subtotal = rec.YjQuantity * rec.UnitPrice

				default: // その他
					// 数量の変更を反映するため金額は再計算するが、単価は維持する
					rec.Subtotal = rec.YjQuantity * rec.UnitPrice
				}

				// 4. 処理ステータスを更新
				if rec.ProcessFlagMA == "PROVISIONAL" && master.Origin == "JCSHMS" {
					rec.ProcessFlagMA = "COMPLETE"
				}

				// 5. データベースを更新
				if err := db.UpdateFullTransactionInTx(tx, &rec); err != nil {
					tx.Rollback()
					http.Error(w, fmt.Sprintf("Failed to update record ID %d: %v", rec.ID, err), http.StatusInternalServerError)
					return
				}
				updatedCount++
			}

			if err := tx.Commit(); err != nil {
				tx.Rollback()
				http.Error(w, "Failed to commit transaction: "+err.Error(), http.StatusInternalServerError)
				return
			}
			log.Printf("Processed %d/%d records...", updatedCount, len(allRecords))
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{
			"message": fmt.Sprintf("全 %d 件の取引データを最新のマスター情報で更新しました。", updatedCount),
		})
	}
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\returns\handler.go -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\returns\handler.go

package returns

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"net/http"
	"sort"
	"strconv"
	"strings"
	"time"
	"wasabi/config"
	"wasabi/db"
	"wasabi/model"
)

// GenerateReturnCandidatesHandler は返品可能リストを生成します
func GenerateReturnCandidatesHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		q := r.URL.Query()

		coefficient, err := strconv.ParseFloat(q.Get("coefficient"), 64)
		if err != nil {
			coefficient = 1.5
		}

		cfg, err := config.LoadConfig()
		if err != nil {
			http.Error(w, "設定ファイルの読み込みに失敗しました: "+err.Error(), http.StatusInternalServerError)
			return
		}

		now := time.Now()
		endDate := "99991231"
		startDate := now.AddDate(0, 0, -cfg.CalculationPeriodDays)
		startDateStr := startDate.Format("20060102")

		filters := model.AggregationFilters{
			StartDate:   startDateStr,
			EndDate:     endDate,
			KanaName:    q.Get("kanaName"),
			DosageForm:  q.Get("dosageForm"),
			ShelfNumber: q.Get("shelfNumber"),
			Coefficient: coefficient,
		}

		// ステップ1: 過去のデータから使用量を分析し、発注点を計算する
		yjGroups, err := db.GetStockLedger(conn, filters)
		if err != nil {
			http.Error(w, "Failed to get stock ledger: "+err.Error(), http.StatusInternalServerError)
			return
		}

		// ステップ2: 「今現在」のリアルタイム在庫を取得する
		currentStockMap, err := db.GetAllCurrentStockMap(conn)
		if err != nil {
			http.Error(w, "Failed to get current stock map: "+err.Error(), http.StatusInternalServerError)
			return
		}

		var returnCandidates []model.StockLedgerYJGroup
		for _, group := range yjGroups {
			var returnablePackages []model.StockLedgerPackageGroup
			isGroupAdded := false

			for _, pkg := range group.PackageLedgers {
				// ステップ3: 包装ごとに「今現在」の在庫を計算する
				var currentStockForPackage float64
				var productCodesInPackage []string
				for _, master := range pkg.Masters {
					currentStockForPackage += currentStockMap[master.ProductCode]
					productCodesInPackage = append(productCodesInPackage, master.ProductCode)
				}

				trueEffectiveBalance := currentStockForPackage

				// ステップ4: 「発注点」と「今現在の有効在庫」を比較する
				if len(pkg.Masters) > 0 {
					yjPackUnitQty := pkg.Masters[0].YjPackUnitQty
					// ▼▼▼【ここから修正】▼▼▼
					// 「発注点 > 0」の条件を削除
					if trueEffectiveBalance > (pkg.ReorderPoint + yjPackUnitQty) {
						// ▲▲▲【修正ここまで】▲▲▲

						pkg.EffectiveEndingBalance = trueEffectiveBalance

						if len(productCodesInPackage) > 0 {
							deliveryHistory, err := getDeliveryHistory(conn, productCodesInPackage, startDateStr, endDate)
							if err != nil {
								fmt.Printf("WARN: Failed to get delivery history for package %s: %v\n", pkg.PackageKey, err)
							}
							pkg.DeliveryHistory = deliveryHistory
						}

						returnablePackages = append(returnablePackages, pkg)
						isGroupAdded = true
					}
				}
			}

			if isGroupAdded {
				newGroup := group
				newGroup.PackageLedgers = returnablePackages
				returnCandidates = append(returnCandidates, newGroup)
			}
		}

		// 返品候補リストを剤型優先、次にカナ名順でソートする
		sort.Slice(returnCandidates, func(i, j int) bool {
			prio := map[string]int{
				"1": 1, "内": 1, "2": 2, "外": 2, "3": 3, "注": 3,
				"4": 4, "歯": 4, "5": 5, "機": 5, "6": 6, "他": 6,
			}

			var masterI, masterJ *model.ProductMaster
			if len(returnCandidates[i].PackageLedgers) > 0 && len(returnCandidates[i].PackageLedgers[0].Masters) > 0 {
				masterI = returnCandidates[i].PackageLedgers[0].Masters[0]
			}
			if len(returnCandidates[j].PackageLedgers) > 0 && len(returnCandidates[j].PackageLedgers[0].Masters) > 0 {
				masterJ = returnCandidates[j].PackageLedgers[0].Masters[0]
			}

			if masterI == nil || masterJ == nil {
				return returnCandidates[i].YjCode < returnCandidates[j].YjCode
			}

			prioI, okI := prio[strings.TrimSpace(masterI.UsageClassification)]
			if !okI {
				prioI = 7
			}
			prioJ, okJ := prio[strings.TrimSpace(masterJ.UsageClassification)]
			if !okJ {
				prioJ = 7
			}

			if prioI != prioJ {
				return prioI < prioJ
			}
			return masterI.KanaName < masterJ.KanaName
		})

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(returnCandidates)
	}
}

func getDeliveryHistory(conn *sql.DB, productCodes []string, startDate, endDate string) ([]model.TransactionRecord, error) {
	placeholders := strings.Repeat("?,", len(productCodes)-1) + "?"
	query := fmt.Sprintf(`SELECT `+db.TransactionColumns+` FROM transaction_records 
		WHERE flag = 1 AND jan_code IN (%s) AND transaction_date BETWEEN ? AND ? 
		ORDER BY transaction_date DESC, id DESC`, placeholders)

	args := make([]interface{}, 0, len(productCodes)+2)
	for _, code := range productCodes {
		args = append(args, code)
	}
	args = append(args, startDate, endDate)

	rows, err := conn.Query(query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var records []model.TransactionRecord
	for rows.Next() {
		r, err := db.ScanTransactionRecord(rows)
		if err != nil {
			return nil, err
		}
		records = append(records, *r)
	}
	return records, nil
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\search\handler.go -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\search\handler.go
package search

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"net/http"
	"wasabi/db"
	"wasabi/model"
	"wasabi/units"
)

/**
 * @brief 製品名・カナ名でJCSHMSマスターを検索するAPIハンドラ (/api/products/search)
 * @param conn データベース接続
 * @return http.HandlerFunc HTTPリクエストを処理するハンドラ関数
 * @details
 * クエリパラメータ "q" で検索キーワードを受け取ります。キーワードは2文字以上必要です。
 * 製品検索モーダルなどで使用されます。
 */
func SearchJcshmsByNameHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		query := r.URL.Query().Get("q")
		if len(query) < 2 {
			http.Error(w, "Query must be at least 2 characters", http.StatusBadRequest)
			return
		}
		results, err := db.SearchJcshmsByName(conn, query)
		if err != nil {
			http.Error(w, "Failed to search products", http.StatusInternalServerError)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(results)
	}
}

/**
 * @brief 製品名・カナ名で製品マスター全体を検索するAPIハンドラ (/api/masters/search_all)
 * @param conn データベース接続
 * @return http.HandlerFunc HTTPリクエストを処理するハンドラ関数
 * @details
 * クエリパラメータ "q" で検索キーワードを受け取ります。キーワードは2文字以上必要です。
 * JCSHMS由来でない、手動登録されたマスターも検索対象に含みます。
 */
func SearchAllMastersHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		query := r.URL.Query().Get("q")
		if len(query) < 2 {
			http.Error(w, "Query must be at least 2 characters", http.StatusBadRequest)
			return
		}
		results, err := db.SearchAllProductMastersByName(conn, query)
		if err != nil {
			http.Error(w, "Failed to search masters", http.StatusInternalServerError)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(results)
	}
}

/**
 * @brief YJコードに紐づく製品マスターのリストを取得するAPIハンドラ (/api/masters/by_yj_code)
 * @param conn データベース接続
 * @return http.HandlerFunc HTTPリクエストを処理するハンドラ関数
 * @details
 * クエリパラメータ "yj_code" でYJコードを受け取ります。
 * 「棚卸調整」画面などで、同一YJコードの包装バリエーションを全て取得するために使用されます。
 */
func GetMastersByYjCodeHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		yjCode := r.URL.Query().Get("yj_code")
		if yjCode == "" {
			http.Error(w, "yj_code parameter is required", http.StatusBadRequest)
			return
		}
		results, err := db.GetProductMastersByYjCode(conn, yjCode)
		if err != nil {
			http.Error(w, "Failed to get masters by yj_code", http.StatusInternalServerError)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(results)
	}
}

// ▼▼▼【ここから修正】▼▼▼
// GetProductByGS1Handler はGS1コードを元に製品情報を検索し、製品マスター全体を返します。
func GetProductByGS1Handler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		gs1Code := r.URL.Query().Get("gs1_code")
		if gs1Code == "" {
			http.Error(w, "gs1_code is required", http.StatusBadRequest)
			return
		}

		master, err := db.GetProductMasterByGS1Code(conn, gs1Code)
		if err != nil {
			http.Error(w, "Failed to get product by gs1 code: "+err.Error(), http.StatusInternalServerError)
			return
		}

		if master == nil {
			http.Error(w, "Product not found", http.StatusNotFound)
			return
		}

		// 包装仕様の文字列を生成するために一時的な構造体にデータを詰め替える
		tempJcshms := model.JCShms{
			JC037: master.PackageForm,
			JC039: master.YjUnitName,
			JC044: master.YjPackUnitQty,
			JA006: sql.NullFloat64{Float64: master.JanPackInnerQty, Valid: true},
			JA008: sql.NullFloat64{Float64: master.JanPackUnitQty, Valid: true},
			JA007: sql.NullString{String: fmt.Sprintf("%d", master.JanUnitCode), Valid: true},
		}
		// JAN単位名を解決する
		var janUnitName string
		if master.JanUnitCode == 0 {
			janUnitName = master.YjUnitName
		} else {
			janUnitName = units.ResolveName(fmt.Sprintf("%d", master.JanUnitCode))
		}

		// 画面表示用のViewモデルに変換
		masterView := model.ProductMasterView{
			ProductMaster:        *master,
			FormattedPackageSpec: units.FormatPackageSpec(&tempJcshms),
			JanUnitName:          janUnitName,
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(masterView)
	}
}

// ▲▲▲【修正ここまで】▲▲▲


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\sequence\handler.go -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\sequence\handler.go

package sequence

import (
	"database/sql"
	"encoding/json"
	"net/http"
	"strings"
	"wasabi/db"
)

// GetNextSequenceHandler は、指定されたシーケンスの次の値を返します。
func GetNextSequenceHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// URLからシーケンス名を取得 (例: /api/sequence/next/MA2Y -> MA2Y)
		sequenceName := strings.TrimPrefix(r.URL.Path, "/api/sequence/next/")
		if sequenceName == "" {
			http.Error(w, "Sequence name is required.", http.StatusBadRequest)
			return
		}

		var prefix string
		var padding int

		// シーケンス名に応じた設定
		switch sequenceName {
		case "MA2Y":
			prefix = "MA2Y"
			padding = 8
		case "CL":
			prefix = "CL"
			padding = 4
		default:
			http.Error(w, "Unknown sequence name.", http.StatusBadRequest)
			return
		}

		tx, err := conn.Begin()
		if err != nil {
			http.Error(w, "Failed to start transaction", http.StatusInternalServerError)
			return
		}
		defer tx.Rollback()

		nextCode, err := db.NextSequenceInTx(tx, sequenceName, prefix, padding)
		if err != nil {
			http.Error(w, "Failed to get next sequence: "+err.Error(), http.StatusInternalServerError)
			return
		}

		if err := tx.Commit(); err != nil {
			http.Error(w, "Failed to commit transaction", http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{"nextCode": nextCode})
	}
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\settings\handler.go -----
package settings

import (
	"database/sql"
	"encoding/json"
	"net/http"
	"strings"
	"wasabi/config"
	"wasabi/db"
	"wasabi/model"
)

// GetSettingsHandler returns the current settings.
func GetSettingsHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		cfg, err := config.LoadConfig()
		if err != nil {
			http.Error(w, "Failed to load settings: "+err.Error(), http.StatusInternalServerError)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(cfg)
	}
}

// SaveSettingsHandler saves the settings.
// SaveSettingsHandler saves the settings.
func SaveSettingsHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var payload config.Config
		if err := json.NewDecoder(r.Body).Decode(&payload); err != nil {
			http.Error(w, "Invalid request body", http.StatusBadRequest)
			return
		}

		currentSettings, err := config.LoadConfig()
		if err != nil {
			http.Error(w, "Failed to load current settings", http.StatusInternalServerError)
			return
		}

		currentSettings.EmednetUserID = payload.EmednetUserID
		currentSettings.EmednetPassword = payload.EmednetPassword
		currentSettings.EdeUserID = payload.EdeUserID
		currentSettings.EdePassword = payload.EdePassword
		currentSettings.UsageFolderPath = payload.UsageFolderPath
		currentSettings.CalculationPeriodDays = payload.CalculationPeriodDays
		// ▼▼▼【ここに追加】▼▼▼
		currentSettings.EdgePath = payload.EdgePath // Edgeパスをマージ
		// ▲▲▲【追加ここまで】▲▲▲

		if err := config.SaveConfig(currentSettings); err != nil {
			http.Error(w, "Failed to save settings: "+err.Error(), http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{"message": "設定を保存しました。"})
	}
}

// WholesalersHandler は卸業者に関するリクエストを処理します。
func WholesalersHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		switch r.Method {
		case http.MethodGet:
			wholesalers, err := db.GetAllWholesalers(conn)
			if err != nil {
				http.Error(w, "Failed to get wholesalers", http.StatusInternalServerError)
				return
			}
			w.Header().Set("Content-Type", "application/json")
			json.NewEncoder(w).Encode(wholesalers)

		case http.MethodPost:
			var payload model.Wholesaler
			if err := json.NewDecoder(r.Body).Decode(&payload); err != nil {
				http.Error(w, "Invalid request body", http.StatusBadRequest)
				return
			}
			if payload.Code == "" || payload.Name == "" {
				http.Error(w, "Code and Name are required", http.StatusBadRequest)
				return
			}
			if err := db.CreateWholesaler(conn, payload.Code, payload.Name); err != nil {
				http.Error(w, "Failed to create wholesaler", http.StatusInternalServerError)
				return
			}
			w.WriteHeader(http.StatusCreated)
			json.NewEncoder(w).Encode(map[string]string{"message": "卸業者を追加しました。"})

		case http.MethodDelete:
			code := strings.TrimPrefix(r.URL.Path, "/api/settings/wholesalers/")
			if code == "" {
				http.Error(w, "Wholesaler code is required", http.StatusBadRequest)
				return
			}
			if err := db.DeleteWholesaler(conn, code); err != nil {
				http.Error(w, "Failed to delete wholesaler", http.StatusInternalServerError)
				return
			}
			json.NewEncoder(w).Encode(map[string]string{"message": "卸業者を削除しました。"})

		default:
			http.Error(w, "Method Not Allowed", http.StatusMethodNotAllowed)
		}
	}
}

// ClearTransactionsHandler は全ての取引データを削除するリクエストを処理します。
func ClearTransactionsHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		if r.Method != http.MethodPost {
			http.Error(w, "Method Not Allowed", http.StatusMethodNotAllowed)
			return
		}

		if err := db.ClearAllTransactions(conn); err != nil {
			http.Error(w, "Failed to clear all transactions: "+err.Error(), http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{"message": "全ての取引データを削除しました。"})
	}
}

func ClearMastersHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		if r.Method != http.MethodPost {
			http.Error(w, "Method Not Allowed", http.StatusMethodNotAllowed)
			return
		}

		tx, err := conn.Begin()
		if err != nil {
			http.Error(w, "Failed to start transaction", http.StatusInternalServerError)
			return
		}
		defer tx.Rollback()

		if err := db.ClearAllProductMasters(tx); err != nil {
			http.Error(w, "Failed to clear all product masters: "+err.Error(), http.StatusInternalServerError)
			return
		}

		if err := tx.Commit(); err != nil {
			http.Error(w, "Failed to commit transaction", http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{"message": "全ての製品マスターを削除しました。"})
	}
}

// GetUsagePathHandlerは設定からusageFolderPathの値のみを返します。
func GetUsagePathHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		cfg, err := config.LoadConfig()
		if err != nil {
			http.Error(w, "設定ファイルの読み込みに失敗しました: "+err.Error(), http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{
			"path": cfg.UsageFolderPath,
		})
	}
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\css\inout.css -----
.inout-view-container {
    display: flex;
    flex-direction: column;
    gap: 16px;
}

.inout-header-controls {
    display: flex;
    flex-wrap: wrap;
    gap: 10px 16px;
    padding: 16px;
    border: 1px solid #000;
    background-color: #f7f7f7;
    align-items: flex-end;
}

.inout-header-controls .field-group {
    display: flex;
    flex-direction: column;
    gap: 4px;
}
.inout-header-controls .field-group label {
    font-size: 12px;
    font-weight: bold;
}
.inout-header-controls .field-group input,
.inout-header-controls .field-group select {
    padding: 6px;
    border: 1px solid #000;
    font-size: 14px;
    min-width: 150px;
}
.inout-header-controls .buttons-group {
    display: flex;
    gap: 8px;
    margin-left: auto;
}

.inout-details-header {
    text-align: right;
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\css\styles.css -----
/* C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\css\styles.css (全体) */
* { margin: 0; padding: 0; box-sizing: border-box; }
body { font-family: sans-serif; padding: 10px; background-color: #f4f4f4; }
.hidden { display: none !important; }

/* モーダル表示中にbodyのスクロールを禁止する */
.modal-open {
    overflow: hidden;
}

header {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 2px 4px;
    padding: 2px;
    border-bottom: 1px solid #ccc;
    margin-bottom: 5px;
    background-color: #ffffff;
    position: sticky;
    top: 0;
    z-index: 100;
}

.btn {
    font-size: inherit;      /* 文字サイズを通常のHTMLと同じにする */
    padding: 2px 5px;        /* 余白を上下に2px、左右に5pxに設定 */
    min-width: 75px;         /* ボタンの最小幅を75pxに設定 */
    text-align: center;      /* 文字を中央揃えにする */
    vertical-align: middle;  /* 隣接する要素との垂直方向の位置を調整 */
    background-color: #e9ecef;
    border: 1px solid #ced4da;
    border-radius: 4px;
    cursor: pointer;
}

.btn:hover { background-color: #dee2e6; }

.filter-container, .inout-header-controls {
    gap: 5px 10px;
    padding: 5px;
    margin-bottom: 5px;
}

table { border-collapse: collapse; width: 100%; table-layout: fixed; }
th, td { border: 1px solid black; padding: 4px; vertical-align: middle; }
th { text-align: center; background-color: #f0f0f0; }
.yj-jan-code { overflow: hidden; white-space: nowrap; text-overflow: ellipsis; }
.left { text-align: left; }
.right { text-align: right; }

.data-table td input[type="text"],
.data-table td input[type="number"] {
    width: 100%;
    border: 1px solid #999;
    padding: 4px;
    font-size: 11pt;
}

#loading-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); display: flex; flex-direction: column; justify-content: center; align-items: center; z-index: 9999; color: white; }
.spinner { border: 5px solid #f3f3f3; border-top: 5px solid #0d6efd; border-radius: 50%; width: 50px; height: 50px; animation: spin 1s linear infinite; margin-bottom: 10px; }
@keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }

.notification-box { position: fixed; top: -100px; left: 50%; transform: translateX(-50%); padding: 15px 25px; border-radius: 5px; color: white; font-size: 16px; z-index: 10000; transition: top 0.5s; }
.notification-box.show { top: 20px; }
.notification-box.success { background-color: #198754; }
.notification-box.error { background-color: #ff0019; }

.modal-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.6); display: flex; align-items: center; justify-content: center; z-index: 2000; }
.modal-content { background-color: #ffffff; border: 1px solid #000000; padding: 20px; width: 80%; max-width: 900px; max-height: 90vh; display: flex; flex-direction: column; }
.modal-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; }
.close-button { font-size: 24px; border: none; background: none; cursor: pointer; }

.modal-body {
    flex-grow: 1; /* 親要素(.modal-content)の高さに合わせて伸縮 */
    overflow-y: auto; /* 内容がはみ出したら縦スクロールバーを表示 */
}

.view-title, .view-subtitle, .modal-title {
    font-size: 1em;
    font-weight: bold;
    margin: 0;
    padding: 5px 0;
}

.agg-yj-header { background-color: #343a40; color: white; padding: 4px; margin-top: 10px; font-weight: bold; font-size: 1em; display: flex; align-items: center; }
.agg-pkg-header { background-color: #e9ecef; padding: 4px; border: 1px solid #ccc; border-bottom: none; font-weight: bold; font-size: 1em; }
.agg-yj-header .product-name { margin-left: 20px; flex-grow: 1; }

.tx-return, .tx-return td {
    color: #dc3545; /* 赤色 */
    font-weight: bold;
}

.tx-inventory, .tx-inventory td {
    color: #0d6efd; /* 青色 */
    font-weight: bold;
}

.provisional-order-item {
    background-color: #e9ecef !important; /* 薄いグレー */
    color: #6c757d; /* やや薄い文字色 */
}

/* ▼▼▼【ここから修正】▼▼▼ */
.provisional-order-item td:not(.order-actions-cell) {
    text-decoration: line-through; /* 取り消し線 */
}
/* ▲▲▲【修正ここまで】▲▲▲ */

.provisional-order-item select:disabled,
.provisional-order-item input:disabled {
    background-color: #f8f9fa; /* 背景を少し明るく */
    cursor: not-allowed; /* 操作不可カーソル */
}

/* ▼▼▼ [ここから追加] ボタンのビビッドカラー設定 ▼▼▼ */
.btn-red { background-color: #ff0000; color: white; border-color: #d90000; }
.btn-red:hover { background-color: #d90000; }

.btn-rose { background-color: #ff007f; color: white; border-color: #d9006c; }
.btn-rose:hover { background-color: #d9006c; }

.btn-magenta { background-color: #ff00ff; color: white; border-color: #d900d9; }
.btn-magenta:hover { background-color: #d900d9; }

.btn-violet { background-color: #7f00ff; color: white; border-color: #6c00d9; }
.btn-violet:hover { background-color: #6c00d9; }

.btn-blue { background-color: #0000ff; color: white; border-color: #0000d9; }
.btn-blue:hover { background-color: #0000d9; }

.btn-azure { background-color: #007fff; color: white; border-color: #006cd9; }
.btn-azure:hover { background-color: #006cd9; }

.btn-cyan { background-color: #00ffff; color: black; border-color: #00d9d9; }
.btn-cyan:hover { background-color: #00d9d9; }

.btn-spring-green { background-color: #00ff7f; color: black; border-color: #00d96c; }
.btn-spring-green:hover { background-color: #00d96c; }

.btn-green { background-color: #00ff00; color: black; border-color: #00d900; }
.btn-green:hover { background-color: #00d900; }

.btn-chartreuse { background-color: #7fff00; color: black; border-color: #6cd900; }
.btn-chartreuse:hover { background-color: #6cd900; }

.btn-yellow { background-color: #ffff00; color: black; border-color: #d9d900; }
.btn-yellow:hover { background-color: #d9d900; }

.btn-orange { background-color: #ff7f00; color: white; border-color: #d96c00; }
.btn-orange:hover { background-color: #d96c00; }
/* ▲▲▲ [追加ここまで] ▲▲▲ */

#scanned-items-list {
    background-color: #f8f9fa;
}
.scanned-item {
    display: flex;
    justify-content: space-between;
    padding: 4px 8px;
    border-bottom: 1px solid #e9ecef;
}
.scanned-item:last-child {
    border-bottom: none;
}
.scanned-item-name {
    flex-grow: 1;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    margin-right: 10px;
}
.scanned-item-count {
    font-weight: bold;
}
.processing-indicator:not(.hidden) {
    display: block !important;
}

/* ▼▼▼【ここに追加】▼▼▼ */
.scanned-item {
    display: flex;
    justify-content: space-between;
    align-items: center; /* 垂直方向中央揃え */
    padding: 4px 8px;
    border-bottom: 1px solid #e9ecef;
    font-size: 12px; /* 少し小さく */
}
.scanned-item:last-child {
    border-bottom: none;
}
.scanned-item-name {
    flex-grow: 1;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    margin-right: 10px;
}
.scanned-item-count {
    font-weight: bold;
    min-width: 30px; /* カウント部分の幅を確保 */
    text-align: right;
}
#shelf-scanned-list .scanned-item-name {
    color: #555;
}
#shelf-scanned-list .scanned-item-name.resolved {
    color: #000; /* 品目名が解決したら黒文字に */
    font-weight: normal;
}
/* ▲▲▲【追加ここまで】▲▲▲ */

/* ▼▼▼ [修正点] 印刷用CSSを汎用的な仕組みに全面的に書き換え ▼▼▼ */
@media print {
  /* ページ設定: A4横向き */
  @page {
    size: A4 landscape;
    margin: 1cm;
  }

  /* 基本設定 */
  body {
    padding: 0 !important;
    background-color: #fff !important;
  }
  
  /* 印刷時に不要な要素（ヘッダーや操作ボタンなど）を非表示 */
  #search-modal, #loading-overlay, #notification-box,
  header, .btn, input, select, .filter-container, .inout-header-controls, .inout-details-header,
  .controls-grid, .settings-form-container, .entry-controls, .product-header .btn, .buttons-group,
  #valuation-print-controls {
    display: none !important;
  }
  
  /* mainタグ配下のビューを一旦すべて非表示に */
  main > div {
    display: none !important;
  }

  /* 「print-this-view」クラスが付いたビューのみを表示させる */
  main > div.print-this-view {
    display: block !important;
    border: none !important;
    padding: 0 !important;
  }

  /* ▼▼▼ [修正点] 印刷対象エリア内の不要な要素を非表示にする設定を追加 ▼▼▼ */
  .print-this-view #deadstock-output-container {
    display: none !important;
  }
  .print-this-view #deadstock-print-area {
    display: block !important;
  }
  /* ▲▲▲ 修正ここまで ▲▲▲ */


  /* 印刷するビュー内の要素のスタイルを統一 */
  .print-this-view, .print-this-view * {
    font-size: 9pt !important;
    color: black !important;
    background-color: transparent !important;
  }
  
  /* テーブルのスタイル */
  .print-this-view table, 
  .print-this-view th, 
  .print-this-view td {
    border: 1px solid #000;
    padding: 2px 4px !important;
  }
  
  .print-this-view table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 5px !important;
  }
  
  /* 印刷時の改ページ制御 */
  .print-this-view .agg-yj-header:first-child {
      page-break-before: auto;
  }
  .print-this-view thead {
    display: table-header-group;
  }
  .print-this-view tr {
    page-break-inside: avoid;
  }
    /* ▼▼▼【ここに追加】▼▼▼ */
  /* デッドストックリストの印刷時に、期間前取引履歴を非表示にする */
  .print-this-view .recent-history-container {
    display: none !important;
  }
  /* ▲▲▲【追加ここまで】▲▲▲ */
}
/* ▲▲▲ 修正ここまで ▲▲▲ */

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\aggregation.js -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\aggregation.js

import { hiraganaToKatakana, getLocalDateString } from './utils.js';
import { transactionTypeMap, createUploadTableHTML, renderUploadTableRows } from './common_table.js';

let view, runBtn, printBtn, outputContainer, kanaNameInput, dosageFormInput, coefficientInput, drugTypeCheckboxes, reorderNeededCheckbox, movementOnlyCheckbox;
let lastData = [];

function formatBalance(balance) {
    if (typeof balance === 'number') {
        return balance.toFixed(2);
    }
    return balance;
}

function renderResults() {
    let dataToRender = lastData;
    if (reorderNeededCheckbox.checked) {
        dataToRender = lastData.filter(yjGroup => yjGroup.isReorderNeeded)
            .map(yjGroup => ({
                ...yjGroup,
                packageLedgers: yjGroup.packageLedgers.filter(pkg => pkg.isReorderNeeded)
            }));
    }

    if (!dataToRender || dataToRender.length === 0) {
        outputContainer.innerHTML = "<p>対象データが見つかりませんでした。</p>";
        return;
    }

    let html = dataToRender.map((yjGroup, yjIndex) => {
        let yjReorderPointText = formatBalance(yjGroup.totalReorderPoint);
        if (yjGroup.totalPrecompounded > 0) {
            yjReorderPointText = `${formatBalance(yjGroup.totalBaseReorderPoint)} + 予${formatBalance(yjGroup.totalPrecompounded)} = ${formatBalance(yjGroup.totalReorderPoint)}`;
        }
        
        const yjHeader = `
            <div class="agg-yj-header" ${yjGroup.isReorderNeeded ? 'style="background-color: #ff0015ff; color: white;"' : ''}>
                <div style="flex-grow: 1;">
                    <span>YJ: ${yjGroup.yjCode}</span>
                    <span class="product-name">${yjGroup.productName}</span>
                    <span class="balance-info">
                        在庫: ${formatBalance(yjGroup.endingBalance)} | 
                        発注点: ${yjReorderPointText} | 
                        変動: ${formatBalance(yjGroup.netChange)}
                    </span>
                </div>
                <button class="btn inventory-adjust-link-btn" data-yj-code="${yjGroup.yjCode}" style="margin-left: 15px; background-color: #ffc107; color: black;">棚卸調整</button>
            </div>
        `;
     
        const packagesHtml = yjGroup.packageLedgers.map((pkg, pkgIndex) => {
            const tableId = `agg-table-${yjIndex}-${pkgIndex}`;
            let pkgReorderPointText = formatBalance(pkg.reorderPoint);
            if (pkg.precompoundedTotal > 0) {
                pkgReorderPointText = `${formatBalance(pkg.baseReorderPoint)} + 予${formatBalance(pkg.precompoundedTotal)} = ${formatBalance(pkg.reorderPoint)}`;
            }

            const pkgHeader = `
                <div class="agg-pkg-header">
                    <span>包装: ${pkg.packageKey}</span>
                    <span class="balance-info">
                        在庫: ${formatBalance(pkg.endingBalance)} |
                        在庫(発注残含): ${formatBalance(pkg.effectiveEndingBalance)} | 
                        発注点: ${pkgReorderPointText} |  
                        変動: ${formatBalance(pkg.netChange)}
                    </span>
                </div>
            `;
            const tableShell = createUploadTableHTML(tableId);
            const tableBodyContent = renderUploadTableRows(pkg.transactions);
            
            const fullTableHtml = tableShell.replace('<tbody></tbody>', `<tbody>${tableBodyContent}</tbody>`);
            return pkgHeader + `<div id="${tableId}-container">${fullTableHtml}</div>`;
        }).join('');

        return yjHeader + packagesHtml;
    }).join('');

    outputContainer.innerHTML = html;
}

export function initAggregation() {
    view = document.getElementById('aggregation-view');
    if (!view) return;
    runBtn = document.getElementById('run-aggregation-btn');
    printBtn = document.getElementById('print-aggregation-btn');
    outputContainer = document.getElementById('aggregation-output-container');
    kanaNameInput = document.getElementById('agg-kanaName');
    dosageFormInput = document.getElementById('agg-dosageForm');
    coefficientInput = document.getElementById('reorder-coefficient');
    drugTypeCheckboxes = document.querySelectorAll('input[name="drugType"]');
    reorderNeededCheckbox = document.getElementById('reorder-needed-filter');
    movementOnlyCheckbox = document.getElementById('movement-only-filter');
    
    printBtn.addEventListener('click', () => {
        if (lastData && lastData.length > 0) {
            document.getElementById('valuation-view').classList.remove('print-this-view');
            view.classList.add('print-this-view');
            window.print();
        } else {
            window.showNotification('先に「集計実行」を押してデータを表示してください。', 'error');
        }
    });

    window.addEventListener('afterprint', () => {
        view.classList.remove('print-this-view');
    });
    reorderNeededCheckbox.addEventListener('change', () => renderResults());
    
    // 棚卸調整ボタンのクリックイベント
    outputContainer.addEventListener('click', (e) => {
        const target = e.target;
        if (target.classList.contains('inventory-adjust-link-btn')) {
            const yjCode = target.dataset.yjCode;
            const event = new CustomEvent('navigateToInventoryAdjustment', {
                detail: { yjCode: yjCode },
                bubbles: true
            });
            target.dispatchEvent(event);
        }
    });

    runBtn.addEventListener('click', async () => {
        window.showLoading('データを取得・計算中...');

        const selectedDrugTypes = Array.from(drugTypeCheckboxes)
            .filter(cb => cb.checked)
            .map(cb => cb.value)
            .join(',');

        const params = new URLSearchParams({
            kanaName: hiraganaToKatakana(kanaNameInput.value),
            dosageForm: dosageFormInput.value,
            coefficient: coefficientInput.value,
            drugTypes: selectedDrugTypes,
            movementOnly: movementOnlyCheckbox.checked,
        });

        try {
            const res = await fetch(`/api/aggregation?${params.toString()}`);
            if (!res.ok) {
                const errText = await res.text();
                throw new Error(errText || '集計に失敗しました');
            }
            lastData = await res.json();
            
            window.showLoading('集計結果を描画中...');
            
            setTimeout(() => {
                try {
                    renderResults();
                    window.hideLoading();
                    window.showNotification('描画が完了しました。', 'success');
                } catch (renderErr) {
                    outputContainer.innerHTML = `<p style="color:red;">描画エラー: ${renderErr.message}</p>`;
                    window.hideLoading();
                    window.showNotification('結果の描画中にエラーが発生しました。', 'error');
                }
            }, 10);

        } catch (err) {
            outputContainer.innerHTML = `<p style="color:red;">エラー: ${err.message}</p>`;
            window.hideLoading();
            window.showNotification(err.message, 'error');
        }
    });
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\app.js -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\app.js

import { loadMasterData } from './master_data.js';
import { initInOut, resetInOutView } from './inout.js';
import { initDatUpload } from './dat.js';
import { initUsageUpload } from './usage.js';
import { initInventoryUpload } from './inventory.js';
import { initInventoryAdjustment } from './inventory_adjustment.js';
import { initInventoryHistory } from './inventory_history.js';
import { initLedgerView } from './ledger.js';
import { initAggregation } from './aggregation.js';
import { initMasterEdit, resetMasterEditView } from './master_edit.js';
import { initReprocessButton } from './reprocess.js';
import { initBackupButtons } from './backup.js';
import { initModal } from './inout_modal.js';
import { initDeadStock } from './deadstock.js';
import { initSettings, onViewShow as onSettingsViewShow } from './settings.js';
import { initMedrec } from './medrec.js';
import { initManualInventory } from './manual_inventory.js';
import { initPrecomp, resetPrecompView } from './precomp.js';
import { initOrders } from './orders.js';
import { initJcshmsUpdate } from './jcshms_update.js';
import { initBackorderView } from './backorder.js';
import { initValuationView } from './valuation.js';
import { initPricingView } from './pricing.js';
import { initReturnsView } from './returns.js';
import { initEdge } from './edge.js';

window.showLoading = (message = '処理中...') => {
    const overlay = document.getElementById('loading-overlay');
    const messageEl = document.getElementById('loading-message');
    if (messageEl) {
        messageEl.textContent = message;
    }
    if (overlay) {
        overlay.classList.remove('hidden');
    }
};

window.hideLoading = () => document.getElementById('loading-overlay').classList.add('hidden');
window.showNotification = (message, type = 'success') => {
    const notificationBox = document.getElementById('notification-box');
    notificationBox.textContent = message;
    notificationBox.className = 'notification-box';
    notificationBox.classList.add(type, 'show');
    setTimeout(() => { notificationBox.classList.remove('show'); }, 3000);
};
document.addEventListener('DOMContentLoaded', async () => {
    
    await loadMasterData();
    const allViews = document.querySelectorAll('main > div[id$="-view"]');
    const inOutBtn = document.getElementById('inOutViewBtn');
    const datBtn = document.getElementById('datBtn');
    const usageBtn = document.getElementById('usageBtn');
    const inventoryBtn = document.getElementById('inventoryBtn');
    const inventoryAdjustmentBtn = document.getElementById('inventoryAdjustmentBtn');
    const inventoryHistoryBtn = document.getElementById('inventoryHistoryBtn');
    const ledgerBtn = document.getElementById('ledgerBtn');
    const manualInventoryBtn = document.getElementById('manualInventoryBtn');
    const aggregationBtn = document.getElementById('aggregationBtn');
    const masterEditBtn = document.getElementById('masterEditViewBtn');
    const settingsBtn = document.getElementById('settingsBtn');
    const datFileInput = document.getElementById('datFileInput');
    const usageFileInput = document.getElementById('usageFileInput');
    const inventoryFileInput = document.getElementById('inventoryFileInput');
    const uploadOutputContainer = document.getElementById('upload-output-container');
    const inventoryOutputContainer = document.getElementById('inventory-output-container');
    const aggregationOutputContainer = document.getElementById('aggregation-output-container');
    const deadStockBtn = document.getElementById('deadStockBtn');
    const deadstockOutputContainer = document.getElementById('deadstock-output-container');
    const precompBtn = document.getElementById('precompBtn');
    const orderBtn = document.getElementById('orderBtn');
    const backorderBtn = document.getElementById('backorderBtn');
    const valuationBtn = document.getElementById('valuationBtn');
    const pricingBtn = document.getElementById('pricingBtn');
    const returnsBtn = document.getElementById('returnsBtn');
    
    document.querySelectorAll('input[type="text"], input[type="password"], input[type="number"], input[type="date"]').forEach(input => {
        input.setAttribute('autocomplete', 'off');
    });

    initInOut();
    initDatUpload();
    initUsageUpload();
    initInventoryUpload();
    initInventoryAdjustment();
    initInventoryHistory();
    initLedgerView();
    initAggregation();
    initMasterEdit();
    initReprocessButton();
    initBackupButtons();
    initModal();
    initDeadStock();
    initSettings();
    initMedrec();
    initManualInventory();
    initPrecomp();
    initOrders();
    initJcshmsUpdate();
    initBackorderView();
    initValuationView();
    initPricingView();
    initReturnsView();
    initEdge();

    function showView(viewIdToShow) {
        const notificationBox = document.getElementById('notification-box');
        if (notificationBox) {
            notificationBox.classList.remove('show');
        }

        allViews.forEach(view => {
            view.classList.toggle('hidden', view.id !== viewIdToShow);
        });
    }

    // 棚卸調整画面への遷移イベントを捕捉する
    document.addEventListener('navigateToInventoryAdjustment', (e) => {
        const { yjCode } = e.detail;
        showView('inventory-adjustment-view');
        // 遷移先の画面に、データを読み込むためのイベントを発行する
        const event = new CustomEvent('loadInventoryAdjustment', { detail: { yjCode } });
        document.getElementById('inventory-adjustment-view').dispatchEvent(event);
    });
     // ▼▼▼【ここから追加】▼▼▼
    // マスター編集画面への遷移イベントを捕捉する
    document.addEventListener('navigateToMasterEdit', (e) => {
        const { productCode } = e.detail;
        showView('master-edit-view');
        // マスター編集画面に、特定の製品コードで絞り込むためのイベントを発行する
        const event = new CustomEvent('filterMasterEdit', { detail: { productCode } });
        document.getElementById('master-edit-view').dispatchEvent(event);
    });
    // ▲▲▲【追加ここまで】▲▲▲ 
    inOutBtn.addEventListener('click', () => { showView('in-out-view'); resetInOutView(); });
    datBtn.addEventListener('click', () => {
        showView('upload-view');
        document.getElementById('upload-view-title').textContent = `DAT File Upload`;
        if (uploadOutputContainer) uploadOutputContainer.innerHTML = '';
        datFileInput.click();
    });
    
    usageBtn.addEventListener('click', async () => {
        showView('upload-view');
        document.getElementById('upload-view-title').textContent = `USAGE File Import`;
        
        try {
            const res = await fetch('/api/config/usage_path');
            const config = await res.json();

            if (config.path) {
                document.dispatchEvent(new CustomEvent('importUsageFromPath'));
            } else {
                usageFileInput.click();
            }
        } catch (err) {
            window.showNotification('設定の読み込みに失敗しました。', 'error');
        }
    });

    inventoryBtn.addEventListener('click', () => {
        showView('inventory-view');
        if (inventoryOutputContainer) inventoryOutputContainer.innerHTML = '';
        inventoryFileInput.click();
    });
    manualInventoryBtn.addEventListener('click', () => {
        showView('manual-inventory-view');
        document.getElementById('manual-inventory-view').dispatchEvent(new Event('show'));
    });
    inventoryHistoryBtn.addEventListener('click', () => {
        showView('inventory-history-view');
    });
    ledgerBtn.addEventListener('click', () => {
        showView('ledger-view');
    });
    inventoryAdjustmentBtn.addEventListener('click', () => {
        showView('inventory-adjustment-view');
    });
    aggregationBtn.addEventListener('click', () => {
        if (aggregationOutputContainer) aggregationOutputContainer.innerHTML = '';
        showView('aggregation-view');
    });
    deadStockBtn.addEventListener('click', () => {
        if(deadstockOutputContainer) deadstockOutputContainer.innerHTML = '';
        showView('deadstock-view');
    });
    masterEditBtn.addEventListener('click', () => { showView('master-edit-view'); resetMasterEditView(); });
    settingsBtn.addEventListener('click', () => {
        showView('settings-view');
        onSettingsViewShow();
    });
    precompBtn.addEventListener('click', () => {
    showView('precomp-view');
    resetPrecompView();
    });
    orderBtn.addEventListener('click', () => showView('order-view'));
    backorderBtn.addEventListener('click', () => {
        showView('backorder-view');
        document.getElementById('backorder-view').dispatchEvent(new Event('show'));
    });
    valuationBtn.addEventListener('click', () => {
        showView('valuation-view');
    });
    pricingBtn.addEventListener('click', () => {
        showView('pricing-view');
        document.getElementById('pricing-view').dispatchEvent(new Event('show'));
    });
    returnsBtn.addEventListener('click', () => showView('returns-view'));
    
    showView('in-out-view');
    resetInOutView();
});

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\backorder.js -----
// C:\Dev\WASABI\static\js\backorder.js

let view, outputContainer;

function renderBackorders(data) {
    if (!data || data.length === 0) {
        outputContainer.innerHTML = "<p>現在、発注残はありません。</p>";
        return;
    }

    // ▼▼▼ [修正点] UIに一括操作ボタンとテーブルヘッダーのチェックボックスを追加 ▼▼▼
    let html = `
        <div class="controls-grid" style="margin-bottom: 10px; display: flex; gap: 10px;">
            <button class="btn" id="bulk-delete-backorder-btn" style="background-color: #dc3545; color: white;">選択した項目を一括削除</button>
            <button class="btn" id="delete-all-backorder-btn">表示されている項目を全て削除</button>
        </div>
        <table class="data-table">
            <thead>
                <tr>
                    <th style="width: 5%;"><input type="checkbox" id="select-all-backorders-checkbox"></th>
                    <th style="width: 10%;">発注日</th>
                    <th style="width: 10%;">YJコード</th>
                    <th style="width: 30%;">製品名</th>
                    <th style="width: 25%;">包装仕様</th>
                    <th style="width: 10%;">発注残数量</th>
                    <th style="width: 10%;">個別操作</th>
                </tr>
            </thead>
            <tbody>
    `;
    // ▲▲▲ 修正ここまで ▲▲▲

    data.forEach(bo => {
        const pkgSpec = bo.formattedPackageSpec;

        // ▼▼▼ [修正点] 行の先頭にチェックボックスを追加し、個別削除ボタンの文言を修正 ▼▼▼
        html += `
            <tr data-yj-code="${bo.yjCode}"
                data-package-form="${bo.packageForm}"
                data-jan-pack-inner-qty="${bo.janPackInnerQty}"
                data-yj-unit-name="${bo.yjUnitName}">
                <td class="center"><input type="checkbox" class="backorder-select-checkbox"></td>
                <td>${bo.orderDate}</td>
                <td>${bo.yjCode}</td>
                <td class="left">${bo.productName}</td>
                <td class="left">${pkgSpec}</td>
                <td class="right">${bo.yjQuantity.toFixed(2)}</td>
                <td class="center"><button class="btn delete-backorder-btn">削除</button></td>
            </tr>
        `;
        // ▲▲▲ 修正ここまで ▲▲▲
    });
    html += `</tbody></table>`;
    outputContainer.innerHTML = html;
}

async function loadAndRenderBackorders() {
    outputContainer.innerHTML = '<p>読み込み中...</p>';
    try {
        const res = await fetch('/api/backorders');
        if (!res.ok) throw new Error('発注残リストの読み込みに失敗しました。');
        const data = await res.json();
        renderBackorders(data);
    } catch (err) {
        outputContainer.innerHTML = `<p style="color:red;">${err.message}</p>`;
    }
}

// ▼▼▼ [修正点] イベント処理をイベント委譲方式にまとめ、一括削除ロジックを追加 ▼▼▼
async function handleBackorderEvents(e) {
    const target = e.target;

    // 個別削除ボタン
    if (target.classList.contains('delete-backorder-btn')) {
        const row = target.closest('tr');
        if (!confirm(`「${row.cells[3].textContent}」の発注残を削除しますか？`)) {
            return;
        }
        const payload = {
            yjCode: row.dataset.yjCode,
            packageForm: row.dataset.packageForm,
            janPackInnerQty: parseFloat(row.dataset.janPackInnerQty),
            yjUnitName: row.dataset.yjUnitName,
        };
        window.showLoading();
        try {
            const res = await fetch('/api/backorders/delete', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload),
            });
            const resData = await res.json();
            if (!res.ok) throw new Error(resData.message || '削除に失敗しました。');
            window.showNotification(resData.message, 'success');
            loadAndRenderBackorders();
        } catch (err) {
            window.showNotification(err.message, 'error');
        } finally {
            window.hideLoading();
        }
    }

    // 全選択チェックボックス
    if (target.id === 'select-all-backorders-checkbox') {
        const isChecked = target.checked;
        document.querySelectorAll('.backorder-select-checkbox').forEach(cb => cb.checked = isChecked);
    }

    // 全件削除ボタン
    if (target.id === 'delete-all-backorder-btn') {
        document.getElementById('select-all-backorders-checkbox').checked = true;
        document.querySelectorAll('.backorder-select-checkbox').forEach(cb => cb.checked = true);
        document.getElementById('bulk-delete-backorder-btn').click(); // 一括削除ボタンのクリックを擬似的に発火
    }

    // 選択項目の一括削除ボタン
    if (target.id === 'bulk-delete-backorder-btn') {
        const checkedRows = document.querySelectorAll('.backorder-select-checkbox:checked');
        if (checkedRows.length === 0) {
            window.showNotification('削除する項目が選択されていません。', 'error');
            return;
        }
        if (!confirm(`${checkedRows.length}件の発注残を削除します。よろしいですか？`)) {
            return;
        }

        const payload = Array.from(checkedRows).map(cb => {
            const row = cb.closest('tr');
            return {
                yjCode: row.dataset.yjCode,
                packageForm: row.dataset.packageForm,
                janPackInnerQty: parseFloat(row.dataset.janPackInnerQty),
                yjUnitName: row.dataset.yjUnitName,
            };
        });

        window.showLoading();
        try {
            const res = await fetch('/api/backorders/bulk_delete', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload),
            });
            const resData = await res.json();
            if (!res.ok) throw new Error(resData.message || '一括削除に失敗しました。');
            window.showNotification(resData.message, 'success');
            loadAndRenderBackorders();
        } catch (err) {
            window.showNotification(err.message, 'error');
        } finally {
            window.hideLoading();
        }
    }
}

export function initBackorderView() {
    view = document.getElementById('backorder-view');
    if (!view) return;
    outputContainer = document.getElementById('backorder-output-container');
    
    view.addEventListener('show', loadAndRenderBackorders);
    outputContainer.addEventListener('click', handleBackorderEvents);
}
// ▲▲▲ 修正ここまで ▲▲▲

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\backup.js -----
/**
 * ファイルアップロードを処理し、サーバーに送信する共通関数
 * @param {Event} event - ファイル入力のchangeイベント
 * @param {string} url - アップロード先のAPIエンドポイント
 */
async function handleFileUpload(event, url) {
    const fileInput = event.target;
    const file = fileInput.files[0];
    if (!file) return;

    const formData = new FormData();
    formData.append('file', file);
    
    window.showLoading();
    try {
        const res = await fetch(url, {
            method: 'POST',
            body: formData,
        });
        const resData = await res.json();
        if (!res.ok) {
            throw new Error(resData.message || 'インポートに失敗しました。');
        }
        window.showNotification(resData.message, 'success');
    } catch (err) {
        console.error(err);
        window.showNotification(`エラー: ${err.message}`, 'error');
    } finally {
        window.hideLoading();
        fileInput.value = ''; // 次回同じファイルを選択できるようにリセット
    }
}

/**
 * 全てのエクスポート・インポートボタンの機能を初期化する
 */
export function initBackupButtons() {
    // DOM要素を取得
    // ▼▼▼【ここから修正】▼▼▼
    const exportCustomersBtn = document.getElementById('exportCustomersBtn');
    const importCustomersBtn = document.getElementById('importCustomersBtn');
    const importCustomersInput = document.getElementById('importCustomersInput');
    // ▲▲▲【修正ここまで】▲▲▲
    const exportProductsBtn = document.getElementById('exportProductsBtn');
    const importProductsBtn = document.getElementById('importProductsBtn');
    const importProductsInput = document.getElementById('importProductsInput');
    const exportPricingBtn = document.getElementById('exportPricingBtn');

    // ▼▼▼【ここから修正】▼▼▼
    // 得意先・卸業者（顧客マスター）エクスポート
    if (exportCustomersBtn) {
        exportCustomersBtn.addEventListener('click', () => {
            window.location.href = '/api/customers/export';
        });
    }

    // 得意先・卸業者（顧客マスター）インポート
    if (importCustomersBtn && importCustomersInput) {
        importCustomersBtn.addEventListener('click', () => {
            importCustomersInput.click();
        });
        importCustomersInput.addEventListener('change', (event) => {
            handleFileUpload(event, '/api/customers/import');
        });
    }
    // ▲▲▲【修正ここまで】▲▲▲

    // 製品エクスポート
    if (exportProductsBtn) {
        exportProductsBtn.addEventListener('click', () => {
            window.location.href = '/api/products/export';
        });
    }

    // 製品インポート
    if (importProductsBtn && importProductsInput) {
        importProductsBtn.addEventListener('click', () => {
            importProductsInput.click();
        });
        importProductsInput.addEventListener('change', (event) => {
            handleFileUpload(event, '/api/products/import');
        });
    }

    // 価格情報バックアップ
    if (exportPricingBtn) {
        exportPricingBtn.addEventListener('click', () => {
            window.location.href = '/api/pricing/backup_export';
        });
    }
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\common_table.js -----
import { clientMap, wholesalerMap } from './master_data.js';
import { getLocalDateString } from './utils.js';

export const transactionTypeMap = {
	0: "棚卸", 1: "納品", 2: "返品", 3: "処方", 4: "棚卸増",
	5: "棚卸減", 11: "入庫", 12: "出庫", 30: "月末",
};

function getClientOrWholesalerName(rec) {
	if (!rec.clientCode) return '';
	if (rec.flag === 1 || rec.flag === 2) {
		return wholesalerMap.get(rec.clientCode) || rec.clientCode;
	}
	return clientMap.get(rec.clientCode) || rec.clientCode;
}

export function createUploadTableHTML(tableId) {
	const colgroup = `
    <colgroup>
      <col class="col-1"><col class="col-2"><col class="col-3"><col class="col-4"><col class="col-5">
      <col class="col-6"><col class="col-7"><col class="col-8"><col class="col-9"><col class="col-10">
      <col class="col-11"><col class="col-12"><col class="col-13"><col class="col-14">
    </colgroup>
  `;
	const header = `
    <thead>
      <tr>
        <th rowspan="2">－</th>
        <th>日付</th><th class="yj-jan-code">YJ</th><th colspan="2">製品名</th>
        <th>個数</th><th>YJ数量</th><th>YJ包装数</th><th>YJ単位</th>
        <th>単価</th><th>税額</th><th>期限</th><th>得意先</th><th>行</th>
      </tr>
      <tr>
        <th>種別</th><th class="yj-jan-code">JAN</th><th>包装</th><th>メーカー</th>
        <th>剤型</th><th>JAN数量</th><th>JAN包装数</th><th>JAN単位</th>
        <th>金額</th><th>税率</th><th>ロット</th><th>伝票番号</th><th>MA</th>
      </tr>
    </thead>
  `;
	return `<table id="${tableId}" class="data-table">${colgroup}${header}<tbody></tbody></table>`;
}

export function renderUploadTableRows(records) {
	if (!records || records.length === 0) {
		return `<tr><td colspan="14">対象データがありません。</td></tr>`;
	}

	const getTxClass = (flag) => {
		switch (flag) {
			case 2:
				return 'tx-return';
			case 0:
			case 4:
			case 5:
				return 'tx-inventory';
			default:
				return '';
		}
	};

	let html = "";
	records.forEach(rec => {
		const rowClass = getTxClass(rec.flag);
		html += `
      <tr class="${rowClass}">
        <td rowspan="2"></td>
        <td>${rec.transactionDate || ""}</td>
        <td class="yj-jan-code">${rec.yjCode || ""}</td>
        <td class="left" colspan="2">${rec.productName || ""}</td>
        <td class="right">${rec.datQuantity?.toFixed(2) || ""}</td>
        <td class="right">${rec.yjQuantity?.toFixed(2) || ""}</td>
        <td class="right">${rec.yjPackUnitQty || ""}</td>
        <td>${rec.yjUnitName || ""}</td>
        <td class="right">${rec.unitPrice?.toFixed(2) || ""}</td>
        <td class="right">${rec.taxAmount?.toFixed(2) || ""}</td>
        <td>${rec.expiryDate || ""}</td>
        <td class="left">${getClientOrWholesalerName(rec)}</td>
        <td class="right">${rec.lineNumber || ""}</td>
      </tr>
      <tr class="${rowClass}">
        <td>${transactionTypeMap[rec.flag] ?? ""}</td>
        <td class="yj-jan-code">${rec.janCode || ""}</td>
        <td class="left">${rec.packageSpec || ""}</td>
        <td class="left">${rec.makerName || ""}</td>
        <td class="left">${rec.usageClassification || ""}</td>
        <td class="right">${rec.janQuantity?.toFixed(2) || ""}</td>
        <td class="right">${rec.janPackUnitQty || ""}</td>
        <td>${rec.janUnitName || ""}</td>
        <td class="right">${rec.subtotal?.toFixed(2) || ""}</td>
        <td class="right">${rec.taxRate != null ? (rec.taxRate * 100).toFixed(0) + "%" : ""}</td>
        <td class="left">${rec.lotNumber || ""}</td>
        <td class="left">${rec.receiptNumber || ""}</td>
        <td class="left">${rec.processFlagMA || ""}</td>
      </tr>
    `;
	});

	return html;
}

export function setupDateDropdown(inputEl) {
	if (!inputEl) return;
	inputEl.value = new Date().toISOString().slice(0, 10);
}

export async function setupClientDropdown(selectEl) {
	if (!selectEl) return;
	const preservedOptions = Array.from(selectEl.querySelectorAll('option[value=""]'));
	selectEl.innerHTML = '';
	preservedOptions.forEach(opt => selectEl.appendChild(opt));
	try {
		const res = await fetch('/api/clients');
		if (!res.ok) throw new Error('Failed to fetch clients');
		const clients = await res.json();
		if (clients) {
			clients.forEach(c => {
				const opt = document.createElement('option');
				opt.value = c.code;
				opt.textContent = `${c.code}:${c.name}`;
				selectEl.appendChild(opt);
			});
		}
	} catch (err) {
		console.error("得意先リストの取得に失敗:", err);
	}
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\dat.js -----
import { createUploadTableHTML, renderUploadTableRows } from './common_table.js';

export function initDatUpload() {
    const datInput = document.getElementById('datFileInput');
    if (!datInput) return;

    datInput.addEventListener('change', async (e) => {
        const files = e.target.files;
        if (!files.length) return;

        const uploadContainer = document.getElementById('upload-output-container');
        // ▼▼▼【ここからが修正箇所です】▼▼▼
        
        // 先に処理中メッセージだけ表示する
        uploadContainer.innerHTML = `<p>Processing...</p>`;
        window.showLoading();
        
        try {
            const formData = new FormData();
            for (const file of files) formData.append('file', file);
            
            const res = await fetch('/api/dat/upload', { method: 'POST', body: formData });
            const data = await res.json();
            if (!res.ok) throw new Error(data.message || 'DAT file processing failed.');
            
            // --- 修正後の描画ロジック ---
            // 1. データを取得した後に、テーブルの枠と中身をそれぞれ文字列として生成
            const tableShell = createUploadTableHTML('upload-output-table');
            const tableBodyContent = renderUploadTableRows(data.records);
            
            // 2. 文字列を結合して完全なHTMLを作成
            const fullTableHtml = tableShell.replace('<tbody></tbody>', `<tbody>${tableBodyContent}</tbody>`);

            // 3. 完成したHTMLを一度だけDOMに書き込む
            uploadContainer.innerHTML = fullTableHtml;

            window.showNotification('DAT files processed successfully.', 'success');

        } catch (err) {
            // エラー時も同様に、テーブルの枠を作ってからエラーメッセージを表示すると確実
            const tableShell = createUploadTableHTML('upload-output-table');
            const errorRow = `<tr><td colspan="14" style="color:red; text-align:center;">Error: ${err.message}</td></tr>`;
            uploadContainer.innerHTML = tableShell.replace('<tbody></tbody>', `<tbody>${errorRow}</tbody>`);

            window.showNotification(err.message, 'error');
        } finally {
            window.hideLoading();
            e.target.value = '';
        }
        // ▲▲▲【修正ここまで】▲▲▲
    });
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\deadstock.js -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\deadstock.js

import { hiraganaToKatakana, getLocalDateString } from './utils.js';
import { showModal } from './inout_modal.js';

let view, outputContainer, excludeZeroStockCheckbox, createCsvBtn, kanaNameInput, dosageFormInput, importBtn, shelfNumberInput;
let unitMap = {};

async function fetchUnitMap() {
    if (Object.keys(unitMap).length > 0) return;
    try {
        const res = await fetch('/api/units/map');
        if (!res.ok) throw new Error('単位マスタの取得に失敗');
        unitMap = await res.json();
    } catch (err) {
        console.error(err);
    }
}

function formatPackageSpec(master) {
    if (!master) return '';
    const yjUnitName = master.yjUnitName || '';
    let spec = `${master.packageForm || ''} ${master.yjPackUnitQty || 0}${yjUnitName}`;

    if (master.janPackInnerQty > 0 && master.janPackUnitQty > 0) {
        const janUnitName = (master.janUnitCode === 0 || !unitMap[master.janUnitCode]) 
            ? yjUnitName 
            : (unitMap[master.janUnitCode] || yjUnitName);
        spec += ` (${master.janPackInnerQty}${yjUnitName}×${master.janPackUnitQty}${janUnitName})`;
    }
    return spec;
}

function renderDeadStockList(data) {
    if (!data || data.length === 0) {
        outputContainer.innerHTML = "<p>対象データが見つかりませんでした。</p>";
        return;
    }

    let html = data.map(group => {
        const yjHeader = `<div class="yj-group-wrapper">
            <div class="agg-yj-header">
                <div style="flex-grow: 1;">
                    <span>YJ: ${group.yjCode}</span>
                    <span class="product-name">${group.productName}</span>
                </div>
                <button class="btn inventory-adjust-link-btn" data-yj-code="${group.yjCode}">棚卸調整</button>
            </div>`;

        let tableRowsHTML = '';
        group.packageGroups.forEach(pkg => {
            pkg.products.forEach(prod => {
                const savedRecords = prod.savedRecords || [];
                const rowSpanCount = savedRecords.length > 0 ? savedRecords.length : 1;
                const rowSpan = `rowspan="${rowSpanCount}"`;

                const janUnitName = (prod.janUnitCode === 0 || !unitMap[prod.janUnitCode]) 
                    ? prod.yjUnitName 
                    : (unitMap[prod.janUnitCode] || prod.yjUnitName);
                
                const spec = formatPackageSpec(prod);
                const lastUsed = prod.lastUsageDate ? `${prod.lastUsageDate.slice(0,4)}-${prod.lastUsageDate.slice(4,6)}-${prod.lastUsageDate.slice(6,8)}` : '使用履歴なし';
                tableRowsHTML += `
                    <tr>
                        <td class="left" ${rowSpan}>${prod.productName}</td>
                        <td ${rowSpan}>${prod.productCode}</td>
                        <td class="left" ${rowSpan}>${prod.makerName}</td>
                        <td class="left" ${rowSpan}>${spec}</td>
                        <td class="right" ${rowSpan}>${prod.currentStock.toFixed(2)} ${janUnitName}</td>
                        <td ${rowSpan}>${lastUsed}</td>`;

                if (savedRecords.length > 0) {
                    const firstRec = savedRecords[0];
                    tableRowsHTML += `
                        <td class="right">${(firstRec.stockQuantityJan || 0).toFixed(2)}</td>
                        <td>${firstRec.expiryDate || ''}</td>
                        <td class="left">${firstRec.lotNumber || ''}</td>
                    </tr>`;
                } else {
                    tableRowsHTML += `
                        <td colspan="3" style="text-align:center; color: #888;">-</td>
                    </tr>`;
                }

                for (let i = 1; i < savedRecords.length; i++) {
                    const rec = savedRecords[i];
                    tableRowsHTML += `
                        <tr>
                            <td class="right">${(rec.stockQuantityJan || 0).toFixed(2)}</td>
                            <td>${rec.expiryDate || ''}</td>
                            <td class="left">${rec.lotNumber || ''}</td>
                        </tr>`;
                }
            });
        });
        
        const tableHTML = `<table class="data-table" style="margin-top: 5px;">
            <thead>
                <tr>
                    <th style="width: 20%;">製品名</th>
                    <th style="width: 12%;">JANコード</th>
                    <th style="width: 12%;">メーカー</th>
                    <th style="width: 18%;">包装仕様</th>
                    <th style="width: 8%;">在庫数</th>
                    <th style="width: 10%;">最終使用日</th>
                    <th style="width: 7%;">在庫</th>
                    <th style="width: 7%;">使用期限</th>
                    <th style="width: 6%;">ロット番号</th>
                </tr>
            </thead>
            <tbody>${tableRowsHTML}</tbody>
        </table></div>`;
        
        return yjHeader + tableHTML;
    }).join('');

    outputContainer.innerHTML = html;
}

export async function initDeadStock() {
    await fetchUnitMap();
    view = document.getElementById('deadstock-view');
    if (!view) return;

    outputContainer = document.getElementById('deadstock-output-container');
    excludeZeroStockCheckbox = document.getElementById('ds-exclude-zero-stock');
    createCsvBtn = document.getElementById('create-deadstock-csv-btn');
    kanaNameInput = document.getElementById('ds-kanaName');
    dosageFormInput = document.getElementById('ds-dosageForm');
    importBtn = document.getElementById('import-deadstock-btn');
    const printBtn = document.getElementById('print-deadstock-btn');
    const printArea = document.getElementById('deadstock-print-area');
    const importDeadstockInput = document.getElementById('importDeadstockInput');
    shelfNumberInput = document.getElementById('ds-shelf-number');

    if (printBtn) {
        printBtn.addEventListener('click', () => {
            const originalContent = outputContainer.querySelector('.yj-group-wrapper');
            if (!originalContent) {
                window.showNotification('印刷するデータがありません。先にリストを作成してください。', 'error');
                return;
            }

            const style = document.createElement('style');
            style.innerHTML = '@page { size: A4 portrait; margin: 1cm; }';
            style.id = 'print-style-portrait';
            document.head.appendChild(style);

            const contentToPrint = outputContainer.cloneNode(true);
            contentToPrint.querySelectorAll('button').forEach(btn => btn.remove());
            
            printArea.innerHTML = `
                <h2 style="text-align: center; margin-bottom: 20px;">不動在庫リスト</h2>
                <p style="text-align: right; margin-bottom: 10px;">印刷日: ${new Date().toLocaleDateString()}</p>
                ${contentToPrint.innerHTML}
            `;

            view.classList.add('print-this-view');
            outputContainer.classList.add('hidden');
            printArea.classList.remove('hidden');

            window.print();
        });
    }

    window.addEventListener('afterprint', () => {
        const printStyle = document.getElementById('print-style-portrait');
        if (printStyle) {
            printStyle.remove();
        }

        if (view.classList.contains('print-this-view')) {
            outputContainer.classList.remove('hidden');
            printArea.classList.add('hidden');
            view.classList.remove('print-this-view');
        }
    });
    
    if (outputContainer) {
        outputContainer.addEventListener('click', async (e) => {
            const target = e.target;
            if (target.classList.contains('inventory-adjust-link-btn')) {
                const yjCode = target.dataset.yjCode;
                const event = new CustomEvent('navigateToInventoryAdjustment', {
                    detail: { yjCode: yjCode },
                    bubbles: true
                });
                target.dispatchEvent(event);
            }
        });
    }

    if (view) {
        const runBtn = view.querySelector('#run-dead-stock-btn');
        if (runBtn) {
            runBtn.addEventListener('click', () => {
                window.showLoading();
                const params = new URLSearchParams({
                    excludeZeroStock: excludeZeroStockCheckbox.checked,
                    kanaName: hiraganaToKatakana(kanaNameInput.value),
                    dosageForm: dosageFormInput.value,
                    shelfNumber: shelfNumberInput.value,
                });
                fetch(`/api/deadstock/list?${params.toString()}`)
                    .then(res => {
                        if (!res.ok) { return res.text().then(text => { throw new Error(text || 'Failed to generate dead stock list') }); }
                        return res.json();
                    })
                    .then(data => renderDeadStockList(data))
                    .catch(err => { outputContainer.innerHTML = `<p style="color:red;">エラー: ${err.message}</p>`; })
                    .finally(() => { window.hideLoading(); });
            });
        }
    }

    if (createCsvBtn) {
        createCsvBtn.addEventListener('click', () => {
            const params = new URLSearchParams({
                excludeZeroStock: excludeZeroStockCheckbox.checked,
                kanaName: hiraganaToKatakana(kanaNameInput.value),
                dosageForm: dosageFormInput.value,
                shelfNumber: shelfNumberInput.value,
            });
            window.location.href = `/api/deadstock/export?${params.toString()}`;
        });
    }

    if (importBtn && importDeadstockInput) {
        importBtn.addEventListener('click', () => {
            importDeadstockInput.click();
        });

        importDeadstockInput.addEventListener('change', async (event) => {
            const file = event.target.files[0];
            if (!file) return;

            const formData = new FormData();
            formData.append('file', file);
            
            window.showLoading('CSVファイルをインポート中...');
            try {
                const res = await fetch('/api/deadstock/import', {
                    method: 'POST',
                    body: formData,
                });
                const resData = await res.json();
                if (!res.ok) {
                    throw new Error(resData.message || 'インポートに失敗しました。');
                }
                window.showNotification(resData.message, 'success');
                view.querySelector('#run-dead-stock-btn').click();
            } catch (err) {
                console.error(err);
                window.showNotification(`エラー: ${err.message}`, 'error');
            } finally {
                window.hideLoading();
                event.target.value = '';
            }
        });
    }
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\edge.js -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\edge.js

export function initEdge() {
    const downloadBtn = document.getElementById('edgeDownloadBtn');
    if (!downloadBtn) return;

    downloadBtn.addEventListener('click', async () => {
        if (!confirm('edeにログインし、納品データをダウンロードします。よろしいですか？')) {
            return;
        }

        window.showLoading();
        try {
            const res = await fetch('/api/edge/download', {
                method: 'POST',
            });
            
            // ▼▼▼ [ここから修正] エラーハンドリングを改善 ▼▼▼
            if (!res.ok) {
                const errorText = await res.text();
                try {
                    const resData = JSON.parse(errorText);
                    throw new Error(resData.message || `ダウンロードに失敗しました (HTTP ${res.status})`);
                } catch (e) {
                    throw new Error(errorText || `ダウンロードに失敗しました (HTTP ${res.status})`);
                }
            }
            const resData = await res.json();
            window.showNotification(resData.message, 'success');
            // ▲▲▲ [修正ここまで] ▲▲▲
        } catch (err) {
            console.error('Download failed:', err);
            const errorMessage = err.message || 'サーバーとの通信に失敗しました。設定画面でID/パスワードが正しいか確認してください。';
            window.showNotification(errorMessage, 'error');
        } finally {
            window.hideLoading();
        }
    });
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\encoding.min.js -----
/*!
 * encoding-japanese v2.1.0 - Convert and detect character encoding in JavaScript
 * Copyright (c) 2012 polygonplanet <polygon.planet.aqua@gmail.com>
 * https://github.com/polygonplanet/encoding.js
 * @license MIT
 */
!function(n){"object"==typeof exports&&"undefined"!=typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).Encoding=n()}(function(){return function r(o,i,l){function f(e,n){if(!i[e]){if(!o[e]){var t="function"==typeof require&&require;if(!n&&t)return t(e,!0);if(u)return u(e,!0);throw(n=new Error("Cannot find module '"+e+"'")).code="MODULE_NOT_FOUND",n}t=i[e]={exports:{}},o[e][0].call(t.exports,function(n){return f(o[e][1][n]||n)},t,t.exports,r,o,i,l)}return i[e].exports}for(var u="function"==typeof require&&require,n=0;n<l.length;n++)f(l[n]);return f}({1:[function(n,e,t){e.exports={version:"2.1.0"}},{}],2:[function(n,e,t){var g=n("./util"),i=n("./encoding-table"),n=(t.FALLBACK_CHARACTER=63,t.HAS_TYPED="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array),r=!1,o=!1;try{"a"===String.fromCharCode.apply(null,[97])&&(r=!0)}catch(n){}if(n)try{"a"===String.fromCharCode.apply(null,new Uint8Array([97]))&&(o=!0)}catch(n){}t.CAN_CHARCODE_APPLY=r,t.CAN_CHARCODE_APPLY_TYPED=o,t.APPLY_BUFFER_SIZE=65533,t.APPLY_BUFFER_SIZE_OK=null;var h=t.EncodingNames={UTF32:{order:0},UTF32BE:{alias:["UCS4"]},UTF32LE:null,UTF16:{order:1},UTF16BE:{alias:["UCS2"]},UTF16LE:null,BINARY:{order:2},ASCII:{order:3,alias:["ISO646","CP367"]},JIS:{order:4,alias:["ISO2022JP"]},UTF8:{order:5},EUCJP:{order:6},SJIS:{order:7,alias:["CP932","MSKANJI","WINDOWS31J"]},UNICODE:{order:8}},a={};t.EncodingAliases=a,t.EncodingOrders=function(){for(var n,e,t,r,o=a,i=g.objectKeys(h),l=[],f=0,u=i.length;f<u;f++)if(o[n=i[f]]=n,null!=(e=h[n])&&(null!=e.order&&(l[l.length]=n),e.alias))for(t=0,r=e.alias.length;t<r;t++)o[e.alias[t]]=n;return l.sort(function(n,e){return h[n].order-h[e].order}),l}(),t.init_JIS_TO_UTF8_TABLE=function(){if(null===i.JIS_TO_UTF8_TABLE){i.JIS_TO_UTF8_TABLE={};for(var n,e,t=g.objectKeys(i.UTF8_TO_JIS_TABLE),r=0,o=t.length;r<o;r++)n=t[r],95<(e=i.UTF8_TO_JIS_TABLE[n])&&(i.JIS_TO_UTF8_TABLE[e]=0|n);for(i.JISX0212_TO_UTF8_TABLE={},o=(t=g.objectKeys(i.UTF8_TO_JISX0212_TABLE)).length,r=0;r<o;r++)n=t[r],e=i.UTF8_TO_JISX0212_TABLE[n],i.JISX0212_TO_UTF8_TABLE[e]=0|n}}},{"./encoding-table":5,"./util":12}],3:[function(n,e,t){var a=n("./config"),g=n("./util"),u=n("./encoding-detect"),c=n("./encoding-table");function r(n){a.init_JIS_TO_UTF8_TABLE();for(var e,t,r,o,i=[],l=0,f=n&&n.length;l<f;l++)161<=(e=n[l])&&e<=223?(r=188|(t=e-64)>>6&3,o=128|63&t,i[i.length]=239,i[i.length]=255&r,i[i.length]=255&o):128<=e?(r=e<<1,(t=n[++l])<159?(r-=r<319?225:97,t-=126<t?32:31):(r-=r<319?224:96,t-=126),void 0===(o=c.JIS_TO_UTF8_TABLE[((r&=255)<<8)+t])?i[i.length]=a.FALLBACK_CHARACTER:(o<65535||(i[i.length]=o>>16&255),i[i.length]=o>>8&255,i[i.length]=255&o)):i[i.length]=255&n[l];return i}function o(n){a.init_JIS_TO_UTF8_TABLE();for(var e,t,r,o,i,l=[],f=0,u=n&&n.length;f<u;f++)142===(e=n[f])?(t=188|(r=n[++f]-64)>>6&3,r=128|63&r,l[l.length]=239,l[l.length]=255&t,l[l.length]=255&r):143===e?(t=n[++f]-128,r=n[++f]-128,void 0===(i=c.JISX0212_TO_UTF8_TABLE[o=(t<<8)+r])?l[l.length]=a.FALLBACK_CHARACTER:(i<65535||(l[l.length]=i>>16&255),l[l.length]=i>>8&255,l[l.length]=255&i)):128<=e?(o=(e-128<<8)+(n[++f]-128),void 0===(i=c.JIS_TO_UTF8_TABLE[o])?l[l.length]=a.FALLBACK_CHARACTER:(i<65535||(l[l.length]=i>>16&255),l[l.length]=i>>8&255,l[l.length]=255&i)):l[l.length]=255&n[f];return l}function i(n){a.init_JIS_TO_UTF8_TABLE();for(var e,t,r,o,i=[],l=0,f=0,u=n&&n.length;f<u;f++){for(;27===n[f];)if(36===n[f+1]&&66===n[f+2]||36===n[f+1]&&64===n[f+2]?l=1:40===n[f+1]&&73===n[f+2]?l=2:36===n[f+1]&&40===n[f+2]&&68===n[f+3]?(l=3,f++):l=0,void 0===n[f+=3])return i;1===l?(r=(n[f]<<8)+n[++f],void 0===(o=c.JIS_TO_UTF8_TABLE[r])?i[i.length]=a.FALLBACK_CHARACTER:(o<65535||(i[i.length]=o>>16&255),i[i.length]=o>>8&255,i[i.length]=255&o)):2===l?(e=188|(t=n[f]+64)>>6&3,t=128|63&t,i[i.length]=239,i[i.length]=255&e,i[i.length]=255&t):3===l?(r=(n[f]<<8)+n[++f],void 0===(o=c.JISX0212_TO_UTF8_TABLE[r])?i[i.length]=a.FALLBACK_CHARACTER:(o<65535||(i[i.length]=o>>16&255),i[i.length]=o>>8&255,i[i.length]=255&o)):i[i.length]=255&n[f]}return i}function l(n,e){for(var t,r,o,i=[],l=0,f=n&&n.length,u=e&&e.fallback;l<f;l++)128<=(o=n[l])?(o=o<=223?(r=[o,n[l+1]],(o<<8)+n[++l]):o<=239?(r=[o,n[l+1],n[l+2]],(o<<16)+(n[++l]<<8)+(255&n[++l])):(r=[o,n[l+1],n[l+2],n[l+3]],(o<<24)+(n[++l]<<16)+(n[++l]<<8)+(255&n[++l])),null==(o=c.UTF8_TO_JIS_TABLE[o])?u?J(i,r,u):i[i.length]=a.FALLBACK_CHARACTER:o<255?i[i.length]=o+128:(65536<o&&(o-=65536),t=255&o,1&(o=o>>8)?((o>>=1)<47?o+=113:o-=79,t+=95<t?32:31):((o>>=1)<=47?o+=112:o-=80,t+=126),i[i.length]=255&o,i[i.length]=255&t)):i[i.length]=255&n[l];return i}function f(n,e){for(var t,r,o,i=[],l=0,f=n&&n.length,u=e&&e.fallback;l<f;l++)128<=(r=n[l])?(r=r<=223?(t=[r,n[l+1]],(r<<8)+n[++l]):r<=239?(t=[r,n[l+1],n[l+2]],(r<<16)+(n[++l]<<8)+(255&n[++l])):(t=[r,n[l+1],n[l+2],n[l+3]],(r<<24)+(n[++l]<<16)+(n[++l]<<8)+(255&n[++l])),null==(o=c.UTF8_TO_JIS_TABLE[r])?null==(o=c.UTF8_TO_JISX0212_TABLE[r])?u?J(i,t,u):i[i.length]=a.FALLBACK_CHARACTER:(i[i.length]=143,i[i.length]=(o>>8)-128&255,i[i.length]=(255&o)-128&255):(65536<o&&(o-=65536),o<255?(i[i.length]=142,i[i.length]=o-128&255):(i[i.length]=(o>>8)-128&255,i[i.length]=(255&o)-128&255))):i[i.length]=255&n[l];return i}function h(n,e){for(var t,r,o,i=[],l=0,f=n&&n.length,u=0,g=e&&e.fallback,h=[27,40,66,27,36,66,27,40,73,27,36,40,68];u<f;u++)(r=n[u])<128?(0!==l&&(i[i.length]=h[l=0],i[i.length]=h[1],i[i.length]=h[2]),i[i.length]=255&r):(r=r<=223?(t=[r,n[u+1]],(r<<8)+n[++u]):r<=239?(t=[r,n[u+1],n[u+2]],(r<<16)+(n[++u]<<8)+(255&n[++u])):(t=[r,n[u+1],n[u+2],n[u+3]],(r<<24)+(n[++u]<<16)+(n[++u]<<8)+(255&n[++u])),null==(o=c.UTF8_TO_JIS_TABLE[r])?null==(o=c.UTF8_TO_JISX0212_TABLE[r])?(0!==l&&(i[i.length]=h[l=0],i[i.length]=h[1],i[i.length]=h[2]),g?J(i,t,g):i[i.length]=a.FALLBACK_CHARACTER):(3!==l&&(l=3,i[i.length]=h[9],i[i.length]=h[10],i[i.length]=h[11],i[i.length]=h[12]),i[i.length]=o>>8&255,i[i.length]=255&o):(65536<o&&(o-=65536),o<255?2!==l&&(l=2,i[i.length]=h[6],i[i.length]=h[7],i[i.length]=h[8]):(1!==l&&(l=1,i[i.length]=h[3],i[i.length]=h[4],i[i.length]=h[5]),i[i.length]=o>>8&255),i[i.length]=255&o));return 0!==l&&(i[i.length]=h[0],i[i.length]=h[1],i[i.length]=h[2]),i}function T(n){for(var e,t,r=[],o=0,i=n&&n.length;o<i;o++)55296<=(e=n[o])&&e<=56319&&o+1<i&&56320<=(t=n[o+1])&&t<=57343&&(e=1024*(e-55296)+t-56320+65536,o++),e<128?r[r.length]=e:e<2048?(r[r.length]=192|e>>6&31,r[r.length]=128|63&e):e<65536?(r[r.length]=224|e>>12&15,r[r.length]=128|e>>6&63,r[r.length]=128|63&e):e<2097152&&(r[r.length]=240|e>>18&15,r[r.length]=128|e>>12&63,r[r.length]=128|e>>6&63,r[r.length]=128|63&e);return r}function s(n,e){for(var t,r,o,i=[],l=0,f=n&&n.length,u=e&&e.ignoreSurrogatePair;l<f;)0<=(t=(r=n[l++])>>4)&&t<=7?o=r:12==t||13==t?o=(31&r)<<6|63&n[l++]:14==t?o=(15&r)<<12|(63&n[l++])<<6|63&n[l++]:15==t&&(o=(7&r)<<18|(63&n[l++])<<12|(63&n[l++])<<6|63&n[l++]),o<=65535||u?i[i.length]=o:(i[i.length]=55296+((o-=65536)>>10),i[i.length]=o%1024+56320);return i}function A(n,e){var t;if(e&&e.bom){var r,e=e.bom,o=("B"===(e=g.isString(e)?e:"BE").charAt(0).toUpperCase()?(r=[254,255],E):(r=[255,254],_))(n);(t=[])[0]=r[0],t[1]=r[1];for(var i=0,l=o.length;i<l;i++)t[t.length]=o[i]}else t=E(n);return t}function E(n){for(var e,t=[],r=0,o=n&&n.length;r<o;)(e=n[r++])<=255?(t[t.length]=0,t[t.length]=e):e<=65535&&(t[t.length]=e>>8&255,t[t.length]=255&e);return t}function _(n){for(var e,t=[],r=0,o=n&&n.length;r<o;)(e=n[r++])<=255?(t[t.length]=e,t[t.length]=0):e<=65535&&(t[t.length]=255&e,t[t.length]=e>>8&255);return t}function U(n){var e,t,r=[],o=0,i=n&&n.length;for(2<=i&&(254===n[0]&&255===n[1]||255===n[0]&&254===n[1])&&(o=2);o<i;)e=n[o++],t=n[o++],r[r.length]=0===e?t:(255&e)<<8|255&t;return r}function S(n){var e,t,r=[],o=0,i=n&&n.length;for(2<=i&&(254===n[0]&&255===n[1]||255===n[0]&&254===n[1])&&(o=2);o<i;)e=n[o++],t=n[o++],r[r.length]=0===t?e:(255&t)<<8|255&e;return r}function F(n){for(var e,t,r=[],o=0,i=n&&n.length,l=!1,f=!0;o<i;)e=n[o++],t=n[o++],f&&2===o?(f=!1,254===e&&255===t?l=!1:255===e&&254===t?l=!0:(l=u.isUTF16LE(n),o=0)):r[r.length]=l?0===t?e:(255&t)<<8|255&e:0===e?t:(255&e)<<8|255&t;return r}function d(n){var e,t,r=[],o=0,i=n&&n.length;for(2<=i&&(254===n[0]&&255===n[1]||255===n[0]&&254===n[1])&&(o=2);o<i;)e=n[o++],t=n[o++],r[r.length]=t,r[r.length]=e;return r}function C(n,e){return A(s(n),e)}function I(n){return T(F(n))}function B(n){return E(s(n))}function L(n){return T(U(n))}function v(n){return _(s(n))}function O(n){return T(S(n))}function J(n,e,t){switch(t){case"html-entity":case"html-entity-hex":var r=s(e,{ignoreSurrogatePair:!0})[0];if(r){n[n.length]=38,n[n.length]=35;for(var o="hex"===t.slice(-3)?16:10,i=(16==o&&(n[n.length]=120),r.toString(o)),l=0,f=i.length;l<f;l++)n[n.length]=i.charCodeAt(l);n[n.length]=59}}}t.JISToSJIS=function(n){for(var e,t,r=[],o=0,i=0,l=n&&n.length;i<l;i++){for(;27===n[i];)if(36===n[i+1]&&66===n[i+2]||36===n[i+1]&&64===n[i+2]?o=1:40===n[i+1]&&73===n[i+2]?o=2:36===n[i+1]&&40===n[i+2]&&68===n[i+3]?(o=3,i++):o=0,void 0===n[i+=3])return r;1===o?(e=n[i],t=n[++i],1&e?((e>>=1)<47?e+=113:e-=79,t+=95<t?32:31):((e>>=1)<=47?e+=112:e-=80,t+=126),r[r.length]=255&e,r[r.length]=255&t):r[r.length]=2===o?n[i]+128&255:3===o?a.FALLBACK_CHARACTER:255&n[i]}return r},t.JISToEUCJP=function(n){for(var e=[],t=0,r=n&&n.length,o=0;o<r;o++){for(;27===n[o];)if(36===n[o+1]&&66===n[o+2]||36===n[o+1]&&64===n[o+2]?t=1:40===n[o+1]&&73===n[o+2]?t=2:36===n[o+1]&&40===n[o+2]&&68===n[o+3]?(t=3,o++):t=0,void 0===n[o+=3])return e;1===t?(e[e.length]=n[o]+128&255,e[e.length]=n[++o]+128&255):2===t?(e[e.length]=142,e[e.length]=n[o]+128&255):3===t?(e[e.length]=143,e[e.length]=n[o]+128&255,e[e.length]=n[++o]+128&255):e[e.length]=255&n[o]}return e},t.SJISToJIS=function(n){for(var e,t,r=[],o=0,i=n&&n.length,l=0,f=[27,40,66,27,36,66,27,40,73];l<i;l++)161<=(e=n[l])&&e<=223?(2!==o&&(o=2,r[r.length]=f[6],r[r.length]=f[7],r[r.length]=f[8]),r[r.length]=e-128&255):128<=e?(1!==o&&(o=1,r[r.length]=f[3],r[r.length]=f[4],r[r.length]=f[5]),e<<=1,(t=n[++l])<159?(e-=e<319?225:97,t-=126<t?32:31):(e-=e<319?224:96,t-=126),r[r.length]=255&e,r[r.length]=255&t):(0!==o&&(r[r.length]=f[o=0],r[r.length]=f[1],r[r.length]=f[2]),r[r.length]=255&e);return 0!==o&&(r[r.length]=f[0],r[r.length]=f[1],r[r.length]=f[2]),r},t.SJISToEUCJP=function(n){for(var e,t,r=[],o=n&&n.length,i=0;i<o;i++)161<=(e=n[i])&&e<=223?(r[r.length]=142,r[r.length]=e):129<=e?(e<<=1,(t=n[++i])<159?(e-=e<319?97:225,t+=126<t?96:97):(e-=e<319?96:224,t+=2),r[r.length]=255&e,r[r.length]=255&t):r[r.length]=255&e;return r},t.EUCJPToJIS=function(n){for(var e,t=[],r=0,o=n&&n.length,i=0,l=[27,40,66,27,36,66,27,40,73,27,36,40,68];i<o;i++)142===(e=n[i])?(2!==r&&(r=2,t[t.length]=l[6],t[t.length]=l[7],t[t.length]=l[8]),t[t.length]=n[++i]-128&255):143===e?(3!==r&&(r=3,t[t.length]=l[9],t[t.length]=l[10],t[t.length]=l[11],t[t.length]=l[12]),t[t.length]=n[++i]-128&255,t[t.length]=n[++i]-128&255):142<e?(1!==r&&(r=1,t[t.length]=l[3],t[t.length]=l[4],t[t.length]=l[5]),t[t.length]=e-128&255,t[t.length]=n[++i]-128&255):(0!==r&&(t[t.length]=l[r=0],t[t.length]=l[1],t[t.length]=l[2]),t[t.length]=255&e);return 0!==r&&(t[t.length]=l[0],t[t.length]=l[1],t[t.length]=l[2]),t},t.EUCJPToSJIS=function(n){for(var e,t,r=[],o=n&&n.length,i=0;i<o;i++)143===(e=n[i])?(r[r.length]=a.FALLBACK_CHARACTER,i+=2):142<e?(t=n[++i],1&e?(e=(e>>=1)+(e<111?49:113),t-=223<t?96:97):(e=(e>>=1)+(e<=111?48:112),t-=2),r[r.length]=255&e,r[r.length]=255&t):r[r.length]=142===e?255&n[++i]:255&e;return r},t.SJISToUTF8=r,t.EUCJPToUTF8=o,t.JISToUTF8=i,t.UTF8ToSJIS=l,t.UTF8ToEUCJP=f,t.UTF8ToJIS=h,t.UNICODEToUTF8=T,t.UTF8ToUNICODE=s,t.UNICODEToUTF16=A,t.UNICODEToUTF16BE=E,t.UNICODEToUTF16LE=_,t.UTF16BEToUNICODE=U,t.UTF16LEToUNICODE=S,t.UTF16ToUNICODE=F,t.UTF16ToUTF16BE=function(n){for(var e,t,r=[],o=0,i=n&&n.length,l=!1,f=!0;o<i;)e=n[o++],t=n[o++],f&&2===o?(f=!1,254===e&&255===t?l=!1:255===e&&254===t?l=!0:(l=u.isUTF16LE(n),o=0)):l?(r[r.length]=t,r[r.length]=e):(r[r.length]=e,r[r.length]=t);return r},t.UTF16BEToUTF16=function(n,e){var t,r,o,i=!1,l=(e&&e.bom&&(e=e.bom,"B"===(e=g.isString(e)?e:"BE").charAt(0).toUpperCase()?t=[254,255]:(t=[255,254],i=!0)),[]),f=n&&n.length,u=0;for(2<=f&&(254===n[0]&&255===n[1]||255===n[0]&&254===n[1])&&(u=2),t&&(l[0]=t[0],l[1]=t[1]);u<f;)r=n[u++],o=n[u++],i?(l[l.length]=o,l[l.length]=r):(l[l.length]=r,l[l.length]=o);return l},t.UTF16ToUTF16LE=function(n){for(var e,t,r=[],o=0,i=n&&n.length,l=!1,f=!0;o<i;)e=n[o++],t=n[o++],f&&2===o?(f=!1,254===e&&255===t?l=!1:255===e&&254===t?l=!0:(l=u.isUTF16LE(n),o=0)):l?(r[r.length]=e,r[r.length]=t):(r[r.length]=t,r[r.length]=e);return r},t.UTF16LEToUTF16=function(n,e){var t,r,o,i=!1,l=(e&&e.bom&&(e=e.bom,"B"===(e=g.isString(e)?e:"BE").charAt(0).toUpperCase()?t=[254,255]:(t=[255,254],i=!0)),[]),f=n&&n.length,u=0;for(2<=f&&(254===n[0]&&255===n[1]||255===n[0]&&254===n[1])&&(u=2),t&&(l[0]=t[0],l[1]=t[1]);u<f;)r=n[u++],o=n[u++],i?(l[l.length]=r,l[l.length]=o):(l[l.length]=o,l[l.length]=r);return l},t.UTF16BEToUTF16LE=d,t.UTF16LEToUTF16BE=d,t.UNICODEToJIS=function(n,e){return h(T(n),e)},t.JISToUNICODE=function(n){return s(i(n))},t.UNICODEToEUCJP=function(n,e){return f(T(n),e)},t.EUCJPToUNICODE=function(n){return s(o(n))},t.UNICODEToSJIS=function(n,e){return l(T(n),e)},t.SJISToUNICODE=function(n){return s(r(n))},t.UTF8ToUTF16=C,t.UTF16ToUTF8=I,t.UTF8ToUTF16BE=B,t.UTF16BEToUTF8=L,t.UTF8ToUTF16LE=v,t.UTF16LEToUTF8=O,t.JISToUTF16=function(n,e){return C(i(n),e)},t.UTF16ToJIS=function(n,e){return h(I(n),e)},t.JISToUTF16BE=function(n){return B(i(n))},t.UTF16BEToJIS=function(n,e){return h(L(n),e)},t.JISToUTF16LE=function(n){return v(i(n))},t.UTF16LEToJIS=function(n,e){return h(O(n),e)},t.EUCJPToUTF16=function(n,e){return C(o(n),e)},t.UTF16ToEUCJP=function(n,e){return f(I(n),e)},t.EUCJPToUTF16BE=function(n){return B(o(n))},t.UTF16BEToEUCJP=function(n,e){return f(L(n),e)},t.EUCJPToUTF16LE=function(n){return v(o(n))},t.UTF16LEToEUCJP=function(n,e){return f(O(n),e)},t.SJISToUTF16=function(n,e){return C(r(n),e)},t.UTF16ToSJIS=function(n,e){return l(I(n),e)},t.SJISToUTF16BE=function(n){return B(r(n))},t.UTF16BEToSJIS=function(n,e){return l(L(n),e)},t.SJISToUTF16LE=function(n){return v(r(n))},t.UTF16LEToSJIS=function(n,e){return l(O(n),e)}},{"./config":2,"./encoding-detect":4,"./encoding-table":5,"./util":12}],4:[function(n,e,t){t.isBINARY=function(n){for(var e,t=0,r=n&&n.length;t<r;t++){if(255<(e=n[t]))return!1;if(0<=e&&e<=7||255===e)return!0}return!1},t.isASCII=function(n){for(var e,t=0,r=n&&n.length;t<r;t++)if(255<(e=n[t])||128<=e&&e<=255||27===e)return!1;return!0},t.isJIS=function(n){for(var e,t,r=0,o=n&&n.length;r<o;r++){if(255<(e=n[r])||128<=e&&e<=255)return!1;if(27===e){if(o<=r+2)return!1;if(e=n[r+1],t=n[r+2],36===e){if(40===t||64===t||66===t)return!0}else{if(38===e&&64===t)return!0;if(40===e&&(66===t||73===t||74===t))return!0}}}return!1},t.isEUCJP=function(n){for(var e,t=0,r=n&&n.length;t<r;t++)if(!((e=n[t])<128)){if(255<e||e<142)return!1;if(142===e){if(r<=t+1)return!1;if((e=n[++t])<161||223<e)return!1}else{if(143===e){if(r<=t+2)return!1;if((e=n[++t])<162||237<e)return!1}else{if(!(161<=e&&e<=254))return!1;if(r<=t+1)return!1}if((e=n[++t])<161||254<e)return!1}}return!0},t.isSJIS=function(n){for(var e,t=0,r=n&&n.length;t<r&&128<n[t];)if(255<n[t++])return!1;for(;t<r;t++)if(!((e=n[t])<=128||161<=e&&e<=223)){if(160===e||239<e||r<=t+1)return!1;if((e=n[++t])<64||127===e||252<e)return!1}return!0},t.isUTF8=function(n){for(var e,t=0,r=n&&n.length;t<r;t++){if(255<(e=n[t]))return!1;if(!(9===e||10===e||13===e||32<=e&&e<=126))if(194<=e&&e<=223){if(r<=t+1||n[t+1]<128||191<n[t+1])return!1;t++}else if(224===e){if(r<=t+2||n[t+1]<160||191<n[t+1]||n[t+2]<128||191<n[t+2])return!1;t+=2}else if(225<=e&&e<=236||238===e||239===e){if(r<=t+2||n[t+1]<128||191<n[t+1]||n[t+2]<128||191<n[t+2])return!1;t+=2}else if(237===e){if(r<=t+2||n[t+1]<128||159<n[t+1]||n[t+2]<128||191<n[t+2])return!1;t+=2}else{if(240===e){if(r<=t+3||n[t+1]<144||191<n[t+1]||n[t+2]<128||191<n[t+2]||n[t+3]<128||191<n[t+3])return!1}else if(241<=e&&e<=243){if(r<=t+3||n[t+1]<128||191<n[t+1]||n[t+2]<128||191<n[t+2]||n[t+3]<128||191<n[t+3])return!1}else{if(244!==e)return!1;if(r<=t+3||n[t+1]<128||143<n[t+1]||n[t+2]<128||191<n[t+2]||n[t+3]<128||191<n[t+3])return!1}t+=3}}return!0},t.isUTF16=function(n){var e,t,r=0,o=n&&n.length,i=null;if(o<2){if(255<n[0]);}else{if(e=n[0],t=n[1],255===e&&254===t)return!0;if(254===e&&255===t)return!0;for(;r<o;r++){if(0===n[r]){i=r;break}if(255<n[r])return!1}if(null===i)return!1;if(void 0!==(e=n[i+1])&&0<e&&e<128)return!0;if(void 0!==(t=n[i-1])&&0<t&&t<128)return!0}return!1},t.isUTF16BE=function(n){var e,t,r=0,o=n&&n.length,i=null;if(o<2){if(255<n[0]);}else{if(e=n[0],t=n[1],254===e&&255===t)return!0;for(;r<o;r++){if(0===n[r]){i=r;break}if(255<n[r])return!1}if(null===i)return!1;if(i%2==0)return!0}return!1},t.isUTF16LE=function(n){var e,t,r=0,o=n&&n.length,i=null;if(o<2){if(255<n[0]);}else{if(e=n[0],t=n[1],255===e&&254===t)return!0;for(;r<o;r++){if(0===n[r]){i=r;break}if(255<n[r])return!1}if(null===i)return!1;if(i%2!=0)return!0}return!1},t.isUTF32=function(n){var e,t,r,o,i=0,l=n&&n.length,f=null;if(l<4){for(;i<l;i++)if(255<n[i])return!1}else{if(r=n[0],o=n[1],e=n[2],t=n[3],0===r&&0===o&&254===e&&255===t)return!0;if(255===r&&254===o&&0===e&&0===t)return!0;for(;i<l;i++){if(0===n[i]&&0===n[i+1]&&0===n[i+2]){f=i;break}if(255<n[i])return!1}if(null===f)return!1;if(void 0!==(r=n[f+3])&&0<r&&r<=127)return 0===n[f+2]&&0===n[f+1];if(void 0!==(o=n[f-1])&&0<o&&o<=127)return 0===n[f+1]&&0===n[f+2]}return!1},t.isUNICODE=function(n){for(var e,t=0,r=n&&n.length;t<r;t++)if((e=n[t])<0||1114111<e)return!1;return!0}},{}],5:[function(n,e,t){t.UTF8_TO_JIS_TABLE=n("./utf8-to-jis-table"),t.UTF8_TO_JISX0212_TABLE=n("./utf8-to-jisx0212-table"),t.JIS_TO_UTF8_TABLE=n("./jis-to-utf8-table"),t.JISX0212_TO_UTF8_TABLE=n("./jisx0212-to-utf8-table")},{"./jis-to-utf8-table":7,"./jisx0212-to-utf8-table":8,"./utf8-to-jis-table":10,"./utf8-to-jisx0212-table":11}],6:[function(n,e,t){var r=n("./config"),u=n("./util"),f=n("./encoding-detect"),l=n("./encoding-convert"),g=n("./kana-case-table"),n=n("../package.json").version,h=Object.prototype.hasOwnProperty,a={version:n,orders:r.EncodingOrders,detect:function(n,e){if(null!=n&&0!==n.length){u.isObject(e)&&!u.isArray(e)&&(e=e.encoding),u.isString(n)&&(n=u.stringToBuffer(n)),null==e?e=a.orders:u.isString(e)&&(e="AUTO"===(e=e.toUpperCase())?a.orders:~e.indexOf(",")?e.split(/\s*,\s*/):[e]);for(var t,r,o,i=e.length,l=0;l<i;l++)if(t=e[l],r=u.canonicalizeEncodingName(t)){if(!h.call(f,o="is"+r))throw new Error("Undefined encoding: "+t);if(f[o](n))return r}}return!1},convert:function(n,e,t){u.isObject(e)?(t=(o=e).from,e=o.to,o.type&&(r=o.type)):o={},u.isString(n)?(r=r||"string",n=u.stringToBuffer(n)):null!=n&&0!==n.length||(n=[]),t=null!=t&&u.isString(t)&&"AUTO"!==t.toUpperCase()&&!~t.indexOf(",")?u.canonicalizeEncodingName(t):a.detect(n);var r,o,e=u.canonicalizeEncodingName(e),t=t+"To"+e,i=h.call(l,t)?l[t](n,o):n;switch((""+r).toLowerCase()){case"string":return u.codeToString_fast(i);case"arraybuffer":return u.codeToBuffer(i);default:return u.bufferToCode(i)}},urlEncode:function(n){u.isString(n)&&(n=u.stringToBuffer(n));for(var e,t=u.stringToCode("0123456789ABCDEF"),r=[],o=0,i=n&&n.length;o<i;o++){if(255<(e=n[o]))return encodeURIComponent(u.codeToString_fast(n));97<=e&&e<=122||65<=e&&e<=90||48<=e&&e<=57||33===e||39<=e&&e<=42||45===e||46===e||95===e||126===e?r[r.length]=e:(r[r.length]=37,e<16?(r[r.length]=48,r[r.length]=t[e]):(r[r.length]=t[e>>4&15],r[r.length]=t[15&e]))}return u.codeToString_fast(r)},urlDecode:function(n){for(var e,t=[],r=0,o=n&&n.length;r<o;)e=n.charCodeAt(r++),t[t.length]=37===e?parseInt(n.charAt(r++)+n.charAt(r++),16):e;return t},base64Encode:function(n){return u.isString(n)&&(n=u.stringToBuffer(n)),u.base64encode(n)},base64Decode:function(n){return u.base64decode(n)},codeToString:u.codeToString_fast,stringToCode:u.stringToCode,toHankakuCase:function(n){for(var e,t=!1,r=(u.isString(n)&&(t=!0,n=u.stringToBuffer(n)),[]),o=n&&n.length,i=0;i<o;)65281<=(e=n[i++])&&e<=65374&&(e-=65248),r[r.length]=e;return t?u.codeToString_fast(r):r},toZenkakuCase:function(n){for(var e,t=!1,r=(u.isString(n)&&(t=!0,n=u.stringToBuffer(n)),[]),o=n&&n.length,i=0;i<o;)33<=(e=n[i++])&&e<=126&&(e+=65248),r[r.length]=e;return t?u.codeToString_fast(r):r},toHiraganaCase:function(n){for(var e,t=!1,r=(u.isString(n)&&(t=!0,n=u.stringToBuffer(n)),[]),o=n&&n.length,i=0;i<o;)12449<=(e=n[i++])&&e<=12534?e-=96:12535===e?(r[r.length]=12431,e=12443):12538===e&&(r[r.length]=12434,e=12443),r[r.length]=e;return t?u.codeToString_fast(r):r},toKatakanaCase:function(n){for(var e,t=!1,r=(u.isString(n)&&(t=!0,n=u.stringToBuffer(n)),[]),o=n&&n.length,i=0;i<o;)12353<=(e=n[i++])&&e<=12438&&((12431===e||12434===e)&&i<o&&12443===n[i]?(e=12431===e?12535:12538,i++):e+=96),r[r.length]=e;return t?u.codeToString_fast(r):r},toHankanaCase:function(n){for(var e,t,r=!1,o=(u.isString(n)&&(r=!0,n=u.stringToBuffer(n)),[]),i=n&&n.length,l=0;l<i;)12289<=(e=n[l++])&&e<=12540&&void 0!==(t=g.HANKANA_TABLE[e])?o[o.length]=t:12532===e||12535===e||12538===e?(o[o.length]=g.HANKANA_SONANTS[e],o[o.length]=65438):12459<=e&&e<=12489?(o[o.length]=g.HANKANA_TABLE[e-1],o[o.length]=65438):12495<=e&&e<=12509?(o[o.length]=g.HANKANA_TABLE[e-(t=e%3)],o[o.length]=g.HANKANA_MARKS[t-1]):o[o.length]=e;return r?u.codeToString_fast(o):o},toZenkanaCase:function(n){for(var e,t,r,o=!1,i=(u.isString(n)&&(o=!0,n=u.stringToBuffer(n)),[]),l=n&&n.length,f=0,f=0;f<l;f++)65376<(e=n[f])&&e<65440&&(t=g.ZENKANA_TABLE[e-65377],f+1<l&&(65438===(r=n[f+1])&&65395===e?(t=12532,f++):65438===r&&65436===e?(t=12535,f++):65438===r&&65382===e?(t=12538,f++):65438===r&&(65397<e&&e<65413||65417<e&&e<65423)?(t++,f++):65439===r&&65417<e&&e<65423&&(t+=2,f++)),e=t),i[i.length]=e;return o?u.codeToString_fast(i):i},toHankakuSpace:function(n){if(u.isString(n))return n.replace(/\u3000/g," ");for(var e,t=[],r=n&&n.length,o=0;o<r;)e=n[o++],t[t.length]=e=12288===e?32:e;return t},toZenkakuSpace:function(n){if(u.isString(n))return n.replace(/\u0020/g,"\u3000");for(var e,t=[],r=n&&n.length,o=0;o<r;)e=n[o++],t[t.length]=e=32===e?12288:e;return t}};e.exports=a},{"../package.json":1,"./config":2,"./encoding-convert":3,"./encoding-detect":4,"./kana-case-table":9,"./util":12}],7:[function(n,e,t){e.exports=null},{}],8:[function(n,e,t){e.exports=null},{}],9:[function(n,e,t){t.HANKANA_TABLE={12289:65380,12290:65377,12300:65378,12301:65379,12443:65438,12444:65439,12449:65383,12450:65393,12451:65384,12452:65394,12453:65385,12454:65395,12455:65386,12456:65396,12457:65387,12458:65397,12459:65398,12461:65399,12463:65400,12465:65401,12467:65402,12469:65403,12471:65404,12473:65405,12475:65406,12477:65407,12479:65408,12481:65409,12483:65391,12484:65410,12486:65411,12488:65412,12490:65413,12491:65414,12492:65415,12493:65416,12494:65417,12495:65418,12498:65419,12501:65420,12504:65421,12507:65422,12510:65423,12511:65424,12512:65425,12513:65426,12514:65427,12515:65388,12516:65428,12517:65389,12518:65429,12519:65390,12520:65430,12521:65431,12522:65432,12523:65433,12524:65434,12525:65435,12527:65436,12530:65382,12531:65437,12539:65381,12540:65392},t.HANKANA_SONANTS={12532:65395,12535:65436,12538:65382},t.HANKANA_MARKS=[65438,65439],t.ZENKANA_TABLE=[12290,12300,12301,12289,12539,12530,12449,12451,12453,12455,12457,12515,12517,12519,12483,12540,12450,12452,12454,12456,12458,12459,12461,12463,12465,12467,12469,12471,12473,12475,12477,12479,12481,12484,12486,12488,12490,12491,12492,12493,12494,12495,12498,12501,12504,12507,12510,12511,12512,12513,12514,12516,12518,12520,12521,12522,12523,12524,12525,12527,12531,12443,12444]},{}],10:[function(n,e,t){e.exports={15711649:33,15711650:34,15711651:35,15711652:36,15711653:37,15711654:38,15711655:39,15711656:40,15711657:41,15711658:42,15711659:43,15711660:44,15711661:45,15711662:46,15711663:47,15711664:48,15711665:49,15711666:50,15711667:51,15711668:52,15711669:53,15711670:54,15711671:55,15711672:56,15711673:57,15711674:58,15711675:59,15711676:60,15711677:61,15711678:62,15711679:63,15711872:64,15711873:65,15711874:66,15711875:67,15711876:68,15711877:69,15711878:70,15711879:71,15711880:72,15711881:73,15711882:74,15711883:75,15711884:76,15711885:77,15711886:78,15711887:79,15711888:80,15711889:81,15711890:82,15711891:83,15711892:84,15711893:85,15711894:86,15711895:87,15711896:88,15711897:89,15711898:90,15711899:91,15711900:92,15711901:93,15711902:94,15711903:95,14848416:11553,14848417:11554,14848418:11555,14848419:11556,14848420:11557,14848421:11558,14848422:11559,14848423:11560,14848424:11561,14848425:11562,14848426:11563,14848427:11564,14848428:11565,14848429:11566,14848430:11567,14848431:11568,14848432:11569,14848433:11570,14848434:11571,14848435:11572,14845344:11573,14845345:11574,14845346:11575,14845347:11576,14845348:11577,14845349:11578,14845350:11579,14845351:11580,14845352:11581,14845353:11582,14912905:11584,14912660:11585,14912674:11586,14912909:11587,14912664:11588,14912679:11589,14912643:11590,14912694:11591,14912913:11592,14912919:11593,14912653:11594,14912678:11595,14912675:11596,14912683:11597,14912906:11598,14912699:11599,14913180:11600,14913181:11601,14913182:11602,14913166:11603,14913167:11604,14913412:11605,14913185:11606,14912955:11615,14909597:11616,14909599:11617,14845078:11618,14913421:11619,14845089:11620,14912164:11621,14912165:11622,14912166:11623,14912167:11624,14912168:11625,14911665:11626,14911666:11627,14911673:11628,14912958:11629,14912957:11630,14912956:11631,14846126:11635,14846097:11636,14846111:11640,14846655:11641,14909568:8481,14909569:8482,14909570:8483,15711372:8484,15711374:8485,14910395:8486,15711386:8487,15711387:8488,15711391:8489,15711361:8490,14910107:8491,14910108:8492,49844:8493,15711616:8494,49832:8495,15711422:8496,15712163:8497,15711423:8498,14910397:8499,14910398:8500,14910109:8501,14910110:8502,14909571:8503,14990237:8504,14909573:8505,14909574:8506,14909575:8507,14910396:8508,14844053:8509,14844048:8510,15711375:8511,15711420:8512,15711646:8513,14844054:8514,15711644:8515,14844070:8516,14844069:8517,14844056:8518,14844057:8519,14844060:8520,14844061:8521,15711368:8522,15711369:8523,14909588:8524,14909589:8525,15711419:8526,15711421:8527,15711643:8528,15711645:8529,14909576:8530,14909577:8531,14909578:8532,14909579:8533,14909580:8534,14909581:8535,14909582:8536,14909583:8537,14909584:8538,14909585:8539,15711371:8540,15711373:8541,49841:8542,50071:8543,50103:8544,15711389:8545,14846368:8546,15711388:8547,15711390:8548,14846374:8549,14846375:8550,14846110:8551,14846132:8552,14850434:8553,14850432:8554,49840:8555,14844082:8556,14844083:8557,14845059:8558,15712165:8559,15711364:8560,15712160:8561,15712161:8562,15711365:8563,15711363:8564,15711366:8565,15711370:8566,15711392:8567,49831:8568,14850182:8569,14850181:8570,14849931:8571,14849935:8572,14849934:8573,14849927:8574,14849926:8737,14849697:8738,14849696:8739,14849715:8740,14849714:8741,14849725:8742,14849724:8743,14844091:8744,14909586:8745,14845586:8746,14845584:8747,14845585:8748,14845587:8749,14909587:8750,14846088:8762,14846091:8763,14846598:8764,14846599:8765,14846594:8766,14846595:8767,14846122:8768,14846121:8769,14846119:8778,14846120:8779,49836:8780,14845842:8781,14845844:8782,14846080:8783,14846083:8784,14846112:8796,14846629:8797,14847122:8798,14846082:8799,14846087:8800,14846369:8801,14846354:8802,14846378:8803,14846379:8804,14846106:8805,14846141:8806,14846109:8807,14846133:8808,14846123:8809,14846124:8810,14845099:8818,14844080:8819,14850479:8820,14850477:8821,14850474:8822,14844064:8823,14844065:8824,49846:8825,14849967:8830,15711376:9008,15711377:9009,15711378:9010,15711379:9011,15711380:9012,15711381:9013,15711382:9014,15711383:9015,15711384:9016,15711385:9017,15711393:9025,15711394:9026,15711395:9027,15711396:9028,15711397:9029,15711398:9030,15711399:9031,15711400:9032,15711401:9033,15711402:9034,15711403:9035,15711404:9036,15711405:9037,15711406:9038,15711407:9039,15711408:9040,15711409:9041,15711410:9042,15711411:9043,15711412:9044,15711413:9045,15711414:9046,15711415:9047,15711416:9048,15711417:9049,15711418:9050,15711617:9057,15711618:9058,15711619:9059,15711620:9060,15711621:9061,15711622:9062,15711623:9063,15711624:9064,15711625:9065,15711626:9066,15711627:9067,15711628:9068,15711629:9069,15711630:9070,15711631:9071,15711632:9072,15711633:9073,15711634:9074,15711635:9075,15711636:9076,15711637:9077,15711638:9078,15711639:9079,15711640:9080,15711641:9081,15711642:9082,14909825:9249,14909826:9250,14909827:9251,14909828:9252,14909829:9253,14909830:9254,14909831:9255,14909832:9256,14909833:9257,14909834:9258,14909835:9259,14909836:9260,14909837:9261,14909838:9262,14909839:9263,14909840:9264,14909841:9265,14909842:9266,14909843:9267,14909844:9268,14909845:9269,14909846:9270,14909847:9271,14909848:9272,14909849:9273,14909850:9274,14909851:9275,14909852:9276,14909853:9277,14909854:9278,14909855:9279,14909856:9280,14909857:9281,14909858:9282,14909859:9283,14909860:9284,14909861:9285,14909862:9286,14909863:9287,14909864:9288,14909865:9289,14909866:9290,14909867:9291,14909868:9292,14909869:9293,14909870:9294,14909871:9295,14909872:9296,14909873:9297,14909874:9298,14909875:9299,14909876:9300,14909877:9301,14909878:9302,14909879:9303,14909880:9304,14909881:9305,14909882:9306,14909883:9307,14909884:9308,14909885:9309,14909886:9310,14909887:9311,14910080:9312,14910081:9313,14910082:9314,14910083:9315,14910084:9316,14910085:9317,14910086:9318,14910087:9319,14910088:9320,14910089:9321,14910090:9322,14910091:9323,14910092:9324,14910093:9325,14910094:9326,14910095:9327,14910096:9328,14910097:9329,14910098:9330,14910099:9331,14910113:9505,14910114:9506,14910115:9507,14910116:9508,14910117:9509,14910118:9510,14910119:9511,14910120:9512,14910121:9513,14910122:9514,14910123:9515,14910124:9516,14910125:9517,14910126:9518,14910127:9519,14910128:9520,14910129:9521,14910130:9522,14910131:9523,14910132:9524,14910133:9525,14910134:9526,14910135:9527,14910136:9528,14910137:9529,14910138:9530,14910139:9531,14910140:9532,14910141:9533,14910142:9534,14910143:9535,14910336:9536,14910337:9537,14910338:9538,14910339:9539,14910340:9540,14910341:9541,14910342:9542,14910343:9543,14910344:9544,14910345:9545,14910346:9546,14910347:9547,14910348:9548,14910349:9549,14910350:9550,14910351:9551,14910352:9552,14910353:9553,14910354:9554,14910355:9555,14910356:9556,14910357:9557,14910358:9558,14910359:9559,14910360:9560,14910361:9561,14910362:9562,14910363:9563,14910364:9564,14910365:9565,14910366:9566,14910367:9567,14910368:9568,14910369:9569,14910370:9570,14910371:9571,14910372:9572,14910373:9573,14910374:9574,14910375:9575,14910376:9576,14910377:9577,14910378:9578,14910379:9579,14910380:9580,14910381:9581,14910382:9582,14910383:9583,14910384:9584,14910385:9585,14910386:9586,14910387:9587,14910388:9588,14910389:9589,14910390:9590,52881:9761,52882:9762,52883:9763,52884:9764,52885:9765,52886:9766,52887:9767,52888:9768,52889:9769,52890:9770,52891:9771,52892:9772,52893:9773,52894:9774,52895:9775,52896:9776,52897:9777,52899:9778,52900:9779,52901:9780,52902:9781,52903:9782,52904:9783,52905:9784,52913:9793,52914:9794,52915:9795,52916:9796,52917:9797,52918:9798,52919:9799,52920:9800,52921:9801,52922:9802,52923:9803,52924:9804,52925:9805,52926:9806,52927:9807,53120:9808,53121:9809,53123:9810,53124:9811,53125:9812,53126:9813,53127:9814,53128:9815,53129:9816,53392:10017,53393:10018,53394:10019,53395:10020,53396:10021,53397:10022,53377:10023,53398:10024,53399:10025,53400:10026,53401:10027,53402:10028,53403:10029,53404:10030,53405:10031,53406:10032,53407:10033,53408:10034,53409:10035,53410:10036,53411:10037,53412:10038,53413:10039,53414:10040,53415:10041,53416:10042,53417:10043,53418:10044,53419:10045,53420:10046,53421:10047,53422:10048,53423:10049,53424:10065,53425:10066,53426:10067,53427:10068,53428:10069,53429:10070,53649:10071,53430:10072,53431:10073,53432:10074,53433:10075,53434:10076,53435:10077,53436:10078,53437:10079,53438:10080,53439:10081,53632:10082,53633:10083,53634:10084,53635:10085,53636:10086,53637:10087,53638:10088,53639:10089,53640:10090,53641:10091,53642:10092,53643:10093,53644:10094,53645:10095,53646:10096,53647:10097,14849152:10273,14849154:10274,14849164:10275,14849168:10276,14849176:10277,14849172:10278,14849180:10279,14849196:10280,14849188:10281,14849204:10282,14849212:10283,14849153:10284,14849155:10285,14849167:10286,14849171:10287,14849179:10288,14849175:10289,14849187:10290,14849203:10291,14849195:10292,14849211:10293,14849419:10294,14849184:10295,14849199:10296,14849192:10297,14849207:10298,14849215:10299,14849181:10300,14849200:10301,14849189:10302,14849208:10303,14849410:10304,14989980:12321,15045782:12322,15050883:12323,15308991:12324,15045504:12325,15107227:12326,15109288:12327,15050678:12328,15302818:12329,15241653:12330,15240348:12331,15182224:12332,15106730:12333,15110049:12334,15120549:12335,15112109:12336,15241638:12337,15239846:12338,15314869:12339,15114899:12340,15047847:12341,15111841:12342,15108529:12343,15052443:12344,15050640:12345,15243707:12346,15311796:12347,15185314:12348,15185598:12349,15314574:12350,15108246:12351,15184543:12352,15246007:12353,15052425:12354,15055541:12355,15109257:12356,15112855:12357,15114632:12358,15308679:12359,15310477:12360,15113615:12361,14990245:12362,14990474:12363,14990733:12364,14991005:12365,15040905:12366,15047602:12367,15049911:12368,15050644:12369,15050881:12370,15052937:12371,15106975:12372,15107215:12373,15107504:12374,15112339:12375,15115397:12376,15172282:12377,15177103:12378,15177136:12379,15181755:12380,15185581:12381,15185839:12382,15238019:12383,15241358:12384,15245731:12385,15248514:12386,15303061:12387,15303098:12388,15043771:12389,14989973:12390,14989989:12391,15048607:12392,15237810:12393,15303553:12394,15180719:12395,14989440:12396,15049649:12397,15121058:12398,15302840:12399,15182002:12400,15240360:12401,15239819:12402,15315119:12403,15041921:12404,15044016:12405,15045309:12406,15045537:12407,15047584:12408,15050683:12409,15056021:12410,15311794:12411,15120299:12412,15238052:12413,15242413:12414,15309218:12577,15309232:12578,15309472:12579,15310779:12580,15044747:12581,15044531:12582,15052423:12583,15172495:12584,15187645:12585,15253378:12586,15309736:12587,15044015:12588,15316380:12589,15182522:12590,14989457:12591,15180435:12592,15239100:12593,15120550:12594,15046808:12595,15045764:12596,15117469:12597,15242394:12598,15315131:12599,15050661:12600,15044265:12601,15119782:12602,15176604:12603,15308431:12604,15047042:12605,14989969:12606,15303051:12607,15309746:12608,15240591:12609,15312012:12610,15044513:12611,15046326:12612,15051952:12613,15056305:12614,15112352:12615,15113139:12616,15114372:12617,15118520:12618,15119283:12619,15119529:12620,15176091:12621,15178632:12622,15182222:12623,15311028:12624,15240113:12625,15245723:12626,15247776:12627,15305645:12628,15120050:12629,15177387:12630,15178634:12631,15312773:12632,15106726:12633,15248513:12634,15251082:12635,15308466:12636,15115918:12637,15044269:12638,15042182:12639,15047826:12640,15048880:12641,15050116:12642,15052468:12643,15055798:12644,15106216:12645,15109801:12646,15110068:12647,15119039:12648,15121556:12649,15172238:12650,15172756:12651,15173017:12652,15173525:12653,15174847:12654,15186049:12655,15239606:12656,15240081:12657,15242903:12658,15303072:12659,15305115:12660,15316123:12661,15049129:12662,15111868:12663,15118746:12664,15176869:12665,15042489:12666,15049902:12667,15050149:12668,15056512:12669,15056796:12670,15108796:12833,15112122:12834,15116458:12835,15117479:12836,15118004:12837,15175307:12838,15187841:12839,15246742:12840,15316140:12841,15316110:12842,15317892:12843,15053473:12844,15118998:12845,15240635:12846,15041668:12847,15053195:12848,15107766:12849,15239046:12850,15114678:12851,15174049:12852,14989721:12853,14991290:12854,15044024:12855,15106473:12856,15120553:12857,15182223:12858,15310771:12859,14989451:12860,15043734:12861,14990254:12862,14990741:12863,14990525:12864,14991009:12865,14990771:12866,15043232:12867,15044527:12868,15046793:12869,15049871:12870,15051649:12871,15052470:12872,15052705:12873,15181713:12874,15112839:12875,15113884:12876,15113910:12877,15117708:12878,15119027:12879,15172011:12880,15175554:12881,15181453:12882,15181502:12883,15182012:12884,15183495:12885,15239857:12886,15240091:12887,15240324:12888,15240631:12889,15241135:12890,15241107:12891,15244710:12892,15248050:12893,15046825:12894,15250088:12895,15253414:12896,15303054:12897,15309982:12898,15243914:12899,14991236:12900,15053736:12901,15108241:12902,15174041:12903,15176891:12904,15239077:12905,15239869:12906,15244222:12907,15250304:12908,15309701:12909,15312019:12910,15312789:12911,14990219:12912,14990490:12913,15247267:12914,15047582:12915,15049098:12916,15049610:12917,15055803:12918,15056811:12919,15106218:12920,15106708:12921,15106466:12922,15107984:12923,15108242:12924,15109008:12925,15111353:12926,15314305:13089,15112614:13090,15114928:13091,15119799:13092,15172016:13093,15177100:13094,15178374:13095,15185333:13096,15239845:13097,15245241:13098,15308427:13099,15309454:13100,15250077:13101,15042481:13102,15043262:13103,15049878:13104,15045299:13105,15052467:13106,15053974:13107,15107496:13108,15115906:13109,15120047:13110,15180429:13111,15242123:13112,15245719:13113,15247794:13114,15306407:13115,15313592:13116,15119788:13117,15312552:13118,15244185:13119,15048355:13120,15114175:13121,15244174:13122,15304846:13123,15043203:13124,15047303:13125,15044740:13126,15055763:13127,15109025:13128,15110841:13129,15114428:13130,15114424:13131,15118011:13132,15175090:13133,15180474:13134,15182251:13135,15247002:13136,15247250:13137,15250859:13138,15252611:13139,15303597:13140,15308451:13141,15309460:13142,15310249:13143,15052198:13144,15053491:13145,15115709:13146,15311245:13147,15311246:13148,15109787:13149,15183008:13150,15116459:13151,15116735:13152,15114934:13153,15315085:13154,15121823:13155,15042994:13156,15046301:13157,15106480:13158,15109036:13159,15119547:13160,15120519:13161,15121297:13162,15241627:13163,15246480:13164,15252868:13165,14989460:13166,15315129:13167,15044534:13168,15115419:13169,15116474:13170,15310468:13171,15114410:13172,15041948:13173,15182723:13174,15241906:13175,15304604:13176,15306380:13177,15047067:13178,15316136:13179,15114402:13180,15240325:13181,15241393:13182,15184549:13345,15042696:13346,15240069:13347,15176614:13348,14989758:13349,14990979:13350,15042208:13351,15052690:13352,15042698:13353,15043480:13354,15043495:13355,15054779:13356,15046298:13357,15048874:13358,15050662:13359,15052428:13360,15052440:13361,15052699:13362,15055282:13363,15055289:13364,15106723:13365,15107231:13366,15107491:13367,15107774:13368,15110043:13369,15111586:13370,15114129:13371,15114643:13372,15115194:13373,15117502:13374,15117715:13375,15118743:13376,15121570:13377,15122071:13378,15121797:13379,15176368:13380,15176856:13381,15178659:13382,15178891:13383,15182783:13384,15183521:13385,15184033:13386,15185833:13387,15187126:13388,15187888:13389,15237789:13390,15239590:13391,15240862:13392,15247027:13393,15248268:13394,15250091:13395,15303300:13396,15307153:13397,15308435:13398,15308433:13399,15308450:13400,15309221:13401,15310739:13402,15312040:13403,15239320:13404,14989496:13405,15044779:13406,15053496:13407,15054732:13408,15175337:13409,15178124:13410,15178940:13411,15053481:13412,15187883:13413,15250571:13414,15309697:13415,15310993:13416,15311252:13417,15311256:13418,14990465:13419,14990478:13420,15044017:13421,15046300:13422,15047080:13423,15048634:13424,15050119:13425,15051913:13426,15052676:13427,15053456:13428,15054988:13429,15055294:13430,15056780:13431,15110062:13432,15113402:13433,15112087:13434,15112098:13435,15113375:13436,15115147:13437,15115140:13438,15116703:13601,15055024:13602,15118213:13603,15118487:13604,15118781:13605,15177151:13606,15181192:13607,15052195:13608,15181952:13609,15185024:13610,15056573:13611,15246991:13612,15247512:13613,15250100:13614,15250871:13615,15252364:13616,15252637:13617,15311778:13618,15313038:13619,15314108:13620,14989952:13621,15040957:13622,15041664:13623,15050387:13624,15052444:13625,15108271:13626,15108736:13627,15111084:13628,15117498:13629,15174304:13630,15177361:13631,15181191:13632,15187625:13633,15245243:13634,15248060:13635,15248816:13636,15109804:13637,15241098:13638,15310496:13639,15044745:13640,15044739:13641,15046315:13642,15114644:13643,15116696:13644,15247792:13645,15179943:13646,15113653:13647,15317901:13648,15044020:13649,15052450:13650,15238298:13651,15243664:13652,15302790:13653,14989464:13654,14989701:13655,14990215:13656,14990481:13657,15044490:13658,15044792:13659,15052462:13660,15056019:13661,15106213:13662,15111569:13663,15113405:13664,15118722:13665,15118770:13666,15119267:13667,15172024:13668,15175811:13669,15182262:13670,15182510:13671,15182984:13672,15185050:13673,15184830:13674,15185318:13675,15112103:13676,15174043:13677,15044283:13678,15053189:13679,15054760:13680,15109010:13681,15109024:13682,15109273:13683,15120544:13684,15243674:13685,15247537:13686,15251357:13687,15305656:13688,15121537:13689,15181478:13690,15314330:13691,14989992:13692,14989995:13693,14989996:13694,14991003:13857,14991008:13858,15041425:13859,15041927:13860,15182774:13861,15041969:13862,15042486:13863,15043988:13864,15043745:13865,15044031:13866,15044523:13867,15046316:13868,15049347:13869,15053729:13870,15056055:13871,15056266:13872,15106223:13873,15106448:13874,15106477:13875,15109279:13876,15111577:13877,15116683:13878,15119233:13879,15174530:13880,15174573:13881,15179695:13882,15238072:13883,15238277:13884,15239304:13885,15242638:13886,15303607:13887,15306657:13888,15310783:13889,15312279:13890,15313306:13891,14990256:13892,15042461:13893,15052973:13894,15112833:13895,15115693:13896,15053184:13897,15113138:13898,15115701:13899,15175305:13900,15114640:13901,15184513:13902,15041413:13903,15043492:13904,15048071:13905,15054782:13906,15305894:13907,15111844:13908,15117475:13909,15117501:13910,15175860:13911,15181441:13912,15181501:13913,15183243:13914,15185802:13915,15239865:13916,15241100:13917,15245759:13918,15246751:13919,15248569:13920,15253393:13921,15304593:13922,15044767:13923,15305344:13924,14989725:13925,15040694:13926,15044517:13927,15043770:13928,15174551:13929,15175318:13930,15179689:13931,15240102:13932,15252143:13933,15312774:13934,15312776:13935,15312786:13936,15041975:13937,15107226:13938,15243678:13939,15046320:13940,15182266:13941,15040950:13942,15052691:13943,15303047:13944,15309445:13945,14989490:13946,15117211:13947,15304615:13948,15053201:13949,15053192:13950,15109784:14113,15182495:14114,15118995:14115,15310260:14116,15252897:14117,15182506:14118,15173258:14119,15309448:14120,15184514:14121,15114391:14122,15186352:14123,15114641:14124,15306156:14125,15043506:14126,15044763:14127,15242923:14128,15247507:14129,15187620:14130,15252365:14131,15303585:14132,15044006:14133,15245960:14134,15181185:14135,14991234:14136,15041214:14137,15042705:14138,15041924:14139,15046035:14140,15047853:14141,15175594:14142,15048331:14143,15050129:14144,15056290:14145,15056516:14146,15106485:14147,15107510:14148,15107495:14149,15107753:14150,15109810:14151,15110330:14152,15111596:14153,15112623:14154,15114626:14155,15120531:14156,15177126:14157,15182013:14158,15184827:14159,15185292:14160,15185561:14161,15186315:14162,15187371:14163,15240334:14164,15240586:14165,15244173:14166,15247496:14167,15247779:14168,15248806:14169,15252413:14170,15311002:14171,15316623:14172,15239864:14173,15253390:14174,15314856:14175,15043207:14176,15108255:14177,15110787:14178,15122304:14179,15309465:14180,15114625:14181,15041169:14182,15117472:14183,15118778:14184,15121812:14185,15182260:14186,15185296:14187,15245696:14188,15247523:14189,15113352:14190,14990262:14191,15040697:14192,15040678:14193,15040933:14194,15041980:14195,15042744:14196,15042979:14197,15046311:14198,15047823:14199,15048837:14200,15051660:14201,15055802:14202,15107762:14203,15108024:14204,15109043:14205,15109554:14206,15115420:14369,15116457:14370,15174077:14371,15174316:14372,15174830:14373,15179924:14374,15180207:14375,15185337:14376,15178892:14377,15237801:14378,15246987:14379,15248537:14380,15250338:14381,15252370:14382,15303075:14383,15306165:14384,15309242:14385,15311253:14386,15313043:14387,15317432:14388,15041923:14389,15044255:14390,15044275:14391,15055291:14392,15056038:14393,15120539:14394,15121040:14395,15175300:14396,15175614:14397,15185283:14398,15239351:14399,15247488:14400,15248314:14401,15309200:14402,14989710:14403,15040651:14404,15044516:14405,15045052:14406,15047610:14407,15050641:14408,15052196:14409,15054769:14410,15055531:14411,15056039:14412,15108280:14413,15111557:14414,15113903:14415,15120790:14416,15174544:14417,15184778:14418,15246004:14419,15237793:14420,15238049:14421,15241136:14422,15243662:14423,15248007:14424,15251368:14425,15304887:14426,15309703:14427,15311271:14428,15318163:14429,14989972:14430,14989970:14431,14990477:14432,15043976:14433,15045001:14434,15044798:14435,15050927:14436,15056524:14437,15056545:14438,15106719:14439,15114919:14440,15116942:14441,15176090:14442,15180417:14443,15248030:14444,15248036:14445,15248823:14446,15304336:14447,14989726:14448,15314825:14449,14989988:14450,14990780:14451,14991023:14452,15040665:14453,15040662:14454,15041929:14455,15041964:14456,15043231:14457,15043257:14458,15043518:14459,15044250:14460,15044515:14461,15044753:14462,15044750:14625,15046281:14626,15048081:14627,15048354:14628,15050173:14629,15052180:14630,15052189:14631,15052431:14632,15054757:14633,15054759:14634,15054775:14635,15055288:14636,15055491:14637,15055514:14638,15055543:14639,15056024:14640,15106450:14641,15107468:14642,15108759:14643,15109016:14644,15109799:14645,15111355:14646,15112322:14647,15112579:14648,15113140:14649,15113645:14650,15114401:14651,15114903:14652,15116171:14653,15118751:14654,15119530:14655,15119785:14656,15120559:14657,15121053:14658,15176882:14659,15178375:14660,15180204:14661,15182015:14662,15184800:14663,15185029:14664,15185048:14665,15185310:14666,15185585:14667,15237269:14668,15237251:14669,15237807:14670,15237809:14671,15238548:14672,15238799:14673,15239338:14674,15240594:14675,15245708:14676,15245729:14677,15248539:14678,15250082:14679,15250364:14680,15303562:14681,15304117:14682,15305137:14683,15179967:14684,15305660:14685,15308452:14686,15309197:14687,15310981:14688,15312537:14689,15313816:14690,15316155:14691,15042971:14692,15043243:14693,15044535:14694,15044744:14695,15049621:14696,15109047:14697,15122336:14698,15249834:14699,15252895:14700,15317689:14701,15041931:14702,15042747:14703,15045002:14704,15047613:14705,15182208:14706,15304119:14707,15316384:14708,15317906:14709,15175044:14710,15121545:14711,15238576:14712,15176849:14713,15056829:14714,15106970:14715,15313576:14716,15174555:14717,15253180:14718,15117732:14881,15310979:14882,14990218:14883,15047600:14884,15048100:14885,15049406:14886,15051162:14887,15106472:14888,15107975:14889,15112335:14890,15112326:14891,15114425:14892,15114929:14893,15120311:14894,15177621:14895,15185082:14896,15239598:14897,15314306:14898,14989979:14899,14990736:14900,15044489:14901,15045766:14902,15054255:14903,15054758:14904,15054766:14905,15114171:14906,15119001:14907,15176115:14908,15179906:14909,15247760:14910,15306390:14911,15246239:14912,15048080:14913,15055527:14914,15109291:14915,15041205:14916,15041196:14917,15042189:14918,15113344:14919,15045513:14920,15049118:14921,15050427:14922,15052464:14923,15056297:14924,15108493:14925,15109793:14926,15114429:14927,15117747:14928,15120520:14929,15172029:14930,15304583:14931,15174272:14932,15179925:14933,15179942:14934,15181229:14935,15111822:14936,15185072:14937,15241116:14938,15246209:14939,15252617:14940,15309467:14941,15042980:14942,15047848:14943,15113616:14944,15187370:14945,15250081:14946,15042228:14947,15048066:14948,15308970:14949,15048890:14950,15115914:14951,15237812:14952,15045298:14953,15053966:14954,15048636:14955,15180437:14956,15316922:14957,14990748:14958,15042954:14959,15045259:14960,15110334:14961,15112360:14962,15113364:14963,15114165:14964,15182468:14965,15183254:14966,15185058:14967,15305903:14968,15114652:14969,15314605:14970,15183033:14971,15043737:14972,15042186:14973,15042743:14974,15052703:15137,15109046:15138,15110830:15139,15111078:15140,15113389:15141,15118010:15142,15242921:15143,15309713:15144,15178384:15145,15314838:15146,15109516:15147,15305862:15148,15314603:15149,15178431:15150,15112594:15151,14989449:15152,15041176:15153,15044482:15154,15053233:15155,15106984:15156,15110802:15157,15111587:15158,15114655:15159,15173542:15160,15175562:15161,15176867:15162,15183511:15163,15186562:15164,15243925:15165,15249027:15166,15250331:15167,15304120:15168,15312016:15169,15111852:15170,15112875:15171,15117963:15172,14990229:15173,14990228:15174,14990522:15175,14990783:15176,15042746:15177,15044536:15178,15044530:15179,15046563:15180,15047579:15181,15049643:15182,15050635:15183,15050633:15184,15050687:15185,15052176:15186,15053197:15187,15054978:15188,15055019:15189,15056791:15190,15106205:15191,15109255:15192,15111343:15193,15052188:15194,15111855:15195,15111869:15196,15112104:15197,15113885:15198,15117730:15199,15117755:15200,15118479:15201,15175045:15202,15181193:15203,15181697:15204,15184824:15205,15185049:15206,15185067:15207,15237794:15208,15238274:15209,15239091:15210,15246998:15211,15247774:15212,15247785:15213,15247782:15214,15248012:15215,15248302:15216,15250311:15217,15250332:15218,15309708:15219,15311804:15220,15117743:15221,14989963:15222,14990524:15223,14990989:15224,15041936:15225,15052183:15226,15052730:15227,15107464:15228,15109249:15229,15112578:15230,15117473:15393,15121291:15394,15119035:15395,15173822:15396,15176381:15397,15177620:15398,15180673:15399,15180986:15400,15237260:15401,15237299:15402,15239082:15403,15241876:15404,15253150:15405,15118736:15406,15317439:15407,15056015:15408,15248792:15409,15316139:15410,15182778:15411,15252408:15412,15052429:15413,15309739:15414,14989443:15415,15044529:15416,15048631:15417,15049905:15418,15051657:15419,15052452:15420,15106697:15421,15120831:15422,15121542:15423,15177406:15424,15250346:15425,15052447:15426,15242368:15427,15183776:15428,15040946:15429,15114164:15430,15239837:15431,15053217:15432,15242634:15433,15186078:15434,15239310:15435,15042201:15436,15052932:15437,15109544:15438,15250854:15439,15111836:15440,15173038:15441,15180990:15442,15185047:15443,15237253:15444,15248541:15445,15252362:15446,15303086:15447,15244167:15448,15303338:15449,15040671:15450,15043514:15451,15052986:15452,15113619:15453,15172028:15454,15173813:15455,15304076:15456,15304584:15457,15305899:15458,15240101:15459,15052674:15460,15056049:15461,15107001:15462,14989499:15463,15044502:15464,15052424:15465,15108491:15466,15113393:15467,15117962:15468,15174569:15469,15175584:15470,15181998:15471,15238571:15472,15251107:15473,15304082:15474,15312534:15475,15041682:15476,15044503:15477,15045034:15478,15052735:15479,15109768:15480,15116473:15481,15185580:15482,15309952:15483,15047578:15484,15044494:15485,15045032:15486,15052439:15649,15052977:15650,15054750:15651,14991278:15652,15107201:15653,15109054:15654,15119538:15655,15181696:15656,15181707:15657,15185282:15658,15186317:15659,15187858:15660,15239085:15661,15239327:15662,15241872:15663,15245702:15664,15246770:15665,15249040:15666,15251892:15667,15252655:15668,15302833:15669,15304075:15670,15304108:15671,15309702:15672,15304348:15673,14990208:15674,14990735:15675,15041925:15676,15043969:15677,15056531:15678,15108238:15679,15114132:15680,15118721:15681,15120523:15682,15175075:15683,15186086:15684,15304589:15685,15305347:15686,15044500:15687,15049881:15688,15052479:15689,15120273:15690,15181213:15691,15186094:15692,15184539:15693,15049150:15694,15173279:15695,15042490:15696,15245715:15697,15253424:15698,14991242:15699,15053755:15700,15112357:15701,15179436:15702,15182755:15703,15239324:15704,15312831:15705,15042438:15706,15056554:15707,15112108:15708,15115695:15709,15117961:15710,15120307:15711,15121046:15712,15121828:15713,15178686:15714,15185044:15715,15054753:15716,15303093:15717,15304327:15718,15310982:15719,15042470:15720,15042717:15721,15108480:15722,15112849:15723,15113113:15724,15120538:15725,15055542:15726,15185810:15727,15187378:15728,15113144:15729,15242927:15730,15243191:15731,15248312:15732,15043241:15733,15044505:15734,15050163:15735,15055503:15736,15056528:15737,15106453:15738,15305636:15739,15309220:15740,15041207:15741,15041695:15742,15043485:15905,15043744:15906,15043975:15907,15044524:15908,15045544:15909,15046022:15910,15045809:15911,15046807:15912,15050152:15913,15050430:15914,15050940:15915,15052469:15916,15052934:15917,15052943:15918,15052945:15919,15052954:15920,15055492:15921,15055498:15922,15055776:15923,15056304:15924,15108543:15925,15108740:15926,15109019:15927,15109772:15928,15109559:15929,15112327:15930,15112332:15931,15112365:15932,15112630:15933,15113662:15934,15114914:15935,15116447:15936,15116469:15937,15119036:15938,15120008:15939,15120521:15940,15120792:15941,15172796:15942,15172774:15943,15173031:15944,15177607:15945,15178881:15946,15180189:15947,15180929:15948,15181221:15949,15181744:15950,15182752:15951,15182993:15952,15184551:15953,15185081:15954,15237782:15955,15241110:15956,15241867:15957,15242633:15958,15245725:15959,15246259:15960,15247519:15961,15247548:15962,15247764:15963,15247795:15964,15249825:15965,15250334:15966,15304356:15967,15305126:15968,15306174:15969,15306904:15970,15309468:15971,15310488:15972,14989450:15973,14989448:15974,14989470:15975,14989719:15976,15042199:15977,15042992:15978,15048590:15979,15048884:15980,15049612:15981,15051938:15982,15055032:15983,15106949:15984,15111102:15985,15113633:15986,15113622:15987,15119748:15988,15174326:15989,15177139:15990,15182243:15991,15241912:15992,15248818:15993,15304376:15994,15305888:15995,15046833:15996,15048628:15997,15311806:15998,15109037:16161,15115405:16162,15117974:16163,15173549:16164,15186324:16165,15237559:16166,15239602:16167,15247270:16168,15311775:16169,15244693:16170,15253169:16171,15052987:16172,14990520:16173,14991265:16174,14991029:16175,15045767:16176,15050912:16177,15052701:16178,15052713:16179,15056771:16180,15107470:16181,15109295:16182,15111856:16183,15112587:16184,15115182:16185,15115931:16186,15119800:16187,15120305:16188,15176883:16189,15177401:16190,15178911:16191,15181214:16192,15181734:16193,15185075:16194,15239075:16195,15239855:16196,15242922:16197,15247018:16198,15247546:16199,15252139:16200,15253147:16201,15302834:16202,15304605:16203,15309959:16204,14990010:16205,14990209:16206,15042691:16207,15049141:16208,15049644:16209,15052939:16210,15176858:16211,15052989:16212,15238542:16213,15247498:16214,15253381:16215,15309219:16216,15310253:16217,15183013:16218,15248271:16219,15310984:16220,15304098:16221,15047603:16222,15044264:16223,15302807:16224,15044793:16225,15048322:16226,15055013:16227,15109800:16228,15118516:16229,15172234:16230,15179169:16231,15184523:16232,15187872:16233,15245744:16234,15303042:16235,15304084:16236,15305872:16237,15305880:16238,15309455:16239,15176094:16240,15313796:16241,15053959:16242,15054249:16243,15111600:16244,15113890:16245,15251112:16246,15309723:16247,15109550:16248,15113609:16249,15115417:16250,15241093:16251,15310999:16252,15309696:16253,15246270:16254,15122052:16417,15110586:16418,15052728:16419,14989462:16420,15171756:16421,15177117:16422,15112367:16423,15042436:16424,15042742:16425,15043490:16426,15050643:16427,15056513:16428,15106215:16429,15108240:16430,15111359:16431,15111604:16432,15112351:16433,15112628:16434,15115186:16435,15114390:16436,15117731:16437,15120517:16438,15174066:16439,15176863:16440,15178651:16441,15184574:16442,15237526:16443,15049648:16444,15246269:16445,15246783:16446,15248032:16447,15248019:16448,15248267:16449,15302813:16450,15304338:16451,15310226:16452,15310233:16453,15111817:16454,15181966:16455,15238278:16456,15309499:16457,15055021:16458,15106972:16459,15108250:16460,15111845:16461,15112340:16462,15113872:16463,15179699:16464,15182221:16465,15184269:16466,15186110:16467,15238282:16468,15250092:16469,15250852:16470,15251361:16471,15251871:16472,15180457:16473,15042695:16474,15109017:16475,15109797:16476,15110530:16477,15108760:16478,15247533:16479,15182467:16480,15183744:16481,15248044:16482,15309738:16483,15185334:16484,15239308:16485,15244681:16486,14990233:16487,15041928:16488,15043971:16489,15044e3:16490,15052451:16491,15052930:16492,15052950:16493,15054749:16494,15108262:16495,15108487:16496,15110832:16497,15114387:16498,15114420:16499,15119241:16500,15119749:16501,15119511:16502,15114131:16503,15121820:16504,15173006:16505,15173053:16506,15112075:16507,15182271:16508,15183533:16509,15185818:16510,15186314:16673,15187624:16674,15238586:16675,15239323:16676,15239353:16677,15242918:16678,15247790:16679,15250318:16680,15251381:16681,15303096:16682,15303095:16683,15305389:16684,15305361:16685,15308419:16686,15314606:16687,15042957:16688,15046276:16689,15121592:16690,15172790:16691,15041960:16692,15181445:16693,15186325:16694,15238835:16695,15184782:16696,15047052:16697,15049105:16698,15053480:16699,15109802:16700,15113150:16701,15113149:16702,15115674:16703,15174553:16704,15177359:16705,15177358:16706,15180942:16707,15181206:16708,15181727:16709,15184535:16710,15185056:16711,15185284:16712,15243399:16713,15247540:16714,15308987:16715,15303073:16716,15318176:16717,15041447:16718,15042997:16719,15044492:16720,15044514:16721,15040649:16722,15046314:16723,15049646:16724,15050127:16725,15173821:16726,15052427:16727,15053220:16728,15043741:16729,15106979:16730,15106995:16731,15109532:16732,15109763:16733,15109311:16734,15109819:16735,15111053:16736,15112105:16737,15113145:16738,15054755:16739,15116173:16740,15116221:16741,15121557:16742,15173541:16743,14989961:16744,15177641:16745,15178680:16746,15182483:16747,15184799:16748,15185807:16749,15185564:16750,15237537:16751,15240585:16752,15240600:16753,15241644:16754,15241916:16755,15243195:16756,15246213:16757,15250864:16758,15302785:16759,15303085:16760,15306391:16761,15309980:16762,15313042:16763,15041423:16764,15049367:16765,15107726:16766,15239059:16929,15242421:16930,15250568:16931,15302816:16932,14991235:16933,15040948:16934,15042951:16935,15044019:16936,15106479:16937,15109513:16938,15113631:16939,15120556:16940,15251123:16941,15302815:16942,14991255:16943,15053214:16944,15250314:16945,15112079:16946,15185562:16947,15043986:16948,15245974:16949,15041974:16950,15110019:16951,15052184:16952,15052203:16953,15052938:16954,15110285:16955,15113617:16956,15303068:16957,14990230:16958,15049882:16959,15049898:16960,15118768:16961,15247761:16962,15045822:16963,15048853:16964,15050405:16965,15106992:16966,15108499:16967,15114113:16968,15239349:16969,15115669:16970,15309184:16971,15312772:16972,15313064:16973,14990739:16974,15048838:16975,15052734:16976,15237264:16977,15053489:16978,15055023:16979,15056517:16980,15106208:16981,15107467:16982,15108276:16983,15113151:16984,15119280:16985,15121310:16986,15238030:16987,15238591:16988,15240084:16989,15245963:16990,15250104:16991,15302784:16992,15302830:16993,15309450:16994,15317915:16995,15314843:16996,14990243:16997,15044528:16998,15049895:16999,15183020:17e3,15304333:17001,15311244:17002,15316921:17003,15121309:17004,15171751:17005,15043987:17006,15046020:17007,15052421:17008,15108504:17009,15108766:17010,15109011:17011,15119010:17012,15122351:17013,15175842:17014,15247511:17015,15306936:17016,15122305:17017,15248318:17018,15240376:17019,15042471:17020,15244216:17021,15044522:17022,15044521:17185,14990726:17186,15303060:17187,15253168:17188,15050154:17189,15238321:17190,15054781:17191,15182762:17192,15253183:17193,15115162:17194,15249591:17195,15174584:17196,15315336:17197,15116477:17198,15248048:17199,14989497:17200,15043992:17201,15046790:17202,15048102:17203,15108997:17204,15109794:17205,15112102:17206,15117710:17207,15120289:17208,15120795:17209,15172269:17210,15179693:17211,15182767:17212,15183530:17213,15185595:17214,15237309:17215,15238022:17216,15244171:17217,15248021:17218,15306139:17219,15047587:17220,15049607:17221,15056062:17222,15111853:17223,15112854:17224,15116928:17225,15118005:17226,15176887:17227,15248263:17228,15040676:17229,15179685:17230,15047856:17231,15056027:17232,15106469:17233,15112634:17234,15118752:17235,15177652:17236,15181978:17237,15187374:17238,15239092:17239,15244440:17240,15303045:17241,15312563:17242,15183753:17243,15177116:17244,15182777:17245,15183249:17246,15242116:17247,15302800:17248,15181737:17249,15182482:17250,15240374:17251,15051681:17252,15179136:17253,14989485:17254,14990258:17255,15052441:17256,15056800:17257,15108797:17258,15112380:17259,15114161:17260,15119272:17261,15243691:17262,15245751:17263,15247547:17264,15304078:17265,15305651:17266,15312784:17267,15116439:17268,15171750:17269,15174826:17270,15240103:17271,15241623:17272,15250095:17273,14989441:17274,15041926:17275,15042443:17276,15046283:17277,15052725:17278,15054998:17441,15055027:17442,15055489:17443,15056020:17444,15056053:17445,15056299:17446,15056564:17447,15108018:17448,15109265:17449,15112866:17450,15113373:17451,15121838:17452,15174034:17453,15176890:17454,15178938:17455,15237556:17456,15238329:17457,15238584:17458,15244726:17459,15248063:17460,15248284:17461,15251077:17462,15251379:17463,15305370:17464,15308215:17465,15310978:17466,15315877:17467,15043461:17468,15109527:17469,15178676:17470,15113365:17471,15118984:17472,15175565:17473,15250307:17474,15306414:17475,15309235:17476,15119525:17477,15049372:17478,15115406:17479,15116172:17480,15253437:17481,15306394:17482,15177627:17483,15302810:17484,15049114:17485,15114370:17486,15109812:17487,15116219:17488,14990723:17489,15121580:17490,15114136:17491,15253179:17492,15242406:17493,15185588:17494,15306132:17495,15115455:17496,15121840:17497,15048106:17498,15049655:17499,15051948:17500,15185068:17501,15173802:17502,15044746:17503,15304611:17504,15316660:17505,14989997:17506,14990734:17507,15040924:17508,15040949:17509,15042947:17510,15250078:17511,15045e3:17512,15048868:17513,15052442:17514,15055005:17515,15055509:17516,15055533:17517,15055799:17518,15056031:17519,15106700:17520,15108789:17521,15109306:17522,15110032:17523,15114927:17524,15118720:17525,15180423:17526,15181454:17527,15181963:17528,15185824:17529,15239559:17530,15247490:17531,15248294:17532,15251844:17533,15302803:17534,15303352:17697,15303853:17698,15304600:17699,15318158:17700,15119269:17701,15110552:17702,15111074:17703,15111605:17704,15121332:17705,15178372:17706,15183003:17707,15303081:17708,15306641:17709,15121082:17710,15045554:17711,15056569:17712,15110820:17713,15252877:17714,15253421:17715,15305092:17716,15041976:17717,15049131:17718,15049897:17719,15053205:17720,15055511:17721,15120315:17722,15186575:17723,15176860:17724,15250108:17725,15252386:17726,15311259:17727,15172281:17728,14990493:17729,15118015:17730,15122097:17731,15176880:17732,15309755:17733,15041934:17734,15044752:17735,15048885:17736,15049111:17737,15050412:17738,15053216:17739,15056530:17740,15111831:17741,15113628:17742,15120545:17743,15178171:17744,15241119:17745,15250349:17746,15302804:17747,15303613:17748,15306125:17749,15179941:17750,15179962:17751,15043242:17752,15055526:17753,15047839:17754,15050164:17755,15106194:17756,15040658:17757,15041946:17758,15042220:17759,15042445:17760,15042688:17761,15045776:17762,15049108:17763,15049112:17764,15050135:17765,15052437:17766,15053750:17767,15054475:17768,15106748:17769,15108757:17770,15110317:17771,15113649:17772,15114627:17773,15114940:17774,15115167:17775,15178647:17776,15120280:17777,15120815:17778,15120027:17779,15172015:17780,15173512:17781,15056275:17782,15177624:17783,15181239:17784,15183241:17785,15183252:17786,15183250:17787,15184790:17788,15185329:17789,15042736:17790,15241635:17953,15242665:17954,15243172:17955,15247502:17956,15248516:17957,15249798:17958,15251599:17959,15302787:17960,15302799:17961,15306905:17962,15309238:17963,15311021:17964,15313072:17965,15308696:17966,15041421:17967,15043477:17968,15044748:17969,15048834:17970,15052942:17971,15107751:17972,15110814:17973,15119518:17974,15179443:17975,15182757:17976,15238068:17977,15241348:17978,15303059:17979,15305349:17980,15053728:17981,15316103:17982,15043775:17983,15056535:17984,15056563:17985,15120028:17986,15174073:17987,15179171:17988,15181503:17989,15183780:17990,15118226:17991,15174572:17992,15248045:17993,15114371:17994,15116705:17995,15042488:17996,15182465:17997,15115444:17998,15053194:17999,15315894:18e3,15240107:18001,15052677:18002,15304073:18003,15171742:18004,15047096:18005,15053231:18006,15106951:18007,15111590:18008,15118988:18009,15249818:18010,15303041:18011,15310995:18012,15045009:18013,15113095:18014,15304845:18015,15050120:18016,15303331:18017,15042181:18018,14989709:18019,15042474:18020,15242905:18021,15248526:18022,15171992:18023,15109562:18024,15306123:18025,15115682:18026,15312564:18027,15186052:18028,15177143:18029,15043991:18030,15115680:18031,15252383:18032,15309731:18033,15118749:18034,14989964:18035,15052988:18036,15056016:18037,15253417:18038,15043714:18039,15250321:18040,15237769:18041,15243705:18042,15055807:18043,15112101:18044,14989747:18045,15041957:18046,15050370:18209,15052991:18210,15310766:18211,14990267:18212,15050378:18213,15056781:18214,15248013:18215,15122337:18216,15181488:18217,15181218:18218,15052711:18219,15241649:18220,15174827:18221,15173297:18222,15055284:18223,15056821:18224,15109563:18225,15110810:18226,15173507:18227,15184536:18228,14989699:18229,15055804:18230,14989707:18231,15048604:18232,15047330:18233,15106729:18234,15122307:18235,15185037:18236,15238077:18237,15238323:18238,15238847:18239,15253170:18240,15246999:18241,15243940:18242,15054772:18243,15108746:18244,15110829:18245,15246983:18246,15113655:18247,15119266:18248,15119550:18249,15175862:18250,15179956:18251,15051142:18252,15187381:18253,15239853:18254,15312556:18255,14991283:18256,15055747:18257,15109021:18258,15109778:18259,15111575:18260,15113647:18261,15178627:18262,15174028:18263,15238028:18264,15237818:18265,15252649:18266,15304077:18267,15040653:18268,15048633:18269,15051410:18270,15114885:18271,15115699:18272,15173028:18273,15174589:18274,15250103:18275,15049650:18276,15250336:18277,15309226:18278,15302809:18279,15244735:18280,15181732:18281,15179687:18282,15241385:18283,14990511:18284,15042981:18285,15043994:18286,15109005:18287,15114127:18288,15119242:18289,15178173:18290,15183508:18291,15184533:18292,15239350:18293,15242884:18294,15253419:18295,15113117:18296,15121568:18297,15173766:18298,15186075:18299,15240875:18300,15312769:18301,15317670:18302,15042493:18465,15183537:18466,15180210:18467,15183544:18468,15237767:18469,15183240:18470,15117224:18471,15055265:18472,15237772:18473,15177105:18474,15177120:18475,15041963:18476,15305122:18477,15121036:18478,15178170:18479,15304343:18480,15313834:18481,14990480:18482,15187376:18483,15108764:18484,15183247:18485,15308453:18486,15315881:18487,15047098:18488,15049113:18489,15244196:18490,15309500:18491,14990516:18492,15042724:18493,15043978:18494,15044493:18495,15044507:18496,15054982:18497,15110316:18498,15111825:18499,15113663:18500,15118526:18501,15118734:18502,15174024:18503,15174319:18504,15175597:18505,15177108:18506,15186305:18507,15239340:18508,15243177:18509,15250089:18510,15183748:18511,15304582:18512,15173033:18513,15310994:18514,15311791:18515,15109309:18516,15112617:18517,15177130:18518,15178660:18519,15180688:18520,15242627:18521,15244206:18522,15043754:18523,15043985:18524,15044774:18525,15050371:18526,15055495:18527,15056316:18528,15106738:18529,15108489:18530,15108537:18531,15108779:18532,15111824:18533,15118228:18534,15119244:18535,15177394:18536,15178414:18537,15180433:18538,15181720:18539,15185803:18540,15187383:18541,15237797:18542,15245995:18543,15248057:18544,15250107:18545,15303103:18546,15310238:18547,15311771:18548,15116427:18549,15184056:18550,15041177:18551,15052990:18552,15056558:18553,15113863:18554,15118232:18555,15175861:18556,15178889:18557,15187598:18558,15318203:18721,15114122:18722,15181975:18723,15043769:18724,15177355:18725,15313837:18726,15056294:18727,15238813:18728,15241137:18729,15237784:18730,15056060:18731,15056773:18732,15177122:18733,15183238:18734,15302844:18735,15114663:18736,15050667:18737,15051419:18738,15185040:18739,15178174:18740,15248556:18741,14991285:18742,15056298:18743,15116441:18744,15118519:18745,15121538:18746,15176610:18747,15181224:18748,15245736:18749,15247765:18750,15249849:18751,15055775:18752,15110031:18753,15177605:18754,15181714:18755,15240087:18756,15305896:18757,15305650:18758,15241884:18759,15244205:18760,15315117:18761,15045505:18762,15056300:18763,15111820:18764,15119772:18765,15171733:18766,15250087:18767,15250323:18768,15311035:18769,15111567:18770,15176630:18771,14989453:18772,14990232:18773,15048608:18774,15049899:18775,15051174:18776,15052684:18777,15042216:18778,15054979:18779,15055516:18780,15106198:18781,15108534:18782,15111607:18783,15111847:18784,15112622:18785,15119790:18786,15173814:18787,15183014:18788,15238544:18789,15238810:18790,15239833:18791,15248796:18792,15250080:18793,15250342:18794,15250868:18795,15308956:18796,15309188:18797,14991022:18798,15110827:18799,15117734:18800,15239326:18801,15241633:18802,15242666:18803,15303592:18804,15052929:18805,15115667:18806,15311528:18807,15241658:18808,15242647:18809,14990479:18810,15042991:18811,15056553:18812,15055237:18813,15113357:18814,15181455:18977,15238585:18978,15246471:18979,15246982:18980,15120309:18981,15056023:18982,15108501:18983,15119032:18984,14990223:18985,15174057:18986,15314578:18987,15042694:18988,15044795:18989,15047092:18990,15049395:18991,15107748:18992,15108526:18993,15172762:18994,15050158:18995,15184521:18996,15184798:18997,15185051:18998,15309744:18999,15111815:19e3,15237534:19001,14989465:19002,14990773:19003,15041973:19004,15049088:19005,15055267:19006,15055283:19007,15056010:19008,15114116:19009,14989478:19010,15242429:19011,15308425:19012,15309211:19013,15184307:19014,15310977:19015,15041467:19016,15049601:19017,15178134:19018,15180455:19019,15042725:19020,15179429:19021,15242385:19022,15183494:19023,15040911:19024,15049865:19025,15174023:19026,15183751:19027,15185832:19028,15253178:19029,15253396:19030,15303053:19031,14991039:19032,15043465:19033,15050921:19034,15056001:19035,15310509:19036,14991261:19037,15239319:19038,15305642:19039,15047811:19040,15109525:19041,15117737:19042,15176875:19043,15246236:19044,15252628:19045,15182210:19046,15043487:19047,15049363:19048,15107477:19049,15108234:19050,15112878:19051,15118221:19052,15184063:19053,15241129:19054,15040675:19055,14991288:19056,15043717:19057,15044998:19058,15048881:19059,15050121:19060,15052445:19061,15053744:19062,15053743:19063,15053993:19064,15055510:19065,15108785:19066,15109543:19067,15111358:19068,15111865:19069,15113355:19070,15119253:19233,15119265:19234,15172537:19235,15179954:19236,15186091:19237,15238046:19238,15239859:19239,15241356:19240,15242156:19241,15244418:19242,15246482:19243,15247530:19244,15249802:19245,15303334:19246,15305618:19247,15311805:19248,15315891:19249,15316396:19250,14989711:19251,14989985:19252,15041165:19253,15042966:19254,15048074:19255,15050408:19256,15055037:19257,15056792:19258,15056793:19259,15108287:19260,15112884:19261,15113371:19262,15114128:19263,15115154:19264,15042194:19265,15185057:19266,15237802:19267,15238824:19268,15248512:19269,15250060:19270,15250111:19271,15305150:19272,15308978:19273,15044768:19274,15311020:19275,15043735:19276,15041429:19277,15043996:19278,15049384:19279,15110834:19280,15113396:19281,15174055:19282,15179174:19283,15182214:19284,15304614:19285,15043459:19286,15119009:19287,15117958:19288,15048832:19289,15055244:19290,15050132:19291,15113388:19292,15187899:19293,15042465:19294,15178630:19295,15110569:19296,15180712:19297,15314324:19298,15317691:19299,15048587:19300,15050425:19301,15112359:19302,15113882:19303,15118222:19304,15045545:19305,15116185:19306,15055253:19307,15238812:19308,15113877:19309,15314602:19310,15114174:19311,15315346:19312,15114653:19313,14989990:19314,14991267:19315,15044488:19316,15108793:19317,15113387:19318,15119019:19319,15253380:19320,14991021:19321,15186349:19322,15317695:19323,14989447:19324,15107490:19325,15121024:19326,15121579:19489,15242387:19490,15045043:19491,15113386:19492,15314309:19493,15054771:19494,15183509:19495,15053484:19496,15052678:19497,15244444:19498,15120778:19499,15242129:19500,15181972:19501,15238280:19502,15050393:19503,15184525:19504,15118481:19505,15178912:19506,15043481:19507,15049890:19508,15172769:19509,15174047:19510,15179675:19511,15309991:19512,15316385:19513,15115403:19514,15051199:19515,15050904:19516,15042213:19517,15044749:19518,15045053:19519,15112334:19520,15178655:19521,15253431:19522,15305368:19523,15315892:19524,15050666:19525,15174045:19526,15121285:19527,15041933:19528,15115145:19529,15185599:19530,15185836:19531,15310242:19532,15317690:19533,15110584:19534,15116449:19535,15240322:19536,15050372:19537,15052191:19538,15118235:19539,15174811:19540,15178674:19541,15185586:19542,15237271:19543,15241881:19544,15041714:19545,15113384:19546,15317913:19547,15178670:19548,15113634:19549,15043519:19550,15312005:19551,15052964:19552,15108283:19553,15184318:19554,15250096:19555,15046031:19556,15106742:19557,15185035:19558,15308416:19559,15043713:19560,14989727:19561,15042230:19562,15049884:19563,15173818:19564,15237302:19565,15304590:19566,15056037:19567,15179682:19568,15044228:19569,15056313:19570,15185028:19571,15242924:19572,15247539:19573,15252109:19574,15310230:19575,15114163:19576,15242926:19577,15307155:19578,15107209:19579,15107208:19580,15119033:19581,15178130:19582,15248301:19745,15252664:19746,15045807:19747,14990737:19748,15041706:19749,15043463:19750,15044491:19751,15052453:19752,15055293:19753,15106720:19754,15107714:19755,15110038:19756,15113353:19757,15114138:19758,15120807:19759,15120012:19760,15174838:19761,15174839:19762,15176881:19763,15181200:19764,15246229:19765,15248024:19766,15303050:19767,15303313:19768,15303605:19769,15309700:19770,15244941:19771,15049877:19772,14989960:19773,14990745:19774,14989454:19775,15248009:19776,15252671:19777,15310992:19778,15041197:19779,15055292:19780,15050390:19781,15052473:19782,15055544:19783,15110042:19784,15110074:19785,15111041:19786,15113116:19787,15115658:19788,15116184:19789,15119499:19790,15121078:19791,15173268:19792,15176872:19793,15182511:19794,15187594:19795,15237248:19796,15241609:19797,15242121:19798,15246977:19799,15248545:19800,15251594:19801,15303077:19802,15309245:19803,15312010:19804,15107518:19805,15108753:19806,15117490:19807,15118979:19808,15119796:19809,15187852:19810,15187900:19811,15120256:19812,15187589:19813,15244986:19814,15246264:19815,15113637:19816,15240881:19817,15311036:19818,15309751:19819,15119515:19820,15185313:19821,15241405:19822,15304106:19823,14989745:19824,15044021:19825,15054224:19826,15117444:19827,15122347:19828,15243149:19829,15243437:19830,15247015:19831,15042729:19832,15044751:19833,15053221:19834,15113614:19835,15114920:19836,15175814:19837,15176323:19838,15177634:20001,15246223:20002,15246241:20003,15304588:20004,15309730:20005,15309240:20006,15056523:20007,15175303:20008,15182731:20009,15241614:20010,15109792:20011,15177125:20012,15043209:20013,15119745:20014,15121052:20015,15175817:20016,15177113:20017,15180203:20018,15184530:20019,15309446:20020,15182748:20021,15318669:20022,14991030:20023,15107502:20024,15112069:20025,15243676:20026,14989958:20027,14989998:20028,15041434:20029,14989473:20030,15042444:20031,15052718:20032,15111833:20033,15114881:20034,15120060:20035,15174815:20036,15178114:20037,15179437:20038,15181980:20039,15184807:20040,15239599:20041,15248274:20042,15303100:20043,15304591:20044,15309237:20045,15311e3:20046,15043227:20047,15185809:20048,15040683:20049,15044248:20050,15113879:20051,15120267:20052,15173520:20053,15175859:20054,15239080:20055,15252650:20056,15309475:20057,15315351:20058,15317663:20059,15176096:20060,15049089:20061,15120025:20062,15185071:20063,15311262:20064,14990244:20065,14990518:20066,14990987:20067,15042231:20068,15043249:20069,15054522:20070,15106204:20071,15175346:20072,15180988:20073,15240083:20074,15304884:20075,15309495:20076,15309750:20077,15309962:20078,15317655:20079,15318434:20080,15112870:20081,15117748:20082,15042711:20083,15043235:20084,15172488:20085,15246210:20086,15055753:20087,15106443:20088,15107728:20089,15121571:20090,15173001:20091,15184062:20092,15185844:20093,15237551:20094,15242158:20257,15302819:20258,15305900:20259,15044994:20260,15314351:20261,15117203:20262,15172233:20263,15250306:20264,15251375:20265,15310002:20266,15043252:20267,15051137:20268,15055754:20269,15056004:20270,15113367:20271,15115708:20272,15115924:20273,15119786:20274,15121551:20275,15174050:20276,15174588:20277,15183789:20278,15237249:20279,15237566:20280,15244683:20281,15303566:20282,15041965:20283,15317651:20284,15181444:20285,15237771:20286,15305906:20287,15248278:20288,15040685:20289,15045260:20290,15247793:20291,15117738:20292,15250308:20293,15238279:20294,15106961:20295,15113888:20296,15316914:20297,14989977:20298,14989976:20299,15315088:20300,15247787:20301,15243137:20302,15242664:20303,15115392:20304,15120830:20305,15180439:20306,15238549:20307,15056012:20513,14989456:20514,14989461:20515,14989482:20516,14989489:20517,14989494:20518,14989500:20519,14989503:20520,14989698:20521,14989718:20522,14989720:20523,14989954:20524,14989957:20525,15249835:20526,14989962:20527,15239314:20528,15056013:20529,14989966:20530,14989982:20531,14989983:20532,14989984:20533,14989986:20534,1499e4:20535,14990003:20536,14990006:20537,14990222:20538,14990221:20539,14990212:20540,14990214:20541,14990210:20542,14990231:20543,14990238:20544,14990253:20545,14990239:20546,14990263:20547,14990473:20548,14990746:20549,14990512:20550,14990747:20551,14990749:20552,14990743:20553,14990727:20554,14990774:20555,14990984:20556,14990991:20557,14991e3:20558,14990779:20559,14990761:20560,14990768:20561,14990993:20562,14990767:20563,14990982:20564,14990998:20565,15041688:20566,14991252:20567,14991263:20568,14991246:20569,14991256:20570,14991259:20571,14991249:20572,14991258:20573,14991248:20574,14991268:20575,14991269:20576,15040666:20577,15040680:20578,15040660:20579,15040682:20580,15040677:20581,15040645:20582,14990492:20583,14991286:20584,15040673:20585,15040681:20586,15040684:20587,14991294:20588,14991279:20589,15040657:20590,15040646:20591,15040899:20592,15040903:20593,15113347:20594,15040917:20595,15040912:20596,15040904:20597,15040922:20598,15040918:20599,15040940:20600,15040952:20601,15041152:20602,15041178:20603,15041157:20604,15041204:20605,15041202:20606,15041417:20769,15041418:20770,15041203:20771,15041410:20772,15041430:20773,15041438:20774,15041445:20775,15041453:20776,15041443:20777,15041454:20778,15041465:20779,15041461:20780,15041673:20781,15041665:20782,15041666:20783,15041686:20784,15041685:20785,15041684:20786,15041690:20787,15041697:20788,15041722:20789,15041719:20790,15041724:20791,15041723:20792,15041727:20793,15041920:20794,15041938:20795,15041932:20796,15041940:20797,15041954:20798,15182776:20799,15041961:20800,15041962:20801,15041966:20802,15042176:20803,15042178:20804,15047576:20805,15042188:20806,15042185:20807,15042191:20808,15042193:20809,15042195:20810,15042197:20811,15042198:20812,15042212:20813,15042214:20814,15042210:20815,15042217:20816,15042218:20817,15042219:20818,15042227:20819,15042225:20820,15042226:20821,15042224:20822,15042229:20823,15042237:20824,15042437:20825,15042441:20826,15042459:20827,15042464:20828,15243669:20829,15042473:20830,15042477:20831,15042480:20832,15042485:20833,15042494:20834,15042692:20835,15042699:20836,15042708:20837,15042702:20838,15042727:20839,15042730:20840,15042734:20841,15042739:20842,15042745:20843,15042959:20844,15042948:20845,15042955:20846,15042956:20847,15042974:20848,15042964:20849,15042986:20850,15042996:20851,15042985:20852,15042995:20853,15043007:20854,15043005:20855,15043213:20856,15043220:20857,15043218:20858,15042993:20859,15043208:20860,15043217:20861,15253160:20862,15253159:21025,15043244:21026,15043245:21027,15043260:21028,15043253:21029,15043457:21030,15043469:21031,15043479:21032,15043486:21033,15043491:21034,15043494:21035,15311789:21036,15043488:21037,15043507:21038,15043509:21039,15043512:21040,15043513:21041,15043718:21042,15043720:21043,15176888:21044,15043725:21045,15043728:21046,15043727:21047,15043733:21048,15043738:21049,15043747:21050,15043759:21051,15043761:21052,15043763:21053,15043768:21054,15043968:21055,15043974:21056,15043973:21057,14989463:21058,15043977:21059,15043981:21060,15042454:21061,15043998:21062,15044009:21063,15044014:21064,15049880:21065,15044027:21066,15044023:21067,15044226:21068,15044246:21069,15044256:21070,15044262:21071,15044261:21072,15044270:21073,15044272:21074,15044278:21075,15044483:21076,15184018:21077,15309721:21078,15044511:21079,15113148:21080,15173550:21081,15044526:21082,15044520:21083,15044525:21084,15044538:21085,15044737:21086,15044797:21087,15044992:21088,15044780:21089,15044781:21090,15044796:21091,15044782:21092,15044790:21093,15044777:21094,15044765:21095,15045006:21096,15045263:21097,15045045:21098,15045262:21099,15045023:21100,15045041:21101,15045047:21102,15045040:21103,15045266:21104,15045051:21105,15045248:21106,15045046:21107,15045252:21108,15045264:21109,15045254:21110,15045511:21111,15045282:21112,15045304:21113,15045285:21114,15045292:21115,15045508:21116,15045512:21117,15045288:21118,15045291:21281,15045506:21282,15045284:21283,15045310:21284,15045308:21285,15045528:21286,15045541:21287,15045542:21288,15045775:21289,15045780:21290,15045565:21291,15045550:21292,15045549:21293,15045562:21294,15045538:21295,15045817:21296,15046016:21297,15046051:21298,15046028:21299,15045806:21300,15046044:21301,15046021:21302,15046038:21303,15046039:21304,15045816:21305,15045811:21306,15046045:21307,15046297:21308,15046272:21309,15045295:21310,15046282:21311,15046303:21312,15046075:21313,15046078:21314,15046296:21315,15046302:21316,15046318:21317,15046076:21318,15046275:21319,15046313:21320,15046279:21321,15046312:21322,15046554:21323,15046533:21324,15046559:21325,15046532:21326,15046556:21327,15046564:21328,15046548:21329,15046804:21330,15046583:21331,15046806:21332,15046590:21333,15046589:21334,15046811:21335,15046585:21336,15047054:21337,15047056:21338,15173535:21339,15046836:21340,15046838:21341,15046834:21342,15046840:21343,15047083:21344,15047076:21345,15046831:21346,15047084:21347,15047082:21348,15047302:21349,15047296:21350,15047306:21351,15047328:21352,15047316:21353,15047311:21354,15047333:21355,15047342:21356,15047350:21357,15047348:21358,15047554:21359,15047356:21360,15047553:21361,15047555:21362,15047552:21363,15047560:21364,15047566:21365,15047569:21366,15047571:21367,15047575:21368,15047598:21369,15047609:21370,15047808:21371,15047615:21372,15047812:21373,15047817:21374,15047816:21537,15047819:21538,15047821:21539,15047827:21540,15047832:21541,15047830:21542,15046535:21543,15047836:21544,15047846:21545,15047863:21546,15047864:21547,15048078:21548,15047867:21549,15048064:21550,15048079:21551,15048105:21552,15048576:21553,15048328:21554,15048097:21555,15048127:21556,15048329:21557,15048339:21558,15048352:21559,15048371:21560,15048356:21561,15048362:21562,15048368:21563,15048579:21564,15048582:21565,15048596:21566,15048594:21567,15048595:21568,15048842:21569,15048598:21570,15048611:21571,15048843:21572,15048857:21573,15048861:21574,15049138:21575,15048865:21576,15049122:21577,15049099:21578,15049136:21579,15118208:21580,15049106:21581,15048893:21582,15049145:21583,15049349:21584,15049401:21585,15049375:21586,15049387:21587,15049402:21588,15049630:21589,15049403:21590,15049400:21591,15049390:21592,15049605:21593,15049619:21594,15049617:21595,15049623:21596,15049625:21597,15049624:21598,15049637:21599,15049628:21600,15049636:21601,15049631:21602,15049647:21603,15049658:21604,15049657:21605,15049659:21606,15049660:21607,15049661:21608,15049858:21609,15049866:21610,15049872:21611,15049883:21612,15114918:21613,15049893:21614,15049900:21615,15049901:21616,15049906:21617,15049912:21618,15049918:21619,15182738:21620,15050133:21621,15050128:21622,15050126:21623,15050138:21624,15050136:21625,15050146:21626,15050144:21627,15050151:21628,15050156:21629,15050153:21630,15050168:21793,15050369:21794,15050397:21795,14990750:21796,14991019:21797,15050403:21798,15050418:21799,15050630:21800,15050664:21801,15050652:21802,15050381:21803,15050649:21804,15050650:21805,15050917:21806,15050911:21807,15050897:21808,15050908:21809,15050889:21810,15050906:21811,15051136:21812,15051180:21813,15051145:21814,15050933:21815,15050934:21816,15051170:21817,15051178:21818,15051418:21819,15051452:21820,15051454:21821,15051659:21822,15051650:21823,15051453:21824,15051683:21825,15051671:21826,15051686:21827,15051689:21828,15051670:21829,15051706:21830,15051707:21831,15051916:21832,15051915:21833,15051926:21834,15051954:21835,15051664:21836,15051946:21837,15051958:21838,15051966:21839,15052163:21840,15052165:21841,15052160:21842,15052177:21843,15052181:21844,15052186:21845,15052187:21846,15052197:21847,15052201:21848,15052208:21849,15052211:21850,15052213:21851,15052216:21852,15111816:21853,15052218:21854,15052416:21855,15052419:21856,15052454:21857,15052472:21858,15052675:21859,15052679:21860,15052681:21861,15052692:21862,15052688:21863,15052708:21864,15052710:21865,15052706:21866,15052702:21867,15052709:21868,15052715:21869,15052720:21870,15052726:21871,15052723:21872,15052933:21873,15052935:21874,15052936:21875,15052941:21876,15052947:21877,15052960:21878,15052962:21879,15052968:21880,15052984:21881,15052985:21882,15053185:21883,15053190:21884,15053198:21885,15053203:21886,15053200:22049,15053199:22050,15052209:22051,15053228:22052,15053230:22053,14989730:22054,15053238:22055,15053241:22056,15053452:22057,15053457:22058,15053460:22059,15050395:22060,15053483:22061,15053499:22062,15053494:22063,15053500:22064,15053495:22065,15053701:22066,15053502:22067,15053703:22068,15053721:22069,15053737:22070,15053757:22071,15053754:22072,15053741:22073,15054476:22074,15053738:22075,15053963:22076,15053973:22077,15053975:22078,15054236:22079,15053983:22080,15053979:22081,15053969:22082,15053972:22083,15053986:22084,15053978:22085,15053977:22086,15053976:22087,15054220:22088,15054226:22089,15054222:22090,15054219:22091,15054252:22092,15054259:22093,15054262:22094,15054471:22095,15054468:22096,15054466:22097,15054498:22098,15054493:22099,15054508:22100,15054510:22101,15054525:22102,15054480:22103,15054519:22104,15054524:22105,15054729:22106,15054733:22107,15054739:22108,15054738:22109,15054742:22110,15054747:22111,15054763:22112,15054770:22113,15054773:22114,15054987:22115,15055002:22116,15055001:22117,15054993:22118,15055003:22119,15055030:22120,15055031:22121,15055236:22122,15055235:22123,15055232:22124,15055246:22125,15055255:22126,15055252:22127,15055263:22128,15055266:22129,15055268:22130,15055239:22131,15055285:22132,15055286:22133,15055290:22134,15317692:22135,15055295:22136,15055520:22137,15055745:22138,15055746:22139,15055752:22140,15055760:22141,15055759:22142,15055766:22305,15055779:22306,15055773:22307,15055770:22308,15055771:22309,15055778:22310,15055777:22311,15055784:22312,15055785:22313,15055788:22314,15055793:22315,15055795:22316,15055792:22317,15055796:22318,15055800:22319,15055806:22320,15056003:22321,15056009:22322,15056285:22323,15056284:22324,15056011:22325,15056017:22326,15056022:22327,15056041:22328,15056045:22329,15056056:22330,15056257:22331,15056264:22332,15056268:22333,15056270:22334,15056047:22335,15056273:22336,15056278:22337,15056279:22338,15056281:22339,15056289:22340,15056301:22341,15056307:22342,15056311:22343,15056515:22344,15056514:22345,15056319:22346,15056522:22347,15056520:22348,15056529:22349,15056519:22350,15056542:22351,15056537:22352,15056536:22353,15056544:22354,15056552:22355,15056557:22356,15056572:22357,15056790:22358,15056827:22359,15056804:22360,15056824:22361,15056817:22362,15056797:22363,15106739:22364,15056831:22365,15106209:22366,15106464:22367,15106201:22368,15106192:22369,15106217:22370,15106190:22371,15106225:22372,15106203:22373,15106197:22374,15106219:22375,15106214:22376,15106191:22377,15106234:22378,15106458:22379,15106433:22380,15106474:22381,15106487:22382,15106463:22383,15106442:22384,15106438:22385,15106445:22386,15106467:22387,15106435:22388,15106468:22389,15106434:22390,15106476:22391,15106475:22392,15106457:22393,15106689:22394,15106701:22395,15106983:22396,15106691:22397,15106714:22398,15106692:22561,15106715:22562,15106710:22563,15106711:22564,15106706:22565,15106727:22566,15106699:22567,15106977:22568,15106744:22569,15106976:22570,15106963:22571,15106740:22572,15056816:22573,15106749:22574,15106950:22575,15106741:22576,15106968:22577,15107469:22578,15107221:22579,15107206:22580,15106998:22581,15106999:22582,15107200:22583,15106996:22584,15107002:22585,15107203:22586,15107233:22587,15107003:22588,15106993:22589,15107213:22590,15107214:22591,15107463:22592,15107262:22593,15107240:22594,15107239:22595,15107466:22596,15107263:22597,15107260:22598,15107244:22599,15107252:22600,15107261:22601,15107458:22602,15107460:22603,15107507:22604,15107511:22605,15107480:22606,15107481:22607,15107482:22608,15107499:22609,15107508:22610,15107503:22611,15107493:22612,15107505:22613,15107487:22614,15107485:22615,15107475:22616,15107509:22617,15107737:22618,15107734:22619,15107719:22620,15107756:22621,15107732:22622,15107738:22623,15107722:22624,15107729:22625,15107755:22626,15107758:22627,15107980:22628,15107978:22629,15107977:22630,15108023:22631,15107976:22632,15107971:22633,15107974:22634,15107770:22635,15107979:22636,15187385:22637,15107981:22638,15108006:22639,15108003:22640,15108022:22641,15108026:22642,15108020:22643,15108031:22644,15108029:22645,15108028:22646,15108030:22647,15108224:22648,15108232:22649,15108233:22650,15108237:22651,15108236:22652,15108244:22653,15108251:22654,15108254:22817,15108257:22818,15108266:22819,15108270:22820,15108272:22821,15108274:22822,15108275:22823,15108481:22824,15108494:22825,15108510:22826,15108515:22827,15108507:22828,15108512:22829,15108520:22830,15108540:22831,15108738:22832,15108745:22833,15108542:22834,15108754:22835,15108755:22836,15108758:22837,15109012:22838,15108739:22839,15108756:22840,15109015:22841,15109009:22842,15108795:22843,15109007:22844,15109055:22845,15108998:22846,15111060:22847,15109e3:22848,15109020:22849,15109004:22850,15109002:22851,15108994:22852,15108999:22853,15108763:22854,15109001:22855,15109260:22856,15109038:22857,15109041:22858,15109287:22859,15109250:22860,15109256:22861,15109039:22862,15109045:22863,15109520:22864,15109310:22865,15109517:22866,15110300:22867,15109519:22868,15109782:22869,15109774:22870,15109760:22871,15109803:22872,15109558:22873,15109795:22874,15109775:22875,15109769:22876,15109791:22877,15109813:22878,15109547:22879,15109545:22880,15109822:22881,15110057:22882,15110016:22883,15110022:22884,15110051:22885,15110025:22886,15110034:22887,15110070:22888,15110020:22889,15110294:22890,15110324:22891,15110278:22892,15110291:22893,15110310:22894,15110326:22895,15111325:22896,15110295:22897,15110312:22898,15110287:22899,15110567:22900,15110575:22901,15110582:22902,15110542:22903,15111338:22904,15110805:22905,15110803:22906,15110821:22907,15110825:22908,15110792:22909,15110844:22910,15111066:23073,15111058:23074,15111045:23075,15111047:23076,15110843:23077,15111064:23078,15111042:23079,15111089:23080,15111079:23081,15239305:23082,15111072:23083,15111073:23084,15108780:23085,15111075:23086,15111087:23087,15111340:23088,15111094:23089,15111092:23090,15111090:23091,15111098:23092,15111296:23093,15111101:23094,15111320:23095,15111324:23096,15111301:23097,15111332:23098,15111331:23099,15111339:23100,15111348:23101,15111349:23102,15111351:23103,15111350:23104,15111352:23105,15177099:23106,15111560:23107,15111574:23108,15111573:23109,15111565:23110,15111576:23111,15111582:23112,15111581:23113,15111602:23114,15111608:23115,15111810:23116,15111811:23117,15249034:23118,15111835:23119,15111839:23120,15111851:23121,15111863:23122,15112067:23123,15112070:23124,15112065:23125,15112068:23126,15112076:23127,15112082:23128,15112091:23129,15112089:23130,15112096:23131,15112097:23132,15112113:23133,15113650:23134,15112330:23135,15112323:23136,15112123:23137,15113651:23138,15112373:23139,15112374:23140,15112372:23141,15112348:23142,15112591:23143,15112580:23144,15112585:23145,15112577:23146,15112606:23147,15112605:23148,15112612:23149,15112615:23150,15112616:23151,15112607:23152,15112610:23153,15112624:23154,15112835:23155,15112840:23156,15112846:23157,15112841:23158,15112836:23159,15112856:23160,15112861:23161,15113089:23162,15112889:23163,15113097:23164,15112894:23165,15112892:23166,15113092:23329,15112888:23330,15113110:23331,15113114:23332,15113120:23333,15112383:23334,15113126:23335,15113129:23336,15113136:23337,15113141:23338,15113143:23339,15113359:23340,15113366:23341,15113374:23342,15113382:23343,15113383:23344,15310008:23345,15113390:23346,15113407:23347,15113398:23348,15113601:23349,15113400:23350,15113399:23351,15113606:23352,15113630:23353,15113632:23354,15113625:23355,15113635:23356,15113636:23357,15113865:23358,15113648:23359,15113897:23360,15113660:23361,15113642:23362,15113868:23363,15113867:23364,15113894:23365,15113889:23366,15113861:23367,15113911:23368,15114159:23369,15113908:23370,15114156:23371,15113907:23372,15114153:23373,15113912:23374,15114148:23375,15114142:23376,15114141:23377,15114146:23378,15114158:23379,15113913:23380,15114126:23381,15114118:23382,15114151:23383,15116956:23384,15114398:23385,15114630:23386,15114409:23387,15114624:23388,15114637:23389,15114418:23390,15114638:23391,15114931:23392,15114411:23393,15114649:23394,15114659:23395,15114679:23396,15114687:23397,15114911:23398,15114895:23399,15114925:23400,15114900:23401,15114909:23402,15114907:23403,15114883:23404,15116974:23405,15114937:23406,15114676:23407,15114933:23408,15114912:23409,15114938:23410,15115407:23411,15114893:23412,15114686:23413,15115393:23414,15115146:23415,15115400:23416,15115160:23417,15115426:23418,15115430:23419,15115169:23420,15115404:23421,15115149:23422,15115156:23585,15115175:23586,15115157:23587,15115446:23588,15115410:23589,15115396:23590,15115159:23591,15115171:23592,15115429:23593,15115193:23594,15115168:23595,15115183:23596,15115432:23597,15115434:23598,15115418:23599,15115427:23600,15115425:23601,15115142:23602,15115705:23603,15115703:23604,15115676:23605,15115704:23606,15115691:23607,15115668:23608,15115710:23609,15115694:23610,15115449:23611,15115700:23612,15115453:23613,15115673:23614,15115440:23615,15115681:23616,15115678:23617,15115677:23618,15115905:23619,15115690:23620,15115954:23621,15115950:23622,15116176:23623,15115967:23624,15116161:23625,15116179:23626,15115966:23627,15116174:23628,15052712:23629,15116170:23630,15116189:23631,15115963:23632,15116163:23633,15115943:23634,15116462:23635,15115921:23636,15115936:23637,15115932:23638,15115925:23639,15115956:23640,15116190:23641,15116200:23642,15116418:23643,15116443:23644,15116223:23645,15117450:23646,15116217:23647,15116210:23648,15116199:23649,15116421:23650,15115953:23651,15116446:23652,15116205:23653,15116436:23654,15116203:23655,15116426:23656,15116434:23657,15117185:23658,15116451:23659,15116435:23660,15116676:23661,15116428:23662,15116722:23663,15116470:23664,15116728:23665,15116679:23666,15116706:23667,15116697:23668,15116710:23669,15116680:23670,15116472:23671,15116450:23672,15116944:23673,15116941:23674,15116960:23675,15116932:23676,15116962:23677,15116963:23678,15116951:23841,15243415:23842,15116987:23843,15117187:23844,15117186:23845,15116984:23846,15116979:23847,15116972:23848,15117214:23849,15117201:23850,15117215:23851,15116970:23852,15117210:23853,15117226:23854,15117243:23855,15117445:23856,15243414:23857,15117242:23858,15117458:23859,15117462:23860,15314097:23861,15117471:23862,15117496:23863,15117495:23864,15178652:23865,15117497:23866,15311790:23867,15117703:23868,15117699:23869,15117705:23870,15117712:23871,15117721:23872,15117716:23873,15117723:23874,15117727:23875,15117729:23876,15117752:23877,15117753:23878,15117759:23879,15117952:23880,15117956:23881,15117955:23882,15117965:23883,15117976:23884,15117973:23885,15117982:23886,15117988:23887,15117994:23888,15117995:23889,15117999:23890,15118002:23891,15118001:23892,15118003:23893,15118007:23894,15118012:23895,15118214:23896,15118219:23897,15118227:23898,15118239:23899,15118252:23900,15118251:23901,15118259:23902,15118255:23903,15317694:23904,15118472:23905,15118483:23906,15118484:23907,15118491:23908,15118500:23909,15118499:23910,15118750:23911,15118741:23912,15118754:23913,15118762:23914,15118978:23915,15118989:23916,15119002:23917,15118977:23918,15119003:23919,15118782:23920,15118760:23921,15118771:23922,15118994:23923,15118992:23924,15119236:23925,15119281:23926,15119251:23927,15119037:23928,15119255:23929,15119237:23930,15119261:23931,15119022:23932,15119025:23933,15119038:23934,15119034:24097,15119259:24098,15119279:24099,15119257:24100,15119274:24101,15119519:24102,15245709:24103,15119542:24104,15119531:24105,15119549:24106,15119544:24107,15119513:24108,15119541:24109,15119539:24110,15119506:24111,15119500:24112,15119779:24113,15120019:24114,15119780:24115,15119770:24116,15119801:24117,15119769:24118,15120014:24119,15120021:24120,15122340:24121,15120005:24122,15120313:24123,15120533:24124,15120522:24125,15120053:24126,15120263:24127,15120294:24128,15120056:24129,15120262:24130,15120300:24131,15120286:24132,15120268:24133,15120296:24134,15120274:24135,15120261:24136,15120314:24137,15120281:24138,15120292:24139,15120277:24140,15120298:24141,15120302:24142,15120557:24143,15120814:24144,15120558:24145,15120537:24146,15120818:24147,15120799:24148,15120574:24149,15120547:24150,15120811:24151,15120555:24152,15120822:24153,15120781:24154,15120543:24155,15120771:24156,15120570:24157,15120782:24158,15120548:24159,15121343:24160,15120541:24161,15120568:24162,15121026:24163,15121066:24164,15121048:24165,15121289:24166,15121079:24167,15121299:24168,15121085:24169,15121071:24170,15121284:24171,15121074:24172,15121300:24173,15121301:24174,15121039:24175,15121061:24176,15121282:24177,15121055:24178,15121793:24179,15121553:24180,15171980:24181,15121324:24182,15121336:24183,15121342:24184,15121599:24185,15121330:24186,15121585:24187,15121327:24188,15121586:24189,15121292:24190,15121598:24353,15121555:24354,15121335:24355,15122054:24356,15121850:24357,15121848:24358,15122049:24359,15122048:24360,15121839:24361,15121819:24362,15122355:24363,15121837:24364,15122050:24365,15121852:24366,15121816:24367,15122062:24368,15122065:24369,15122306:24370,15121830:24371,15122099:24372,15122083:24373,15122081:24374,15122084:24375,15122105:24376,15122310:24377,15122090:24378,15122335:24379,15122325:24380,15122348:24381,15122324:24382,15122328:24383,15122353:24384,15122350:24385,15122331:24386,15171721:24387,15171723:24388,15122362:24389,15171729:24390,15171713:24391,15171727:24392,15122366:24393,15171739:24394,15171738:24395,15121844:24396,15171741:24397,15171736:24398,15171743:24399,15171760:24400,15171774:24401,15171762:24402,15171985:24403,15172003:24404,15172249:24405,15172242:24406,15172271:24407,15172529:24408,15172268:24409,15172280:24410,15172275:24411,15172270:24412,15172511:24413,15172491:24414,15172509:24415,15172505:24416,15172745:24417,15172541:24418,15172764:24419,15172761:24420,15173029:24421,15173013:24422,15173256:24423,15173030:24424,15173026:24425,15173004:24426,15173014:24427,15173036:24428,15173263:24429,15173563:24430,15173252:24431,15173269:24432,15173288:24433,15173292:24434,15173527:24435,15173305:24436,15173310:24437,15173522:24438,15173513:24439,15173524:24440,15173518:24441,15173536:24442,15173548:24443,15173543:24444,15173557:24445,15173564:24446,15173561:24609,15173567:24610,15173773:24611,15173776:24612,15173787:24613,15173800:24614,15173805:24615,15173804:24616,15173808:24617,15173810:24618,15173819:24619,15173820:24620,15173823:24621,15174016:24622,15174022:24623,15174027:24624,15174040:24625,15174068:24626,15174078:24627,15174274:24628,15174273:24629,15174279:24630,15174290:24631,15174294:24632,15174306:24633,15174311:24634,15174329:24635,15174322:24636,15174531:24637,15174534:24638,15174532:24639,15174542:24640,15174546:24641,15174562:24642,15174560:24643,15174561:24644,15174585:24645,15174583:24646,15040655:24647,15174807:24648,15174794:24649,15174812:24650,15174806:24651,15174813:24652,15174836:24653,15174831:24654,15174825:24655,15174821:24656,15174846:24657,15175054:24658,15175055:24659,15317912:24660,15175063:24661,15175082:24662,15175080:24663,15175088:24664,15175096:24665,15175093:24666,15175099:24667,15175098:24668,15175560:24669,15175347:24670,15175566:24671,15175355:24672,15175552:24673,15175589:24674,15175598:24675,15175582:24676,15176354:24677,15175813:24678,15176111:24679,15175845:24680,15175608:24681,15175858:24682,15175866:24683,15176085:24684,15175871:24685,15176095:24686,15176089:24687,15176065:24688,15176092:24689,15176105:24690,15176112:24691,15176099:24692,15176106:24693,15176118:24694,15176126:24695,15176331:24696,15176350:24697,15176359:24698,15176586:24699,15176591:24700,15176596:24701,15175601:24702,15176608:24865,15176611:24866,15176615:24867,15176617:24868,15176622:24869,15176626:24870,15176624:24871,15176625:24872,15176632:24873,15176631:24874,15176836:24875,15176835:24876,15176837:24877,15176844:24878,15176846:24879,15176845:24880,15176853:24881,15176851:24882,15176862:24883,15176870:24884,15176876:24885,15176892:24886,15177092:24887,15177101:24888,15177098:24889,15177097:24890,15177115:24891,15177094:24892,15177114:24893,15177129:24894,15177124:24895,15177127:24896,15177131:24897,15177133:24898,15177144:24899,15177142:24900,15177350:24901,15177351:24902,15177140:24903,15177354:24904,15177353:24905,15177346:24906,15177364:24907,15177370:24908,15177373:24909,15177381:24910,15177379:24911,15177602:24912,15177395:24913,15177603:24914,15177397:24915,15177405:24916,15177400:24917,15177404:24918,15177393:24919,15177613:24920,15177610:24921,15177618:24922,15177625:24923,15177635:24924,15177630:24925,15177662:24926,15177663:24927,15177660:24928,15177857:24929,15177648:24930,15177658:24931,15177650:24932,15177651:24933,15177867:24934,15177869:24935,15177865:24936,15177887:24937,15177895:24938,15177888:24939,15177889:24940,15177890:24941,15177892:24942,15177908:24943,15177904:24944,15177915:24945,15178119:24946,15178120:24947,15178118:24948,15178140:24949,15178136:24950,15178145:24951,15178146:24952,15178152:24953,15178153:24954,15178154:24955,15178151:24956,15178156:24957,15178160:24958,15178162:25121,15178166:25122,15178168:25123,15178172:25124,15178368:25125,15178371:25126,15178376:25127,15178379:25128,15178382:25129,15178390:25130,15178387:25131,15178393:25132,15178394:25133,15178416:25134,15178420:25135,15178424:25136,15178425:25137,15178426:25138,15178626:25139,15178637:25140,15178646:25141,15178642:25142,15178654:25143,15178657:25144,15178661:25145,15178663:25146,15178666:25147,15243439:25148,15178683:25149,15178888:25150,15178887:25151,15178884:25152,15178921:25153,15178916:25154,15178910:25155,15178917:25156,15178918:25157,15178907:25158,15178935:25159,15178936:25160,15179143:25161,15179162:25162,15179176:25163,15179179:25164,15179163:25165,15179173:25166,15179199:25167,15179198:25168,15179193:25169,15179406:25170,15179403:25171,15179409:25172,15179424:25173,15179422:25174,15179440:25175,15179446:25176,15179449:25177,15179455:25178,15179452:25179,15179453:25180,15179451:25181,15179655:25182,15179661:25183,15179671:25184,15179674:25185,15179676:25186,15179683:25187,15179694:25188,15179708:25189,15179916:25190,15179922:25191,15180966:25192,15179936:25193,15180970:25194,15180165:25195,15180430:25196,15180212:25197,15180422:25198,15180220:25199,15180442:25200,15180428:25201,15180451:25202,15180469:25203,15180458:25204,15180463:25205,15180689:25206,15180678:25207,15180683:25208,15180692:25209,15180478:25210,15180476:25211,15180677:25212,15180682:25213,15180716:25214,15180711:25377,15180698:25378,15180733:25379,15180724:25380,15180935:25381,15180946:25382,15180945:25383,15180953:25384,15180972:25385,15180971:25386,15181184:25387,15181216:25388,15181207:25389,15181215:25390,15181210:25391,15181205:25392,15181203:25393,15181242:25394,15181247:25395,15181450:25396,15181469:25397,15181479:25398,15318411:25399,15181482:25400,15181486:25401,15181491:25402,15181497:25403,15181498:25404,15181705:25405,15181717:25406,15181735:25407,15181740:25408,15181729:25409,15181731:25410,15181960:25411,15181965:25412,15181976:25413,15181977:25414,15181984:25415,15181983:25416,15181440:25417,15182001:25418,15182011:25419,15182014:25420,15182007:25421,15182211:25422,15182231:25423,15182217:25424,15182241:25425,15182242:25426,15182249:25427,15318685:25428,15182256:25429,15182265:25430,15182269:25431,15182472:25432,15182487:25433,15182485:25434,15182488:25435,15182486:25436,15182505:25437,15182728:25438,15182512:25439,15182518:25440,15182725:25441,15182724:25442,15182527:25443,15303299:25444,15182727:25445,15182730:25446,15182733:25447,15182735:25448,15182741:25449,15182739:25450,15182745:25451,15182746:25452,15182749:25453,15182753:25454,15182754:25455,15182758:25456,15182765:25457,15182768:25458,15182978:25459,15182991:25460,15182986:25461,15182982:25462,15183027:25463,15183e3:25464,15183001:25465,15183006:25466,15183029:25467,15183016:25468,15183030:25469,15183248:25470,15183290:25633,15182980:25634,15183245:25635,15182987:25636,15183244:25637,15183237:25638,15183285:25639,15183269:25640,15183284:25641,15183271:25642,15183280:25643,15183281:25644,15183276:25645,15183278:25646,15183517:25647,15183512:25648,15183519:25649,15183501:25650,15183516:25651,15183514:25652,15183499:25653,15183506:25654,15183503:25655,15183261:25656,15183513:25657,15183755:25658,15183745:25659,15183756:25660,15183759:25661,15183540:25662,15183750:25663,15183773:25664,15183785:25665,15184017:25666,15184020:25667,15183782:25668,15183781:25669,15184288:25670,15184e3:25671,15184007:25672,15184019:25673,15183795:25674,15183799:25675,15184023:25676,15184013:25677,15183798:25678,15184035:25679,15184039:25680,15184042:25681,15184031:25682,15184055:25683,15184043:25684,15184061:25685,15184268:25686,15184259:25687,15184276:25688,15184271:25689,15184256:25690,15184272:25691,15184280:25692,15184287:25693,15184292:25694,15184278:25695,15184293:25696,15184300:25697,15184309:25698,15184515:25699,15184528:25700,15184548:25701,15184557:25702,15184546:25703,15184555:25704,15184545:25705,15184552:25706,15184563:25707,15184562:25708,15184561:25709,15184558:25710,15184569:25711,15184573:25712,15184768:25713,15184773:25714,15184770:25715,15184792:25716,15184786:25717,15184796:25718,15184802:25719,15314107:25720,15184815:25721,15184818:25722,15184820:25723,15184822:25724,15184826:25725,15185030:25726,15185026:25889,15185052:25890,15185045:25891,15185034:25892,15185285:25893,15185291:25894,15185070:25895,15185074:25896,15185087:25897,15185077:25898,15185286:25899,15185331:25900,15185302:25901,15185294:25902,15185330:25903,15185320:25904,15185326:25905,15185295:25906,15185315:25907,15185555:25908,15185545:25909,15185307:25910,15185551:25911,15185341:25912,15185563:25913,15185594:25914,15185582:25915,15185571:25916,15185589:25917,15185799:25918,15185597:25919,15185579:25920,15186109:25921,15185570:25922,15185583:25923,15185820:25924,15185592:25925,15185567:25926,15185584:25927,15185816:25928,15185821:25929,15185828:25930,15185822:25931,15185851:25932,15185842:25933,15185825:25934,15186053:25935,15186058:25936,15186083:25937,15186081:25938,15186066:25939,15186097:25940,15186079:25941,15186057:25942,15186059:25943,15186082:25944,15186310:25945,15186342:25946,15186107:25947,15186101:25948,15186105:25949,15186307:25950,15186103:25951,15186098:25952,15186106:25953,15186343:25954,15186333:25955,15186326:25956,15186334:25957,15186329:25958,15186330:25959,15186361:25960,15186346:25961,15186345:25962,15186364:25963,15186363:25964,15186563:25965,15185813:25966,15186365:25967,15253166:25968,15186367:25969,15186568:25970,15186569:25971,15186572:25972,15186578:25973,15186576:25974,15186579:25975,15186580:25976,15186582:25977,15186574:25978,15186587:25979,15186588:25980,15187128:25981,15187130:25982,15187333:26145,15187340:26146,15187341:26147,15187342:26148,15187344:26149,15187345:26150,15187349:26151,15187348:26152,15187352:26153,15187359:26154,15187360:26155,15187368:26156,15187369:26157,15187367:26158,15187384:26159,15187586:26160,15187590:26161,15187587:26162,15187592:26163,15187591:26164,15187596:26165,15187604:26166,15187614:26167,15187613:26168,15187610:26169,15187619:26170,15187631:26171,15187634:26172,15187641:26173,15187630:26174,15187638:26175,15187640:26176,15248817:26177,15187845:26178,15187846:26179,15187850:26180,15187861:26181,15187860:26182,15187873:26183,15187878:26184,15187881:26185,15187891:26186,15187897:26187,15311772:26188,15237254:26189,15237252:26190,15237259:26191,15237266:26192,15237272:26193,15237273:26194,15237276:26195,15237281:26196,15237288:26197,15237311:26198,15237307:26199,15237514:26200,15237510:26201,15237522:26202,15237528:26203,15237530:26204,15237535:26205,15237538:26206,15237544:26207,15237555:26208,15237554:26209,15237552:26210,15237558:26211,15237561:26212,15237565:26213,15237567:26214,15237764:26215,15237766:26216,15237765:26217,15237787:26218,15237779:26219,15237786:26220,15237805:26221,15042192:26222,15237804:26223,15238043:26224,15238053:26225,15238041:26226,15238045:26227,15238020:26228,15238042:26229,15238038:26230,15238281:26231,15238063:26232,15238065:26233,15238299:26234,15238313:26235,15238307:26236,15238319:26237,15238539:26238,15309451:26401,15238534:26402,15238334:26403,15238547:26404,15238545:26405,15238076:26406,15238577:26407,15238574:26408,15238565:26409,15238566:26410,15238580:26411,15238787:26412,15238792:26413,15238794:26414,15238784:26415,15238786:26416,15238816:26417,15238805:26418,15238820:26419,15238819:26420,15238559:26421,15238803:26422,15238825:26423,15238832:26424,15238837:26425,15238846:26426,15238840:26427,15238845:26428,15239040:26429,15239042:26430,15238842:26431,15239049:26432,15239053:26433,15239057:26434,15239065:26435,15239064:26436,15239048:26437,15239066:26438,15239071:26439,15239072:26440,15239079:26441,15239098:26442,15239099:26443,15239102:26444,15239297:26445,15239298:26446,15239301:26447,15239303:26448,15239306:26449,15239309:26450,15239312:26451,15239318:26452,15239337:26453,15239339:26454,15239352:26455,15239347:26456,15239552:26457,15239577:26458,15239576:26459,15239581:26460,15239578:26461,15239583:26462,15239588:26463,15239586:26464,15239592:26465,15239594:26466,15239595:26467,15239342:26468,15239601:26469,15239607:26470,15239608:26471,15239614:26472,15239821:26473,15239826:26474,15239851:26475,15239839:26476,15239867:26477,15239852:26478,15240097:26479,15240099:26480,15240095:26481,15240082:26482,15240116:26483,15240115:26484,15240122:26485,15240851:26486,15240323:26487,15240123:26488,15240121:26489,15240094:26490,15240326:26491,15240092:26492,15240329:26493,15240089:26494,15240373:26657,15240372:26658,15240342:26659,15240370:26660,15240369:26661,15240576:26662,15240377:26663,15240592:26664,15240581:26665,15240367:26666,15240363:26667,15240343:26668,15240344:26669,15240837:26670,15240858:26671,15240874:26672,15240863:26673,15240866:26674,15240854:26675,15240355:26676,15240846:26677,15240839:26678,15240842:26679,15240636:26680,15240885:26681,15240627:26682,15240629:26683,15240864:26684,15240841:26685,15240872:26686,15241140:26687,15241363:26688,15241131:26689,15241102:26690,15241149:26691,15241347:26692,15241112:26693,15241355:26694,15241089:26695,15241143:26696,15241351:26697,15241120:26698,15241138:26699,15241357:26700,15241378:26701,15241376:26702,15240893:26703,15241400:26704,15242374:26705,15241147:26706,15241645:26707,15241386:26708,15241404:26709,15242650:26710,15241860:26711,15241655:26712,15241643:26713,15241901:26714,15241646:26715,15241858:26716,15241641:26717,15241606:26718,15241388:26719,15241647:26720,15241657:26721,15241397:26722,15242122:26723,15241634:26724,15241913:26725,15241919:26726,15241887:26727,15242137:26728,15242125:26729,15241915:26730,15242138:26731,15242128:26732,15242113:26733,15242118:26734,15242134:26735,15241889:26736,15242401:26737,15242175:26738,15242164:26739,15242391:26740,15242392:26741,15242412:26742,15242399:26743,15242389:26744,15242388:26745,15242172:26746,15242624:26747,15242659:26748,15242648:26749,15242632:26750,15242625:26913,15243394:26914,15242635:26915,15242645:26916,15242880:26917,15242916:26918,15242888:26919,15242897:26920,15242890:26921,15242920:26922,15242669:26923,15242900:26924,15242907:26925,15243178:26926,15242887:26927,15242908:26928,15242679:26929,15242686:26930,15242896:26931,15243145:26932,15242938:26933,15243151:26934,15242937:26935,15243152:26936,15243157:26937,15243165:26938,15243173:26939,15243164:26940,15243193:26941,15243402:26942,15243411:26943,15243403:26944,15243198:26945,15243194:26946,15243398:26947,15243426:26948,15243418:26949,15243440:26950,15243455:26951,15243661:26952,14989717:26953,15243668:26954,15243679:26955,15243687:26956,15243697:26957,15243923:26958,15243939:26959,15243945:26960,15243946:26961,15243915:26962,15243916:26963,15243958:26964,15243951:26965,15244164:26966,15244166:26967,15243952:26968,15244169:26969,15245475:26970,15243947:26971,15244180:26972,15244190:26973,15244201:26974,15244204:26975,15244191:26976,15244187:26977,15244207:26978,15244434:26979,15244422:26980,15244424:26981,15244416:26982,15244419:26983,15244219:26984,15244433:26985,15244425:26986,15244429:26987,15244217:26988,15244426:26989,15244468:26990,15244479:26991,15244471:26992,15244475:26993,15244453:26994,15244457:26995,15244442:26996,15244704:26997,15244703:26998,15244728:26999,15244684:27e3,15244686:27001,15244724:27002,15244695:27003,15244712:27004,15244718:27005,15244697:27006,15244691:27169,15244707:27170,15244714:27171,15245445:27172,15244962:27173,15244959:27174,15244930:27175,15244975:27176,15245195:27177,15244989:27178,15245184:27179,15245200:27180,15309718:27181,15244971:27182,15245188:27183,15244979:27184,15245191:27185,15245190:27186,15244987:27187,15245231:27188,15245234:27189,15245216:27190,15245455:27191,15245453:27192,15245246:27193,15245238:27194,15245239:27195,15245454:27196,15245202:27197,15245457:27198,15245462:27199,15245461:27200,15245474:27201,15245473:27202,15245489:27203,15245494:27204,15245497:27205,15245479:27206,15245499:27207,15245700:27208,15245698:27209,15245714:27210,15245721:27211,15245726:27212,15245730:27213,15245739:27214,15245953:27215,15245758:27216,15245982:27217,15245749:27218,15245757:27219,15246005:27220,15245746:27221,15245954:27222,15245975:27223,15245970:27224,15245998:27225,15245977:27226,15245986:27227,15245965:27228,15245988:27229,15246e3:27230,15246015:27231,15246001:27232,15246211:27233,15246212:27234,15246228:27235,15246232:27236,15246233:27237,15246237:27238,15246265:27239,15246466:27240,15246268:27241,15246260:27242,15246248:27243,15246258:27244,15246468:27245,15246476:27246,15246474:27247,15246483:27248,15246723:27249,15246494:27250,15246501:27251,15246506:27252,15246507:27253,15246721:27254,15246724:27255,15246523:27256,15246518:27257,15246520:27258,15246732:27259,15246493:27260,15246752:27261,15246750:27262,15246758:27425,15246756:27426,15246765:27427,15246762:27428,15246767:27429,15246772:27430,15246775:27431,15246782:27432,15246979:27433,15246984:27434,15246986:27435,15246995:27436,15247e3:27437,15247009:27438,15247017:27439,15247014:27440,15247020:27441,15247023:27442,15247026:27443,15247034:27444,15247037:27445,15247039:27446,15247232:27447,15247258:27448,15247260:27449,15247261:27450,15247271:27451,15247284:27452,15247288:27453,15247491:27454,15247510:27455,15247504:27456,15247500:27457,15247515:27458,15247517:27459,15247525:27460,15247542:27461,15247745:27462,15247771:27463,15247762:27464,15247750:27465,15247752:27466,15247804:27467,15247789:27468,15247788:27469,15247778:27470,15248005:27471,15248002:27472,15248004:27473,15248040:27474,15248033:27475,15248017:27476,15248037:27477,15248038:27478,15248026:27479,15248035:27480,15248260:27481,15248269:27482,15248258:27483,15248282:27484,15248299:27485,15248307:27486,15248295:27487,15248292:27488,15248305:27489,15248532:27490,15248288:27491,15248290:27492,15248311:27493,15248286:27494,15248283:27495,15248524:27496,15248519:27497,15248538:27498,15248289:27499,15248534:27500,15248528:27501,15248535:27502,15248544:27503,15248563:27504,15310507:27505,15248550:27506,15248555:27507,15248574:27508,15248552:27509,15248769:27510,15248780:27511,15248783:27512,15248782:27513,15248777:27514,15248790:27515,15248795:27516,15248794:27517,15248811:27518,15248799:27681,15248812:27682,15248815:27683,15248820:27684,15248829:27685,15249024:27686,15249036:27687,15249038:27688,15249042:27689,15249043:27690,15249046:27691,15249049:27692,15249050:27693,15249594:27694,15249793:27695,15249599:27696,15249800:27697,15249804:27698,15249806:27699,15249808:27700,15249813:27701,15249826:27702,15249836:27703,15249848:27704,15249850:27705,15250050:27706,15250057:27707,15250053:27708,15250058:27709,15250061:27710,15250062:27711,15250068:27712,15249852:27713,15250072:27714,15108253:27715,15250093:27716,15250090:27717,15250109:27718,15250098:27719,15250099:27720,15250094:27721,15250102:27722,15250312:27723,15250305:27724,15250340:27725,15250339:27726,15250330:27727,15250365:27728,15250362:27729,15250363:27730,15250564:27731,15250565:27732,15250570:27733,15250567:27734,15250575:27735,15250573:27736,15250576:27737,15318414:27738,15250579:27739,15250317:27740,15250580:27741,15250582:27742,15250855:27743,15250861:27744,15250865:27745,15250867:27746,15251073:27747,15251097:27748,15251330:27749,15251134:27750,15251130:27751,15251343:27752,15251354:27753,15251350:27754,15251340:27755,15251355:27756,15251339:27757,15251370:27758,15251371:27759,15251359:27760,15251363:27761,15251388:27762,15251592:27763,15251593:27764,15251391:27765,15251613:27766,15251614:27767,15251600:27768,15251615:27769,15251842:27770,15251637:27771,15251632:27772,15251636:27773,15251850:27774,15251847:27937,15251849:27938,15251852:27939,15251856:27940,15251848:27941,15251865:27942,15251876:27943,15251872:27944,15251626:27945,15251875:27946,15251861:27947,15251894:27948,15251890:27949,15251900:27950,15252097:27951,15252103:27952,15252101:27953,15252100:27954,15252107:27955,15252106:27956,15252115:27957,15252113:27958,15252116:27959,15252121:27960,15252138:27961,15252129:27962,15252140:27963,15252144:27964,15252358:27965,15252145:27966,15252158:27967,15252357:27968,15252360:27969,15252363:27970,15252379:27971,15252387:27972,15252412:27973,15252411:27974,15252395:27975,15252414:27976,15252618:27977,15252613:27978,15252629:27979,15252626:27980,15252633:27981,15252627:27982,15252636:27983,15252639:27984,15252635:27985,15252620:27986,15252646:27987,15252659:27988,15252667:27989,15252665:27990,15252869:27991,15252866:27992,15252670:27993,15252876:27994,15252873:27995,15252870:27996,15252878:27997,15252887:27998,15252892:27999,15252898:28e3,15252899:28001,15252900:28002,15253148:28003,15253151:28004,15253155:28005,15253165:28006,15253167:28007,15253175:28008,15253402:28009,15253413:28010,15253410:28011,15253418:28012,15253423:28013,15303303:28014,15253428:28015,15302789:28016,15253433:28017,15253434:28018,15302801:28019,15302805:28020,15302817:28021,15302797:28022,15302814:28023,15302806:28024,15302795:28025,15302823:28026,15302838:28027,15302837:28028,15302841:28029,15253432:28030,15303055:28193,15303056:28194,15303057:28195,15303058:28196,15302798:28197,15303049:28198,15302846:28199,15303062:28200,15303064:28201,15303070:28202,15303080:28203,15303087:28204,15303094:28205,15309480:28206,15303090:28207,15303298:28208,15303101:28209,15303297:28210,15303296:28211,15303306:28212,15303305:28213,15303311:28214,15303336:28215,15303343:28216,15303345:28217,15303349:28218,15303586:28219,15303588:28220,15108488:28221,15303579:28222,15303810:28223,15303826:28224,15303833:28225,15303858:28226,15303856:28227,15304074:28228,15304086:28229,15304088:28230,15304099:28231,15304101:28232,15304105:28233,15304115:28234,15304114:28235,15304331:28236,15304329:28237,15304322:28238,15304354:28239,15304363:28240,15304367:28241,15304362:28242,15304373:28243,15304372:28244,15304378:28245,15304576:28246,15304577:28247,15304585:28248,15304587:28249,15304592:28250,15304598:28251,15304607:28252,15304609:28253,15304603:28254,15304636:28255,15304629:28256,15304630:28257,15304862:28258,15304639:28259,15304852:28260,15304876:28261,15304853:28262,15304849:28263,15305118:28264,15305111:28265,15305093:28266,15305097:28267,15305124:28268,15305096:28269,15305365:28270,15304895:28271,15305099:28272,15305104:28273,15305372:28274,15305366:28275,15305363:28276,15305371:28277,15305114:28278,15305615:28279,15305401:28280,15305399:28281,15305641:28282,15305871:28283,15305658:28284,15306116:28285,15305902:28286,15305881:28449,15305890:28450,15305882:28451,15305891:28452,15305914:28453,15305909:28454,15305915:28455,15306140:28456,15306144:28457,15306172:28458,15306158:28459,15306134:28460,15306416:28461,15306412:28462,15306413:28463,15306388:28464,15306425:28465,15306646:28466,15306647:28467,15306664:28468,15306661:28469,15306648:28470,15306627:28471,15306653:28472,15306640:28473,15306632:28474,15306660:28475,15306906:28476,15306900:28477,15306899:28478,15306883:28479,15306887:28480,15306896:28481,15306934:28482,15306923:28483,15306933:28484,15306913:28485,15306938:28486,15307137:28487,15307154:28488,15307140:28489,15307163:28490,15307168:28491,15307170:28492,15307166:28493,15307178:28494,15304873:28495,15307184:28496,15307189:28497,15307191:28498,15307197:28499,15307162:28500,15307196:28501,15307198:28502,15307393:28503,15307199:28504,15308418:28505,15308423:28506,15308426:28507,15308436:28508,15308438:28509,15308440:28510,15308441:28511,15308448:28512,15308456:28513,15308455:28514,15308461:28515,15308476:28516,15308475:28517,15308473:28518,15308478:28519,15308682:28520,15122358:28521,15308675:28522,15308685:28523,15308684:28524,15308693:28525,15308692:28526,15308694:28527,15308700:28528,15308705:28529,15308709:28530,15308706:28531,15308961:28532,15308968:28533,15308974:28534,15308975:28535,15309186:28536,15309196:28537,15309199:28538,15309195:28539,15309239:28540,15309212:28541,15309214:28542,15309213:28705,15309215:28706,15309222:28707,15309234:28708,15309228:28709,15309453:28710,15309464:28711,15309461:28712,15309463:28713,15309482:28714,15309479:28715,15309489:28716,15309490:28717,15309488:28718,15309492:28719,15309494:28720,15309496:28721,15309497:28722,15309710:28723,15309707:28724,15309705:28725,15309709:28726,15246733:28727,15309724:28728,15309965:28729,15309717:28730,15309753:28731,15309956:28732,15309958:28733,15309960:28734,15309971:28735,15309966:28736,15309969:28737,15309967:28738,15309974:28739,15309977:28740,15309988:28741,15309994:28742,1531e4:28743,15310009:28744,15310013:28745,15310014:28746,15310212:28747,15310214:28748,15310216:28749,15310210:28750,15310217:28751,15310236:28752,15310240:28753,15310244:28754,15310246:28755,15310248:28756,15043474:28757,15310251:28758,15310257:28759,15310265:28760,15310469:28761,15310268:28762,15310465:28763,15310266:28764,15310470:28765,15310475:28766,15310479:28767,15310480:28768,15310492:28769,15310504:28770,15310502:28771,15310499:28772,15310515:28773,15310516:28774,15310723:28775,15310726:28776,15310728:28777,15310731:28778,15310748:28779,15310765:28780,15318415:28781,15310770:28782,15182751:28783,15310774:28784,15310773:28785,15310991:28786,15310988:28787,15311032:28788,15311012:28789,15311009:28790,15311031:28791,15311037:28792,15311238:28793,15311247:28794,15311243:28795,15311275:28796,15311279:28797,15311280:28798,15311281:28961,15311284:28962,15311283:28963,15311530:28964,15311535:28965,15311537:28966,15311542:28967,15311748:28968,15311747:28969,15311750:28970,15311785:28971,15311787:28972,15312003:28973,15312009:28974,15312018:28975,15312020:28976,15312024:28977,15312033:28978,15312029:28979,15312030:28980,15312036:28981,15312032:28982,15312044:28983,15312046:28984,15312061:28985,15312062:28986,15312258:28987,15312265:28988,15312261:28989,15312272:28990,15312267:28991,15312273:28992,15312274:28993,15312268:28994,15312277:28995,15312535:28996,15312536:28997,15312549:28998,15312557:28999,15312558:29e3,15312572:29001,15312799:29002,15312795:29003,15312797:29004,15312792:29005,15312785:29006,15312813:29007,15312814:29008,15312817:29009,15312818:29010,15312827:29011,15312824:29012,15313025:29013,15313039:29014,15313029:29015,15312802:29016,15313049:29017,15313067:29018,15313079:29019,15313285:29020,15313282:29021,15313280:29022,15313283:29023,15313086:29024,15313301:29025,15313293:29026,15313307:29027,15313303:29028,15313311:29029,15313314:29030,15313317:29031,15313316:29032,15313321:29033,15313323:29034,15313322:29035,15313581:29036,15313584:29037,15313596:29038,15313792:29039,15313807:29040,15313809:29041,15313811:29042,15313812:29043,15313822:29044,15313823:29045,15313826:29046,15313827:29047,15313830:29048,15313839:29049,15313835:29050,15313838:29051,15313844:29052,15313841:29053,15313847:29054,15313851:29217,15314054:29218,15314072:29219,15314074:29220,15314079:29221,15314082:29222,15314083:29223,15314085:29224,15314087:29225,15314088:29226,15314089:29227,15314090:29228,15314094:29229,15314095:29230,15314098:29231,15314308:29232,15314307:29233,15314319:29234,15314317:29235,15314318:29236,15314321:29237,15314328:29238,15314356:29239,15314579:29240,15314563:29241,15314577:29242,15314582:29243,15314583:29244,15314591:29245,15314592:29246,15314600:29247,15314612:29248,15314816:29249,15314826:29250,15314617:29251,15314822:29252,15314831:29253,15314833:29254,15314834:29255,15314851:29256,15314850:29257,15314852:29258,15314836:29259,15314849:29260,15315130:29261,15314866:29262,15314865:29263,15314864:29264,15315093:29265,15315092:29266,15315081:29267,15315091:29268,15315084:29269,15315078:29270,15315080:29271,15315090:29272,15315082:29273,15315076:29274,15315118:29275,15315099:29276,15315109:29277,15315108:29278,15315105:29279,15315120:29280,15315335:29281,15315122:29282,15315334:29283,15315134:29284,15315354:29285,15315360:29286,15315367:29287,15315382:29288,15315384:29289,15315879:29290,15315884:29291,15315888:29292,15316105:29293,15316104:29294,15315883:29295,15316099:29296,15316102:29297,15316138:29298,15316134:29299,15316655:29300,15316131:29301,15316127:29302,15316356:29303,15316117:29304,15316114:29305,15316353:29306,15316159:29307,15316158:29308,15316358:29309,15316360:29310,15316381:29473,15316382:29474,15316388:29475,15316369:29476,15316368:29477,15316377:29478,15316402:29479,15316617:29480,15316615:29481,15316651:29482,15316399:29483,15316410:29484,15316634:29485,15316644:29486,15316649:29487,15316658:29488,15316868:29489,15316865:29490,15316667:29491,15316664:29492,15316666:29493,15316870:29494,15316879:29495,15316866:29496,15316889:29497,15316883:29498,15316920:29499,15316902:29500,15316909:29501,15316911:29502,15316925:29503,15317146:29504,15317147:29505,15317150:29506,15317429:29507,15317433:29508,15317437:29509,15317633:29510,15317640:29511,15317643:29512,15317644:29513,15317650:29514,15317653:29515,15317649:29516,15317661:29517,15317669:29518,15317673:29519,15317688:29520,15317674:29521,15317677:29522,15310241:29523,15317900:29524,15317902:29525,15317903:29526,15317904:29527,15317908:29528,15317916:29529,15317918:29530,15317917:29531,15317920:29532,15317925:29533,15317928:29534,15317935:29535,15317940:29536,15317942:29537,15317943:29538,15317945:29539,15317947:29540,15317948:29541,15317949:29542,15318151:29543,15318152:29544,15178423:29545,15318165:29546,15318177:29547,15318188:29548,15318206:29549,15318410:29550,15318418:29551,15318420:29552,15318435:29553,15318431:29554,15318432:29555,15318433:29556,15318438:29557,15318439:29558,15318444:29559,15318442:29560,15318455:29561,15318450:29562,15318454:29563,15318677:29564,15318684:29565,15318688:29566,15048879:29729,15116167:29730,15303065:29731,15176100:29732,15042460:29733,15173273:29734,15186570:31009,15246492:31010,15306120:31011,15305352:31012,15242140:31013,14991241:31014,15172283:31015,15112369:31016,15115144:31017,15305657:31018,15113147:31019,15056261:31020,14989480:31021,14990241:31022,14990268:31023,14990464:31024,14990467:31025,14990521:31026,14990742:31027,14990994:31028,14990986:31029,14991002:31030,14990996:31031,14991245:31032,15040896:31033,15040674:31034,14991295:31035,15040670:31036,15040902:31037,15040944:31038,15040898:31039,15041172:31040,15041460:31041,15041432:31042,15041930:31043,15041956:31044,15042205:31045,15042238:31046,15042476:31047,15042709:31048,15043228:31049,15043238:31050,15043456:31051,15043483:31052,15043712:31053,15043719:31054,15043748:31055,15044018:31056,15044243:31057,15044274:31058,15044509:31059,15706254:31060,15045276:31061,15045258:31062,15045289:31063,15045567:31064,15046278:31065,15048089:31066,15048101:31067,15048364:31068,15048584:31069,15048583:31070,15706255:31071,15706256:31072,15049374:31073,15049394:31074,15049867:31075,15050131:31076,15050139:31077,15050141:31078,15050147:31079,15050404:31080,15050426:31081,15052182:31082,15052672:31083,15176879:31084,15052696:31085,15052716:31086,15052958:31087,15053478:31088,15053498:31089,15053749:31090,15053991:31091,15054227:31092,15706257:31093,15054210:31094,15054253:31095,15054520:31096,15054521:31097,15054736:31098,15056033:31099,15056052:31100,15056295:31101,15056567:31102,15056798:31265,15106461:31266,15106693:31267,15106698:31268,15106974:31269,15106965:31270,15107232:31271,15106994:31272,15107217:31273,15107255:31274,15107248:31275,15107736:31276,15108243:31277,15108774:31278,15110069:31279,15110560:31280,15110813:31281,15111054:31282,15111566:31283,15112320:31284,15112341:31285,15112379:31286,15112329:31287,15112366:31288,15112350:31289,15112356:31290,15112613:31291,15112599:31292,15112601:31293,15706258:31294,15112627:31295,15112857:31296,15112864:31297,15112882:31298,15112895:31299,15113146:31300,15113358:31301,15705257:31302,15113638:31303,15113915:31304,15114642:31305,15114112:31306,15114369:31307,15114628:31308,15115151:31309,15706259:31310,15115688:31311,15706260:31312,15115928:31313,15116194:31314,15116464:31315,15116715:31316,15116678:31317,15116723:31318,15116734:31319,15117218:31320,15117220:31321,15118230:31322,15118527:31323,15118748:31324,15118982:31325,15118767:31326,15119258:31327,15119492:31328,15120007:31329,15119791:31330,15120022:31331,15120044:31332,15120271:31333,15120312:31334,15120306:31335,15120316:31336,15120569:31337,15120796:31338,15120551:31339,15120572:31340,15121087:31341,15122056:31342,15122101:31343,15122357:31344,15171717:31345,15171719:31346,15171752:31347,15172229:31348,15172267:31349,15172751:31350,15172740:31351,15173020:31352,15172998:31353,15172999:31354,15706261:31355,15173505:31356,15173566:31357,15174321:31358,15174334:31521,15174820:31522,15706262:31523,15175095:31524,15175357:31525,15175561:31526,15175574:31527,15175587:31528,15175570:31529,15175815:31530,15175605:31531,15175846:31532,15175850:31533,15175849:31534,15175854:31535,15176098:31536,15176329:31537,15176351:31538,15176833:31539,15177135:31540,15178370:31541,15178396:31542,15178398:31543,15178395:31544,15178406:31545,15706263:31546,15179142:31547,15043247:31548,15179937:31549,15180174:31550,15180196:31551,15180218:31552,15180976:31553,15706264:31554,15706265:31555,15706266:31556,15181460:31557,15706267:31558,15181467:31559,15182737:31560,15182759:31561,15706268:31562,15182763:31563,15183518:31564,15706269:31565,15185288:31566,15185308:31567,15185591:31568,15185568:31569,15185814:31570,15186322:31571,15187335:31572,15187617:31573,15706270:31574,15240321:31575,15240610:31576,15240639:31577,15241095:31578,15241142:31579,15241608:31580,15241908:31581,15242643:31582,15242649:31583,15242667:31584,15706271:31585,15242928:31586,15706272:31587,15706273:31588,15245447:31589,15246261:31590,15247506:31591,15247543:31592,15247801:31593,15248039:31594,15248062:31595,15248287:31596,15706274:31597,15248310:31598,15248787:31599,15248831:31600,15250352:31601,15250356:31602,15250578:31603,15250870:31604,15706275:31605,15252367:31606,15706276:31607,15706277:31608,15303079:31609,15303582:31610,15706278:31611,15303829:31612,15303847:31613,15304602:31614,15304599:31777,15304606:31778,15304621:31779,15304622:31780,15304612:31781,15304613:31782,15304838:31783,15304848:31784,15304842:31785,15304890:31786,15305088:31787,15304892:31788,15305102:31789,15305113:31790,15305105:31791,15304889:31792,15305127:31793,15305383:31794,15305143:31795,15305144:31796,15305639:31797,15305623:31798,15305625:31799,15305616:31800,15706279:31801,15305621:31802,15305632:31803,15305619:31804,15305893:31805,15305889:31806,15305659:31807,15706280:31808,15305886:31809,15305663:31810,15305885:31811,15305858:31812,15306160:31813,15306135:31814,15306404:31815,15306630:31816,15306654:31817,15306680:31818,15306929:31819,15307141:31820,15307144:31821,15308434:31822,15706012:31823,15706281:31824,15309469:31825,15309487:31826,15310003:31827,15310011:31828,15310211:31829,15310221:31830,15310223:31831,15310225:31832,15310229:31833,15311255:31834,15311269:31835,15706282:31836,15706283:31837,15312039:31838,15706284:31839,15312542:31840,15313294:31841,15313817:31842,15313820:31843,15314357:31844,15314354:31845,15314575:31846,15314609:31847,15314619:31848,15315072:31849,15316400:31850,15316395:31851,15706285:31852,15317145:31853,15317905:31854,14845360:31857,14845361:31858,14845362:31859,14845363:31860,14845364:31861,14845365:31862,14845366:31863,14845367:31864,14845368:31865,14845369:31866,15712164:31868,15711367:31869,15711362:31870,14846117:8514,15712162:8780,14846098:74077}},{}],11:[function(n,e,t){e.exports={52120:8751,52103:8752,49848:8753,52121:8754,52125:8755,49839:8756,52123:8757,52122:8758,126:8759,52868:8760,52869:8761,49825:8770,49830:8771,49855:8772,49850:8811,49834:8812,49833:8813,49838:8814,14845090:8815,49828:8816,14845078:8817,52870:9825,52872:9826,52873:9827,52874:9828,52906:9829,52876:9831,52878:9833,52907:9834,52879:9836,52908:9841,52909:9842,52910:9843,52911:9844,53130:9845,52880:9846,53132:9847,53122:9848,53133:9849,53131:9850,52912:9851,53134:9852,53378:10050,53379:10051,53380:10052,53381:10053,53382:10054,53383:10055,53384:10056,53385:10057,53386:10058,53387:10059,53388:10060,53390:10061,53391:10062,53650:10098,53651:10099,53652:10100,53653:10101,53654:10102,53655:10103,53656:10104,53657:10105,53658:10106,53659:10107,53660:10108,53662:10109,53663:10110,50054:10529,50320:10530,50342:10532,50354:10534,50561:10536,50367:10537,50570:10539,50072:10540,50578:10541,50598:10543,50078:10544,50086:10561,50321:10562,50096:10563,50343:10564,50353:10565,50355:10566,50360:10567,50562:10568,50560:10569,50569:10570,50571:10571,50104:10572,50579:10573,50079:10574,50599:10575,50110:10576,50049:10785,50048:10786,50052:10787,50050:10788,50306:10789,51085:10790,50304:10791,50308:10792,50053:10793,50051:10794,50310:10795,50312:10796,50316:10797,50055:10798,50314:10799,50318:10800,50057:10801,50056:10802,50059:10803,50058:10804,50330:10805,50326:10806,50322:10807,50328:10808,50332:10810,50334:10811,50338:10812,50336:10813,50340:10814,50061:10815,50060:10816,50063:10817,50062:10818,51087:10819,50352:10820,50346:10821,50350:10822,50344:10823,50356:10824,50358:10825,50361:10826,50365:10827,50363:10828,50563:10829,50567:10830,50565:10831,50065:10832,50067:10833,50066:10834,50070:10835,50068:10836,51089:10837,50576:10838,50572:10839,50069:10840,50580:10841,50584:10842,50582:10843,50586:10844,50588:10845,50592:10846,50590:10847,50596:10848,50594:10849,50074:10850,50073:10851,50076:10852,50075:10853,50604:10854,51091:10855,50608:10856,50602:10857,50610:10858,50606:10859,50600:10860,51095:10861,51099:10862,51097:10863,51093:10864,50612:10865,50077:10866,50616:10867,50614:10868,50617:10869,50621:10870,50619:10871,50081:11041,50080:11042,50084:11043,50082:11044,50307:11045,51086:11046,50305:11047,50309:11048,50085:11049,50083:11050,50311:11051,50313:11052,50317:11053,50087:11054,50315:11055,50319:11056,50089:11057,50088:11058,50091:11059,50090:11060,50331:11061,50327:11062,50323:11063,50329:11064,51125:11065,50333:11066,50335:11067,50337:11069,50341:11070,50093:11071,50092:11072,50095:11073,50094:11074,51088:11075,50347:11077,50351:11078,50345:11079,50357:11080,50359:11081,50362:11082,50366:11083,50364:11084,50564:11085,50568:11086,50566:11087,50097:11088,50099:11089,50098:11090,50102:11091,50100:11092,51090:11093,50577:11094,50573:11095,50101:11096,50581:11097,50585:11098,50583:11099,50587:11100,50589:11101,50593:11102,50591:11103,50597:11104,50595:11105,50106:11106,50105:11107,50108:11108,50107:11109,50605:11110,51092:11111,50609:11112,50603:11113,50611:11114,50607:11115,50601:11116,51096:11117,51100:11118,51098:11119,51094:11120,50613:11121,50109:11122,50111:11123,50615:11124,50618:11125,50622:11126,50620:11127,14989442:12321,14989444:12322,14989445:12323,14989452:12324,14989458:12325,14989471:12326,14989475:12327,14989476:12328,14989480:12329,14989483:12330,14989486:12331,14989487:12332,14989488:12333,14989493:12334,14989696:12335,14989697:12336,14989700:12337,14989703:12338,14989713:12339,14989722:12340,14989724:12341,14989731:12342,14989736:12343,14989737:12344,14989748:12345,14989749:12346,14989753:12347,14989759:12348,14989965:12349,14989974:12350,14989975:12351,14989981:12352,14989999:12353,14990009:12354,14990211:12355,14990224:12356,14990234:12357,14990235:12358,14990240:12359,14990241:12360,14990242:12361,14990248:12362,14990255:12363,14990257:12364,14990259:12365,14990261:12366,14990269:12367,14990270:12368,14990271:12369,14990464:12370,14990466:12371,14990467:12372,14990472:12373,14990475:12374,14990476:12375,14990482:12376,14990485:12377,14990486:12378,14990487:12379,14990489:12380,14990510:12381,14990513:12382,14990752:12383,14990515:12384,14990517:12385,14990519:12386,14990521:12387,14990523:12388,14990526:12389,14990720:12390,14990722:12391,14990728:12392,14990729:12393,14990731:12394,14990732:12395,14990738:12396,14990740:12397,14990742:12398,14990744:12399,14990751:12400,14990755:12401,14990762:12402,14990764:12403,14990766:12404,14990769:12405,14990775:12406,14990776:12407,14990777:12408,14990778:12409,14990781:12410,14990782:12411,14990977:12412,14990978:12413,14990980:12414,14990981:12577,14990985:12578,14990986:12579,14990988:12580,14990990:12581,14990992:12582,14990994:12583,14990995:12584,14990996:12585,14990999:12586,14991001:12587,14991002:12588,14991006:12589,14991007:12590,14991026:12591,14991031:12592,14991033:12593,14991035:12594,14991036:12595,14991037:12596,14991038:12597,14991232:12598,14991233:12599,14991237:12600,14991238:12601,14991240:12602,14991241:12603,14991243:12604,14991244:12605,14991245:12606,14991247:12607,14991250:12608,14991260:12609,14991264:12610,14991266:12611,14991280:12612,14991282:12613,14991292:12614,14991293:12615,14991295:12616,15040640:12617,15040641:12618,15040644:12619,15040647:12620,15040650:12621,15040652:12622,15040654:12623,15040656:12624,15040659:12625,15040663:12626,15040664:12627,15040667:12628,15040668:12629,15040669:12630,15040670:12631,15040674:12632,15040679:12633,15040686:12634,15040688:12635,15040690:12636,15040691:12637,15040693:12638,15040896:12639,15040897:12640,15040898:12641,15040901:12642,15040902:12643,15040906:12644,15040908:12645,15040910:12646,15040913:12647,15040914:12648,15040915:12649,15040919:12650,15040921:12651,15040927:12652,15040928:12653,15040930:12654,15040931:12655,15040934:12656,15040935:12657,15040938:12658,15040941:12659,15040944:12660,15040945:12661,15040699:12662,15041153:12663,15041155:12664,15041156:12665,15041158:12666,15041162:12667,15041166:12668,15041167:12669,15041168:12670,15041170:12833,15041171:12834,15041172:12835,15041174:12836,15041179:12837,15041180:12838,15041182:12839,15041183:12840,15041184:12841,15041185:12842,15041186:12843,15041194:12844,15041199:12845,15041200:12846,15041209:12847,15041210:12848,15041213:12849,15041408:12850,15041411:12851,15041412:12852,15041415:12853,15041420:12854,15041422:12855,15041424:12856,15041427:12857,15041428:12858,15041432:12859,15041436:12860,15041437:12861,15041439:12862,15041442:12863,15041444:12864,15041446:12865,15041448:12866,15041449:12867,15041455:12868,15041457:12869,15041462:12870,15041466:12871,15041470:12872,15041667:12873,15041670:12874,15041671:12875,15041672:12876,15041675:12877,15041676:12878,15041677:12879,15041678:12880,15041458:12881,15041680:12882,15041687:12883,15041689:12884,15041691:12885,15041692:12886,15041693:12887,15041694:12888,15041699:12889,15041703:12890,15041704:12891,15041708:12892,15041709:12893,15041711:12894,15041713:12895,15041715:12896,15041716:12897,15041717:12898,15041720:12899,15041721:12900,15041922:12901,15041930:12902,15041935:12903,15041939:12904,15041941:12905,15041943:12906,15041944:12907,15041951:12908,15041956:12909,15041958:12910,15041982:12911,15042179:12912,15042180:12913,15042187:12914,15042190:12915,15042200:12916,15042205:12917,15042209:12918,15042211:12919,15042221:12920,15042232:12921,15042234:12922,15042236:12923,15042238:12924,15042239:12925,15042434:12926,15042440:13089,15042447:13090,15042449:13091,15042450:13092,15042451:13093,15042453:13094,15042456:13095,15042462:13096,15042466:13097,15042469:13098,15042478:13099,15042482:13100,15042483:13101,15042484:13102,15042487:13103,15042689:13104,15042690:13105,15042693:13106,15042706:13107,15042707:13108,15042709:13109,15042710:13110,15042712:13111,15042722:13112,15042728:13113,15042737:13114,15042738:13115,15042741:13116,15042748:13117,15042949:13118,15042953:13119,15042965:13120,15042967:13121,15042968:13122,15042970:13123,15042972:13124,15042975:13125,15042976:13126,15042977:13127,15042982:13128,15042990:13129,15042999:13130,15043e3:13131,15043001:13132,15043200:13133,15043202:13134,15043205:13135,15043210:13136,15043212:13137,15043219:13138,15043221:13139,15043222:13140,15043223:13141,15043224:13142,15043226:13143,15043228:13144,15043236:13145,15043237:13146,15043238:13147,15043239:13148,15043247:13149,15043248:13150,15043254:13151,15043255:13152,15043256:13153,15043258:13154,15043259:13155,15043261:13156,15043456:13157,15043460:13158,15043462:13159,15043464:13160,15043468:13161,15043471:13162,15043473:13163,15043476:13164,15043478:13165,15043483:13166,15043484:13167,15043489:13168,15043493:13169,15043496:13170,15043497:13171,15043498:13172,15043500:13173,15043504:13174,15043505:13175,15043508:13176,15043510:13177,15043511:13178,15043712:13179,15043715:13180,15043722:13181,15043723:13182,15043724:13345,15043729:13346,15043731:13347,15043736:13348,15043739:13349,15043740:13350,15043742:13351,15043743:13352,15043749:13353,15043751:13354,15043752:13355,15043753:13356,15043755:13357,15043756:13358,15043757:13359,15043760:13360,15043762:13361,15043765:13362,15043772:13363,15043773:13364,15043774:13365,15043970:13366,15043980:13367,15043979:13368,15043993:13369,15043995:13370,15044001:13371,15044003:13372,15044005:13373,15044012:13374,15044013:13375,15044018:13376,15044025:13377,15044030:13378,15044227:13379,15044231:13380,15044232:13381,15044238:13382,15044243:13383,15044244:13384,15044249:13385,15044253:13386,15044257:13387,15044260:13388,15044266:13389,15044267:13390,15044271:13391,15044274:13392,15044276:13393,15044277:13394,15044279:13395,15044280:13396,15044282:13397,15044285:13398,15044480:13399,15044485:13400,15044495:13401,15044498:13402,15044499:13403,15044501:13404,15044506:13405,15044509:13406,15044510:13407,15044512:13408,15044518:13409,15044519:13410,15044533:13411,15044738:13412,15044755:13413,15044762:13414,15044769:13415,15044775:13416,15044776:13417,15044778:13418,15044783:13419,15044785:13420,15044788:13421,15044789:13422,15044995:13423,15044996:13424,15044999:13425,15045005:13426,15045007:13427,15045022:13428,15045026:13429,15045028:13430,15045030:13431,15045031:13432,15045033:13433,15045035:13434,15045037:13435,15045038:13436,15045044:13437,15045055:13438,15045249:13601,15045251:13602,15045253:13603,15045256:13604,15045257:13605,15045261:13606,15045265:13607,15045269:13608,15045270:13609,15045276:13610,15045279:13611,15045281:13612,15045286:13613,15045287:13614,15045289:13615,15045290:13616,15045293:13617,15045294:13618,15045297:13619,15045303:13620,15045305:13621,15045306:13622,15045307:13623,15045311:13624,15045510:13625,15045514:13626,15045517:13627,15045518:13628,15045536:13629,15045546:13630,15045548:13631,15045551:13632,15045558:13633,15045564:13634,15045566:13635,15045567:13636,15045760:13637,15045761:13638,15045765:13639,15045768:13640,15045769:13641,15045772:13642,15045773:13643,15045774:13644,15045781:13645,15045802:13646,15045803:13647,15045810:13648,15045813:13649,15045814:13650,15045819:13651,15045820:13652,15045821:13653,15046017:13654,15046023:13655,15046025:13656,15046026:13657,15046029:13658,15046032:13659,15046033:13660,15046040:13661,15046042:13662,15046043:13663,15046046:13664,15046048:13665,15046049:13666,15046052:13667,15046054:13668,15046079:13669,15046273:13670,15046274:13671,15046278:13672,15046280:13673,15046286:13674,15046287:13675,15046289:13676,15046290:13677,15046291:13678,15046292:13679,15046295:13680,15046307:13681,15046308:13682,15046317:13683,15046322:13684,15046335:13685,15046529:13686,15046531:13687,15046534:13688,15046537:13689,15046539:13690,15046540:13691,15046542:13692,15046545:13693,15046546:13694,15046547:13857,15046551:13858,15046552:13859,15046555:13860,15046558:13861,15046562:13862,15046569:13863,15046582:13864,15046591:13865,15046789:13866,15046792:13867,15046794:13868,15046797:13869,15046798:13870,15046799:13871,15046800:13872,15046801:13873,15046802:13874,15046809:13875,15046828:13876,15046832:13877,15046835:13878,15046837:13879,15046839:13880,15046841:13881,15046843:13882,15046844:13883,15046845:13884,15046847:13885,15047040:13886,15047041:13887,15047043:13888,15047044:13889,15047046:13890,15047049:13891,15047051:13892,15047053:13893,15047055:13894,15047060:13895,15047070:13896,15047072:13897,15047073:13898,15047074:13899,15047075:13900,15047078:13901,15047081:13902,15047085:13903,15047087:13904,15047089:13905,15047090:13906,15047093:13907,15047300:13908,15047301:13909,15047304:13910,15047307:13911,15047308:13912,15047317:13913,15047321:13914,15047322:13915,15047325:13916,15047326:13917,15047327:13918,15047334:13919,15047335:13920,15047336:13921,15047337:13922,15047339:13923,15047340:13924,15047341:13925,15047345:13926,15047347:13927,15047351:13928,15047358:13929,15047557:13930,15047561:13931,15047562:13932,15047563:13933,15047567:13934,15047568:13935,15047564:13936,15047565:13937,15047577:13938,15047580:13939,15047581:13940,15047583:13941,15047585:13942,15047588:13943,15047589:13944,15047590:13945,15047591:13946,15047592:13947,15047601:13948,15047595:13949,15047597:13950,15047606:14113,15047607:14114,15047809:14115,15047810:14116,15047815:14117,15047818:14118,15047820:14119,15047825:14120,15047829:14121,15047834:14122,15047835:14123,15047837:14124,15047840:14125,15047842:14126,15047843:14127,15047844:14128,15047845:14129,15047849:14130,15047850:14131,15047852:14132,15047854:14133,15047855:14134,15047859:14135,15047860:14136,15047869:14137,15047870:14138,15047871:14139,15048069:14140,15048070:14141,15048076:14142,15048077:14143,15048082:14144,15048098:14145,15048101:14146,15048103:14147,15048104:14148,15048107:14149,15048109:14150,15048110:14151,15048111:14152,15048112:14153,15048113:14154,15048115:14155,15048116:14156,15048117:14157,15048119:14158,15048121:14159,15048122:14160,15048123:14161,15048124:14162,15048126:14163,15048321:14164,15048323:14165,15048332:14166,15048340:14167,15048343:14168,15048345:14169,15048346:14170,15048348:14171,15048349:14172,15048350:14173,15048351:14174,15048353:14175,15048341:14176,15048359:14177,15048360:14178,15048361:14179,15048364:14180,15048376:14181,15048381:14182,15048583:14183,15048584:14184,15048588:14185,15048591:14186,15048597:14187,15048605:14188,15048606:14189,15048612:14190,15048614:14191,15048615:14192,15048617:14193,15048621:14194,15048624:14195,15048629:14196,15048630:14197,15048632:14198,15048637:14199,15048638:14200,15048639:14201,15048835:14202,15048836:14203,15048840:14204,15048841:14205,15048609:14206,15048844:14369,15048845:14370,15048859:14371,15048862:14372,15048863:14373,15048864:14374,15048870:14375,15048871:14376,15048877:14377,15048882:14378,15048889:14379,15048895:14380,15049097:14381,15049100:14382,15049101:14383,15049103:14384,15049104:14385,15049109:14386,15049119:14387,15049121:14388,15049124:14389,15049127:14390,15049128:14391,15049144:14392,15049148:14393,15049151:14394,15049344:14395,15049345:14396,15049351:14397,15049352:14398,15049353:14399,15049354:14400,15049356:14401,15049357:14402,15049359:14403,15049360:14404,15049364:14405,15049366:14406,15049373:14407,15049376:14408,15049377:14409,15049378:14410,15049382:14411,15049385:14412,15049393:14413,15049394:14414,15049604:14415,15049404:14416,15049602:14417,15049608:14418,15049613:14419,15049614:14420,15049616:14421,15049618:14422,15049620:14423,15049622:14424,15049626:14425,15049629:14426,15049633:14427,15049634:14428,15049641:14429,15049651:14430,15049861:14431,15049862:14432,15049867:14433,15049868:14434,15049874:14435,15049875:14436,15049876:14437,15243649:14438,15049885:14439,15049889:14440,15049891:14441,15049892:14442,15049896:14443,15049903:14444,15049904:14445,15049907:14446,15049909:14447,15049910:14448,15049919:14449,15050115:14450,15050118:14451,15050130:14452,15050131:14453,15050137:14454,15050139:14455,15050141:14456,15050142:14457,15050143:14458,15050145:14459,15050147:14460,15050155:14461,15050157:14462,15050159:14625,15050162:14626,15050165:14627,15050166:14628,15050169:14629,15050171:14630,15050172:14631,15050379:14632,15050380:14633,15050382:14634,15050386:14635,15050389:14636,15050391:14637,15050399:14638,15050404:14639,15050407:14640,15050413:14641,15050414:14642,15050415:14643,15050416:14644,15050419:14645,15050423:14646,15050426:14647,15050428:14648,15050625:14649,15050627:14650,15050628:14651,15050632:14652,15050634:14653,15050637:14654,15050642:14655,15050653:14656,15050654:14657,15050655:14658,15050659:14659,15050660:14660,15050663:14661,15050670:14662,15050671:14663,15050673:14664,15050674:14665,15050676:14666,15050679:14667,15050880:14668,15050884:14669,15050892:14670,15050893:14671,15050894:14672,15050898:14673,15050899:14674,15050910:14675,15050915:14676,15050916:14677,15050919:14678,15050920:14679,15050922:14680,15050925:14681,15050928:14682,15051140:14683,15051141:14684,15051143:14685,15051144:14686,15051148:14687,15051152:14688,15051157:14689,15051166:14690,15051171:14691,15051173:14692,15051175:14693,15051181:14694,15051191:14695,15051194:14696,15051195:14697,15051198:14698,15051403:14699,15051408:14700,15051411:14701,15051414:14702,15051417:14703,15051420:14704,15051422:14705,15051423:14706,15051424:14707,15051426:14708,15051431:14709,15051436:14710,15051441:14711,15051442:14712,15051443:14713,15051445:14714,15051448:14715,15051450:14716,15051451:14717,15051455:14718,15051652:14881,15051654:14882,15051656:14883,15051663:14884,15051674:14885,15051676:14886,15051680:14887,15051685:14888,15051690:14889,15051694:14890,15051701:14891,15051702:14892,15051709:14893,15051904:14894,15051905:14895,15051912:14896,15051927:14897,15051956:14898,15051929:14899,15051931:14900,15051933:14901,15051937:14902,15051941:14903,15051949:14904,15051960:14905,15052161:14906,15052171:14907,15052172:14908,15052178:14909,15052182:14910,15052190:14911,15052200:14912,15052206:14913,15052207:14914,15052220:14915,15052221:14916,15052222:14917,15052223:14918,15052417:14919,15052420:14920,15052422:14921,15052426:14922,15052430:14923,15052432:14924,15052433:14925,15052435:14926,15052436:14927,15052438:14928,15052456:14929,15052457:14930,15052460:14931,15052461:14932,15052463:14933,15052465:14934,15052466:14935,15052471:14936,15052474:14937,15052476:14938,15052672:14939,15052673:14940,15052685:14941,15052687:14942,15052694:14943,15052695:14944,15052696:14945,15052697:14946,15052698:14947,15052704:14948,15052719:14949,15052721:14950,15052724:14951,15052733:14952,15052940:14953,15052951:14954,15052958:14955,15052959:14956,15052963:14957,15052966:14958,15052969:14959,15052971:14960,15052972:14961,15052974:14962,15052976:14963,15052978:14964,15052981:14965,15052982:14966,15053209:14967,15053210:14968,15053212:14969,15053218:14970,15053219:14971,15053223:14972,15053224:14973,15053225:14974,15053229:15137,15053232:15138,15053236:15139,15053237:15140,15053242:15141,15053243:15142,15053244:15143,15053245:15144,15053447:15145,15053448:15146,15053450:15147,15053455:15148,15053458:15149,15053469:15150,15053471:15151,15053472:15152,15053474:15153,15053475:15154,15053478:15155,15053482:15156,15053490:15157,15053492:15158,15053493:15159,15053498:15160,15053705:15161,15053707:15162,15053714:15163,15053725:15164,15053719:15165,15053742:15166,15053745:15167,15053746:15168,15053748:15169,15053953:15170,15053958:15171,15053965:15172,15053970:15173,15053995:15174,15053987:15175,15053988:15176,15053990:15177,15053991:15178,15054001:15179,15054004:15180,15054009:15181,15054013:15182,15054015:15183,15054210:15184,15054211:15185,15054214:15186,15054216:15187,15054229:15188,15054225:15189,15054233:15190,15054218:15191,15054239:15192,15054240:15193,15054241:15194,15054242:15195,15054244:15196,15054250:15197,15054253:15198,15054256:15199,15054265:15200,15054266:15201,15054270:15202,15054271:15203,15054465:15204,15054467:15205,15054472:15206,15054474:15207,15054482:15208,15054483:15209,15054484:15210,15054485:15211,15054489:15212,15054491:15213,15054495:15214,15054496:15215,15054503:15216,15054507:15217,15054512:15218,15054516:15219,15054520:15220,15054521:15221,15054723:15222,15054727:15223,15054731:15224,15054736:15225,15054734:15226,15054744:15227,15054745:15228,15054752:15229,15054756:15230,15054761:15393,15054776:15394,15054777:15395,15054976:15396,15054983:15397,15054989:15398,15054994:15399,15054996:15400,15054997:15401,15055e3:15402,15055007:15403,15055008:15404,15055022:15405,15055016:15406,15055026:15407,15055029:15408,15055038:15409,15055243:15410,15055248:15411,15055241:15412,15055249:15413,15055254:15414,15055256:15415,15055259:15416,15055260:15417,15055262:15418,15055272:15419,15055274:15420,15055275:15421,15055276:15422,15055277:15423,15055278:15424,15055280:15425,15055488:15426,15055499:15427,15055502:15428,15055522:15429,15055524:15430,15055525:15431,15055528:15432,15055530:15433,15055532:15434,15055537:15435,15055539:15436,15055549:15437,15055550:15438,15055551:15439,15055750:15440,15055756:15441,15055755:15442,15055758:15443,15055761:15444,15055762:15445,15055764:15446,15055765:15447,15055772:15448,15055774:15449,15055781:15450,15055787:15451,15056002:15452,15056006:15453,15056007:15454,15056008:15455,15056014:15456,15056025:15457,15056028:15458,15056029:15459,15056033:15460,15056034:15461,15056035:15462,15056036:15463,15056040:15464,15056043:15465,15056044:15466,15056046:15467,15056048:15468,15056052:15469,15056054:15470,15056059:15471,15056061:15472,15056063:15473,15056256:15474,15056260:15475,15056261:15476,15056263:15477,15056269:15478,15056272:15479,15056276:15480,15056280:15481,15056283:15482,15056288:15483,15056291:15484,15056292:15485,15056295:15486,15056303:15649,15056306:15650,15056308:15651,15056309:15652,15056312:15653,15056314:15654,15056317:15655,15056318:15656,15056521:15657,15056525:15658,15056527:15659,15056534:15660,15056540:15661,15056541:15662,15056546:15663,15056551:15664,15056555:15665,15056548:15666,15056556:15667,15056559:15668,15056560:15669,15056561:15670,15056568:15671,15056772:15672,15056775:15673,15056776:15674,15056777:15675,15056779:15676,15056784:15677,15056785:15678,15056786:15679,15056787:15680,15056788:15681,15056798:15682,15056801:15683,15056802:15684,15056808:15685,15056809:15686,15056810:15687,15056812:15688,15056813:15689,15056814:15690,15056815:15691,15056818:15692,15056819:15693,15056822:15694,15056826:15695,15056828:15696,15106183:15697,15106186:15698,15106189:15699,15106195:15700,15106196:15701,15106199:15702,15106200:15703,15106202:15704,15106207:15705,15106212:15706,15106221:15707,15106227:15708,15106229:15709,15106432:15710,15106439:15711,15106440:15712,15106441:15713,15106444:15714,15106449:15715,15106452:15716,15106454:15717,15106455:15718,15106461:15719,15106465:15720,15106471:15721,15106481:15722,15106494:15723,15106495:15724,15106690:15725,15106694:15726,15106696:15727,15106698:15728,15106702:15729,15106705:15730,15106707:15731,15106709:15732,15106712:15733,15106717:15734,15106718:15735,15106722:15736,15106724:15737,15106725:15738,15106728:15739,15106736:15740,15106737:15741,15106743:15742,15106747:15905,15106750:15906,15106946:15907,15106948:15908,15106952:15909,15106953:15910,15106954:15911,15106955:15912,15106958:15913,15106959:15914,15106964:15915,15106965:15916,15106969:15917,15106971:15918,15106973:15919,15106974:15920,15106978:15921,15106981:15922,15106994:15923,15106997:15924,15107e3:15925,15107004:15926,15107005:15927,15107202:15928,15107207:15929,15107210:15930,15107212:15931,15107216:15932,15107217:15933,15107218:15934,15107219:15935,15107220:15936,15107222:15937,15107223:15938,15107225:15939,15107228:15940,15107230:15941,15107234:15942,15107242:15943,15107243:15944,15107248:15945,15107249:15946,15107253:15947,15107254:15948,15107255:15949,15107257:15950,15107457:15951,15107461:15952,15107462:15953,15107465:15954,15107486:15955,15107488:15956,15107500:15957,15107506:15958,15107512:15959,15107515:15960,15107516:15961,15107519:15962,15107712:15963,15107713:15964,15107715:15965,15107716:15966,15107723:15967,15107725:15968,15107730:15969,15107731:15970,15107735:15971,15107736:15972,15107740:15973,15107741:15974,15107743:15975,15107744:15976,15107749:15977,15107752:15978,15107754:15979,15107757:15980,15107768:15981,15107769:15982,15107772:15983,15107968:15984,15107969:15985,15107970:15986,15107982:15987,15107983:15988,15107989:15989,15107996:15990,15107997:15991,15107998:15992,15107999:15993,15108001:15994,15108002:15995,15108007:15996,15108009:15997,15108005:15998,15108012:16161,15108013:16162,15108015:16163,15108225:16164,15108227:16165,15108228:16166,15108231:16167,15108243:16168,15108245:16169,15108252:16170,15108256:16171,15108258:16172,15108259:16173,15108263:16174,15108265:16175,15108267:16176,15108281:16177,15108285:16178,15108482:16179,15108483:16180,15108484:16181,15108486:16182,15108492:16183,15108496:16184,15108497:16185,15108498:16186,15108500:16187,15108502:16188,15108506:16189,15108508:16190,15108516:16191,15108525:16192,15108527:16193,15108531:16194,15108538:16195,15108541:16196,15108749:16197,15108750:16198,15108751:16199,15108752:16200,15108774:16201,15108776:16202,15108787:16203,15108790:16204,15108791:16205,15108794:16206,15108798:16207,15108799:16208,15108996:16209,15109006:16210,15109013:16211,15109014:16212,15109018:16213,15109034:16214,15109042:16215,15109044:16216,15109052:16217,15109053:16218,15109251:16219,15109252:16220,15109258:16221,15109259:16222,15109261:16223,15109264:16224,15109267:16225,15109270:16226,15109272:16227,15109289:16228,15109290:16229,15109293:16230,15109301:16231,15109302:16232,15109305:16233,15109308:16234,15109505:16235,15109506:16236,15109507:16237,15109508:16238,15109510:16239,15109514:16240,15109515:16241,15109518:16242,15109522:16243,15109523:16244,15109524:16245,15109528:16246,15109531:16247,15109541:16248,15109542:16249,15109548:16250,15109549:16251,15109553:16252,15109556:16253,15109557:16254,15109560:16417,15109564:16418,15109565:16419,15109567:16420,15109762:16421,15109764:16422,15109767:16423,15109770:16424,15109776:16425,15109780:16426,15109781:16427,15109785:16428,15109786:16429,15109790:16430,15109796:16431,15109798:16432,15109805:16433,15109806:16434,15109807:16435,15109821:16436,15110017:16437,15110021:16438,15110024:16439,15110030:16440,15110033:16441,15110035:16442,15110036:16443,15110037:16444,15110044:16445,15110048:16446,15110053:16447,15110058:16448,15110060:16449,15110066:16450,15110067:16451,15110069:16452,15110072:16453,15110073:16454,15110281:16455,15110282:16456,15110288:16457,15110290:16458,15110292:16459,15110296:16460,15110302:16461,15110304:16462,15110306:16463,15110308:16464,15110309:16465,15110313:16466,15110314:16467,15110319:16468,15110320:16469,15110325:16470,15110333:16471,15110335:16472,15110539:16473,15110543:16474,15110545:16475,15110546:16476,15110547:16477,15110548:16478,15110554:16479,15110555:16480,15110556:16481,15110557:16482,15110559:16483,15110560:16484,15110561:16485,15110563:16486,15110573:16487,15110579:16488,15110580:16489,15110587:16490,15110589:16491,15110789:16492,15110791:16493,15110799:16494,15110800:16495,15110801:16496,15110808:16497,15110809:16498,15110811:16499,15110813:16500,15110815:16501,15110817:16502,15110819:16503,15110822:16504,15110824:16505,15110828:16506,15110835:16507,15110845:16508,15110846:16509,15110847:16510,15111044:16673,15111049:16674,15111050:16675,15111051:16676,15111052:16677,15111054:16678,15111056:16679,15111057:16680,15111061:16681,15111063:16682,15111076:16683,15111077:16684,15111081:16685,15111082:16686,15111085:16687,15111088:16688,15111093:16689,15111095:16690,15111099:16691,15111103:16692,15111297:16693,15111300:16694,15111304:16695,15111305:16696,15111306:16697,15111311:16698,15111315:16699,15111316:16700,15111318:16701,15111321:16702,15111323:16703,15111326:16704,15111327:16705,15111330:16706,15111334:16707,15111337:16708,15111342:16709,15111345:16710,15111354:16711,15111356:16712,15111357:16713,15111555:16714,15111559:16715,15111561:16716,15111568:16717,15111570:16718,15111572:16719,15111583:16720,15111584:16721,15111591:16722,15111595:16723,15111610:16724,15111613:16725,15111809:16726,15111813:16727,15111818:16728,15111826:16729,15111829:16730,15111832:16731,15111837:16732,15111840:16733,15111843:16734,15111846:16735,15111854:16736,15111858:16737,15111859:16738,15111860:16739,15111871:16740,15112066:16741,15112072:16742,15112073:16743,15112078:16744,15112080:16745,15112084:16746,15112086:16747,15112088:16748,15112095:16749,15112112:16750,15112114:16751,15112116:16752,15112117:16753,15112121:16754,15112126:16755,15112127:16756,15112320:16757,15112324:16758,15112328:16759,15112329:16760,15112333:16761,15112337:16762,15112338:16763,15112341:16764,15112342:16765,15112349:16766,15112350:16929,15112353:16930,15112354:16931,15112355:16932,15112356:16933,15112358:16934,15112361:16935,15112362:16936,15112363:16937,15112364:16938,15112366:16939,15112368:16940,15112369:16941,15112371:16942,15112377:16943,15112375:16944,15112576:16945,15112581:16946,15112582:16947,15112586:16948,15112588:16949,15112593:16950,15112590:16951,15112599:16952,15112600:16953,15112601:16954,15112603:16955,15112604:16956,15112608:16957,15112609:16958,15113147:16959,15112618:16960,15112619:16961,15112620:16962,15112638:16963,15112627:16964,15112629:16965,15112639:16966,15112631:16967,15112632:16968,15112633:16969,15112635:16970,15112832:16971,15112636:16972,15112843:16973,15112844:16974,15112845:16975,15112848:16976,15112850:16977,15112857:16978,15112858:16979,15112859:16980,15112860:16981,15112863:16982,15112864:16983,15112868:16984,15112877:16985,15112881:16986,15112882:16987,15112885:16988,15112891:16989,15112895:16990,15113088:16991,15113090:16992,15113091:16993,15113096:16994,15113100:16995,15113102:16996,15113103:16997,15113108:16998,15113115:16999,15113119:17e3,15113128:17001,15113131:17002,15113132:17003,15113134:17004,15113146:17005,15113349:17006,15113351:17007,15113358:17008,15113363:17009,15113369:17010,15113372:17011,15113376:17012,15113378:17013,15113395:17014,15113406:17015,15113605:17016,15113607:17017,15113608:17018,15113612:17019,15113620:17020,15113621:17021,15113629:17022,15113638:17185,15113644:17186,15113646:17187,15113652:17188,15113654:17189,15113659:17190,15113857:17191,15113860:17192,15113870:17193,15113871:17194,15113873:17195,15113875:17196,15113878:17197,15113880:17198,15113881:17199,15113883:17200,15113904:17201,15113905:17202,15113906:17203,15113909:17204,15113915:17205,15113916:17206,15113917:17207,15114169:17208,15114112:17209,15114114:17210,15114115:17211,15114117:17212,15114120:17213,15114121:17214,15114130:17215,15114135:17216,15114137:17217,15114140:17218,15114145:17219,15114150:17220,15114160:17221,15114162:17222,15114166:17223,15114167:17224,15114642:17225,15114388:17226,15114393:17227,15114397:17228,15114399:17229,15114408:17230,15114407:17231,15114412:17232,15114413:17233,15114415:17234,15114416:17235,15114417:17236,15114419:17237,15114427:17238,15114431:17239,15114628:17240,15114629:17241,15114634:17242,15114636:17243,15114645:17244,15114647:17245,15114648:17246,15114651:17247,15114667:17248,15114670:17249,15114671:17250,15114672:17251,15114673:17252,15114674:17253,15114677:17254,15114681:17255,15114682:17256,15114683:17257,15114684:17258,15114882:17259,15114884:17260,15114886:17261,15114888:17262,15114902:17263,15114904:17264,15114906:17265,15114908:17266,15114913:17267,15114915:17268,15114917:17269,15114921:17270,15114922:17271,15114926:17272,15114930:17273,15114939:17274,15115141:17275,15115144:17276,15115148:17277,15115151:17278,15115152:17441,15115153:17442,15115155:17443,15115158:17444,15115161:17445,15115164:17446,15115165:17447,15115173:17448,15115176:17449,15115178:17450,15115179:17451,15115180:17452,15115181:17453,15115184:17454,15115185:17455,15115189:17456,15115190:17457,15115195:17458,15115196:17459,15115197:17460,15115398:17461,15115401:17462,15115402:17463,15115408:17464,15115409:17465,15115411:17466,15115414:17467,15115415:17468,15115441:17469,15115443:17470,15115445:17471,15115448:17472,15115451:17473,15115650:17474,15115653:17475,15115657:17476,15115662:17477,15115671:17478,15115675:17479,15115683:17480,15115684:17481,15115685:17482,15115686:17483,15115688:17484,15115689:17485,15115692:17486,15115696:17487,15115697:17488,15115698:17489,15115706:17490,15115707:17491,15115711:17492,15115904:17493,15115917:17494,15115922:17495,15115926:17496,15115928:17497,15115937:17498,15115941:17499,15115942:17500,15115944:17501,15115947:17502,15115949:17503,15115951:17504,15115959:17505,15115960:17506,15115962:17507,15115964:17508,15116165:17509,15116168:17510,15116177:17511,15116182:17512,15116183:17513,15116194:17514,15116197:17515,15116206:17516,15116207:17517,15116209:17518,15116211:17519,15116213:17520,15116222:17521,15116416:17522,15116417:17523,15116419:17524,15116431:17525,15116433:17526,15116437:17527,15116442:17528,15116445:17529,15116448:17530,15116452:17531,15116456:17532,15116464:17533,15116466:17534,15116468:17697,15116471:17698,15116475:17699,15116478:17700,15116479:17701,15116677:17702,15116678:17703,15116681:17704,15116682:17705,15116686:17706,15116688:17707,15116689:17708,15116690:17709,15116693:17710,15116694:17711,15116699:17712,15116708:17713,15116711:17714,15116714:17715,15116721:17716,15116723:17717,15116734:17718,15116929:17719,15116931:17720,15116934:17721,15116935:17722,15116937:17723,15116939:17724,15116945:17725,15116955:17726,15116957:17727,15116958:17728,15116959:17729,15116965:17730,15116971:17731,15116975:17732,15116976:17733,15116977:17734,15116980:17735,15116989:17736,15116990:17737,15116991:17738,15117190:17739,15117193:17740,15117192:17741,15117196:17742,15117200:17743,15117204:17744,15117205:17745,15117206:17746,15117212:17747,15117213:17748,15117220:17749,15117223:17750,15117228:17751,15117232:17752,15117233:17753,15117234:17754,15117244:17755,15117245:17756,15117442:17757,15117443:17758,15117446:17759,15117447:17760,15117449:17761,15117455:17762,15117456:17763,15117457:17764,15117463:17765,15117467:17766,15117470:17767,15117476:17768,15117480:17769,15117483:17770,15117484:17771,15117487:17772,15117493:17773,15117494:17774,15117499:17775,15117503:17776,15117702:17777,15117706:17778,15117709:17779,15117714:17780,15117718:17781,15117720:17782,15117725:17783,15117728:17784,15117735:17785,15117739:17786,15117742:17787,15117744:17788,15117749:17789,15117757:17790,15117758:17953,15117954:17954,15117957:17955,15117975:17956,15117979:17957,15117983:17958,15117984:17959,15117986:17960,15117987:17961,15117992:17962,15117993:17963,15117996:17964,15117997:17965,15117998:17966,15118e3:17967,15118008:17968,15118009:17969,15118013:17970,15118014:17971,15118211:17972,15118212:17973,15118217:17974,15118220:17975,15118230:17976,15118234:17977,15118241:17978,15118243:17979,15118246:17980,15118247:17981,15118254:17982,15118257:17983,15118263:17984,15118265:17985,15118271:17986,15118466:17987,15118468:17988,15118469:17989,15118473:17990,15118477:17991,15118478:17992,15118480:17993,15118482:17994,15118489:17995,15118495:17996,15118502:17997,15118503:17998,15118504:17999,15118508:18e3,15118510:18001,15118515:18002,15118517:18003,15118518:18004,15118522:18005,15118523:18006,15118527:18007,15118730:18008,15118731:18009,15118733:18010,15118735:18011,15118738:18012,15118740:18013,15118745:18014,15118747:18015,15118748:18016,15118763:18017,15118765:18018,15118767:18019,15118772:18020,15118774:18021,15118776:18022,15118777:18023,15118779:18024,15118981:18025,15118982:18026,15118983:18027,15118985:18028,15118996:18029,15118997:18030,15118999:18031,15119e3:18032,15119004:18033,15119007:18034,15119024:18035,15119026:18036,15119028:18037,15119234:18038,15119238:18039,15119245:18040,15119247:18041,15119248:18042,15119249:18043,15119250:18044,15119252:18045,15119254:18046,15119258:18209,15119260:18210,15119264:18211,15119271:18212,15119273:18213,15119275:18214,15119276:18215,15119278:18216,15119282:18217,15119284:18218,15119492:18219,15119495:18220,15119498:18221,15119502:18222,15119503:18223,15119505:18224,15119507:18225,15119514:18226,15119526:18227,15119527:18228,15119528:18229,15118759:18230,15119534:18231,15119535:18232,15119537:18233,15119545:18234,15119548:18235,15119551:18236,15119767:18237,15119774:18238,15119775:18239,15119777:18240,15119781:18241,15119783:18242,15119791:18243,15119792:18244,15119804:18245,15120002:18246,15120007:18247,15120017:18248,15120018:18249,15120020:18250,15120022:18251,15120023:18252,15120024:18253,15120042:18254,15120044:18255,15120052:18256,15120055:18257,15120057:18258,15120061:18259,15120063:18260,15120260:18261,15120264:18262,15120266:18263,15120270:18264,15120271:18265,15120278:18266,15120283:18267,15120285:18268,15120287:18269,15120288:18270,15120290:18271,15120293:18272,15120297:18273,15120303:18274,15120304:18275,15120308:18276,15120310:18277,15120316:18278,15120512:18279,15120516:18280,15120542:18281,15120546:18282,15120551:18283,15120562:18284,15120566:18285,15120569:18286,15120571:18287,15120572:18288,15120772:18289,15120773:18290,15120776:18291,15120777:18292,15120779:18293,15120783:18294,15120785:18295,15120786:18296,15120787:18297,15120788:18298,15120791:18299,15120796:18300,15120797:18301,15120798:18302,15120802:18465,15120803:18466,15120808:18467,15120819:18468,15120827:18469,15120829:18470,15121037:18471,15121043:18472,15121049:18473,15121056:18474,15121063:18475,15121069:18476,15121070:18477,15121073:18478,15121075:18479,15121083:18480,15121087:18481,15121280:18482,15121281:18483,15121283:18484,15121287:18485,15121288:18486,15121290:18487,15121293:18488,15121294:18489,15121295:18490,15121323:18491,15121325:18492,15121326:18493,15121337:18494,15121339:18495,15121341:18496,15121540:18497,15121544:18498,15121546:18499,15121548:18500,15121549:18501,15121558:18502,15121560:18503,15121562:18504,15121563:18505,15121574:18506,15121577:18507,15121578:18508,15121583:18509,15121584:18510,15121587:18511,15121590:18512,15121595:18513,15121596:18514,15121581:18515,15121807:18516,15121809:18517,15121810:18518,15121811:18519,15121815:18520,15121817:18521,15121818:18522,15121821:18523,15121822:18524,15121825:18525,15121826:18526,15121832:18527,15121836:18528,15121853:18529,15121854:18530,15122051:18531,15122055:18532,15122056:18533,15122059:18534,15122060:18535,15122061:18536,15122064:18537,15122066:18538,15122067:18539,15122068:18540,15122070:18541,15122074:18542,15122079:18543,15122080:18544,15122085:18545,15122086:18546,15122087:18547,15122088:18548,15122094:18549,15122095:18550,15122096:18551,15122101:18552,15122102:18553,15122108:18554,15122309:18555,15122311:18556,15122312:18557,15122314:18558,15122330:18721,15122334:18722,15122344:18723,15122345:18724,15122352:18725,15122357:18726,15122361:18727,15122364:18728,15122365:18729,15171712:18730,15171717:18731,15171718:18732,15171719:18733,15171725:18734,15171735:18735,15171744:18736,15171747:18737,15171759:18738,15171764:18739,15171767:18740,15171769:18741,15171772:18742,15171971:18743,15171972:18744,15171976:18745,15171977:18746,15171978:18747,15171979:18748,15171988:18749,15171989:18750,15171997:18751,15171998:18752,15171982:18753,15172004:18754,15172005:18755,15172012:18756,15172014:18757,15172021:18758,15172022:18759,15172030:18760,15172225:18761,15172229:18762,15172230:18763,15172244:18764,15172245:18765,15172246:18766,15172247:18767,15172248:18768,15172251:18769,15172260:18770,15172267:18771,15172272:18772,15172273:18773,15172276:18774,15172279:18775,15172490:18776,15172497:18777,15172499:18778,15172500:18779,15172501:18780,15172502:18781,15172504:18782,15172508:18783,15172516:18784,15172538:18785,15172739:18786,15172740:18787,15172741:18788,15172742:18789,15172743:18790,15172747:18791,15172748:18792,15172751:18793,15172766:18794,15172768:18795,15172779:18796,15172781:18797,15172783:18798,15172784:18799,15172785:18800,15172792:18801,15172993:18802,15172997:18803,15172998:18804,15172999:18805,15173002:18806,15173003:18807,15173008:18808,15173010:18809,15173015:18810,15173018:18811,15173020:18812,15173022:18813,15173024:18814,15173032:18977,15173049:18978,15173248:18979,15173253:18980,15173255:18981,15173260:18982,15173266:18983,15173274:18984,15173275:18985,15173280:18986,15173282:18987,15173295:18988,15173296:18989,15173298:18990,15173299:18991,15173306:18992,15173311:18993,15173504:18994,15173505:18995,15173508:18996,15173515:18997,15173516:18998,15173523:18999,15173526:19e3,15173529:19001,15173530:19002,15173532:19003,15173560:19004,15173566:19005,15173760:19006,15173767:19007,15173768:19008,15173769:19009,15173779:19010,15173783:19011,15173786:19012,15173789:19013,15173791:19014,15173796:19015,15173803:19016,15173807:19017,15173812:19018,15173816:19019,15173817:19020,15174017:19021,15174018:19022,15174019:19023,15174021:19024,15174030:19025,15174031:19026,15174032:19027,15174035:19028,15174037:19029,15174038:19030,15174042:19031,15174044:19032,15174046:19033,15174048:19034,15174051:19035,15174056:19036,15174059:19037,15174062:19038,15174063:19039,15174065:19040,15174071:19041,15174072:19042,15174075:19043,15174076:19044,15174079:19045,15174276:19046,15174281:19047,15174285:19048,15174286:19049,15174291:19050,15174299:19051,15174312:19052,15174317:19053,15174318:19054,15174321:19055,15174324:19056,15174334:19057,15174529:19058,15174535:19059,15174537:19060,15174540:19061,15174549:19062,15174550:19063,15174552:19064,15174559:19065,15174565:19066,15174579:19067,15174580:19068,15174586:19069,15174587:19070,15174590:19233,15174786:19234,15174788:19235,15174789:19236,15174791:19237,15174795:19238,15174797:19239,15174802:19240,15174803:19241,15174808:19242,15174809:19243,15174814:19244,15174818:19245,15174820:19246,15174823:19247,15174824:19248,15174828:19249,15174833:19250,15174834:19251,15174837:19252,15174842:19253,15174843:19254,15174845:19255,15175043:19256,15175053:19257,15175056:19258,15175058:19259,15175062:19260,15175064:19261,15175069:19262,15175070:19263,15175071:19264,15175072:19265,15175078:19266,15175079:19267,15175081:19268,15175083:19269,15175084:19270,15175086:19271,15175087:19272,15175089:19273,15175095:19274,15175097:19275,15175100:19276,15175296:19277,15175297:19278,15175299:19279,15175301:19280,15175302:19281,15175310:19282,15175312:19283,15175315:19284,15175317:19285,15175319:19286,15175320:19287,15175324:19288,15175326:19289,15175327:19290,15175328:19291,15175330:19292,15175333:19293,15175334:19294,15175338:19295,15175339:19296,15175341:19297,15175349:19298,15175351:19299,15175353:19300,15175356:19301,15175357:19302,15175359:19303,15175557:19304,15175558:19305,15175561:19306,15175563:19307,15175564:19308,15175567:19309,15175570:19310,15175571:19311,15175574:19312,15175577:19313,15175581:19314,15175585:19315,15175587:19316,15175590:19317,15175591:19318,15175593:19319,15175604:19320,15175605:19321,15175607:19322,15175609:19323,15175610:19324,15175611:19325,15175613:19326,15175615:19489,15175808:19490,15175809:19491,15175812:19492,15175815:19493,15175818:19494,15175825:19495,15175834:19496,15175835:19497,15175844:19498,15175846:19499,15175848:19500,15175849:19501,15175850:19502,15175851:19503,15175852:19504,15175853:19505,15175854:19506,15175855:19507,15175856:19508,15175857:19509,15175865:19510,15176064:19511,15176067:19512,15176068:19513,15176070:19514,15176071:19515,15176075:19516,15176077:19517,15176081:19518,15176082:19519,15176087:19520,15176093:19521,15176098:19522,15176102:19523,15176103:19524,15176104:19525,15176107:19526,15176109:19527,15176110:19528,15176113:19529,15176114:19530,15176320:19531,15176321:19532,15176325:19533,15176326:19534,15176327:19535,15176329:19536,15176335:19537,15176336:19538,15176337:19539,15176338:19540,15176344:19541,15176345:19542,15176346:19543,15176348:19544,15176351:19545,15176352:19546,15176353:19547,15176355:19548,15176358:19549,15176360:19550,15176361:19551,15176362:19552,15176363:19553,15176366:19554,15176367:19555,15176369:19556,15176370:19557,15176373:19558,15176377:19559,15176379:19560,15176383:19561,15176584:19562,15176585:19563,15176588:19564,15176592:19565,15176595:19566,15176600:19567,15176602:19568,15176603:19569,15176606:19570,15176607:19571,15176612:19572,15176616:19573,15176618:19574,15176619:19575,15176623:19576,15176628:19577,15176634:19578,15176635:19579,15176636:19580,15176639:19581,15176838:19582,15176850:19745,15176854:19746,15176855:19747,15176864:19748,15176865:19749,15176868:19750,15176871:19751,15176873:19752,15176874:19753,15176879:19754,15176886:19755,15176889:19756,15176893:19757,15176894:19758,15176895:19759,15177088:19760,15177091:19761,15177095:19762,15177096:19763,15177102:19764,15177104:19765,15177106:19766,15177111:19767,15177118:19768,15177119:19769,15177121:19770,15177135:19771,15177137:19772,15177145:19773,15177146:19774,15177147:19775,15177148:19776,15177149:19777,15177150:19778,15177345:19779,15177349:19780,15177360:19781,15177362:19782,15177363:19783,15177365:19784,15177369:19785,15177372:19786,15177378:19787,15177380:19788,15177396:19789,15177402:19790,15177407:19791,15177600:19792,15177601:19793,15177604:19794,15177606:19795,15177612:19796,15177614:19797,15177615:19798,15177623:19799,15177628:19800,15177631:19801,15177632:19802,15177633:19803,15177636:19804,15177639:19805,15177644:19806,15177646:19807,15177647:19808,15177649:19809,15177657:19810,15177856:19811,15177858:19812,15177859:19813,15177860:19814,15177863:19815,15177864:19816,15177866:19817,15177868:19818,15177871:19819,15177874:19820,15177875:19821,15177877:19822,15177878:19823,15177881:19824,15177883:19825,15177884:19826,15177885:19827,15177886:19828,15177891:19829,15177893:19830,15177894:19831,15177897:19832,15177901:19833,15177906:19834,15177907:19835,15177909:19836,15177912:19837,15177913:19838,15177914:20001,15177916:20002,15178122:20003,15178112:20004,15178113:20005,15178115:20006,15178116:20007,15178117:20008,15178121:20009,15178123:20010,15178133:20011,15178137:20012,15178143:20013,15178148:20014,15178149:20015,15178157:20016,15178158:20017,15178159:20018,15178161:20019,15178164:20020,15178369:20021,15178373:20022,15178380:20023,15178381:20024,15178389:20025,15178395:20026,15178396:20027,15178397:20028,15178399:20029,15178400:20030,15178402:20031,15178403:20032,15178404:20033,15178405:20034,15178406:20035,15178407:20036,15178408:20037,15178410:20038,15178413:20039,15178429:20040,15178625:20041,15178629:20042,15178633:20043,15178635:20044,15178636:20045,15178638:20046,15178644:20047,15178649:20048,15178656:20049,15178662:20050,15178664:20051,15178668:20052,15178672:20053,15178673:20054,15178678:20055,15178681:20056,15178684:20057,15178880:20058,15178886:20059,15178890:20060,15178894:20061,15178898:20062,15178900:20063,15178901:20064,15178903:20065,15178905:20066,15178906:20067,15178908:20068,15178914:20069,15178920:20070,15178925:20071,15178926:20072,15178927:20073,15178932:20074,15178933:20075,15178934:20076,15178937:20077,15178941:20078,15178942:20079,15179138:20080,15179141:20081,15179142:20082,15179146:20083,15179149:20084,15179150:20085,15179151:20086,15179154:20087,15179158:20088,15179159:20089,15179164:20090,15179166:20091,15179167:20092,15179168:20093,15179170:20094,15179172:20257,15179175:20258,15179178:20259,15179180:20260,15179184:20261,15179186:20262,15179187:20263,15179188:20264,15179194:20265,15179197:20266,15179392:20267,15179396:20268,15179404:20269,15179405:20270,15179412:20271,15179413:20272,15179414:20273,15179418:20274,15179423:20275,15179426:20276,15179431:20277,15179434:20278,15179438:20279,15179439:20280,15179441:20281,15179445:20282,15179454:20283,15179651:20284,15179657:20285,15179665:20286,15179666:20287,15179669:20288,15179673:20289,15179678:20290,15179679:20291,15179680:20292,15179684:20293,15179686:20294,15179690:20295,15179692:20296,15179696:20297,15179697:20298,15179700:20299,15179704:20300,15179707:20301,15179909:20302,15179910:20303,15179913:20304,15179917:20305,15179918:20306,15179921:20307,15179933:20308,15179937:20309,15179938:20310,15179939:20311,15179949:20312,15179950:20313,15179952:20314,15179957:20315,15179959:20316,15180163:20317,15180164:20318,15180167:20319,15180168:20320,15180172:20321,15180174:20322,15180178:20323,15180188:20324,15180190:20325,15180192:20326,15180193:20327,15180195:20328,15180196:20329,15180200:20330,15180202:20331,15180206:20332,15180218:20333,15180222:20334,15180426:20335,15180431:20336,15180436:20337,15180440:20338,15180449:20339,15180445:20340,15180446:20341,15180447:20342,15180452:20343,15180456:20344,15180460:20345,15180461:20346,15180464:20347,15180465:20348,15180466:20349,15180467:20350,15180475:20513,15180477:20514,15180479:20515,15180679:20516,15180680:20517,15180681:20518,15180684:20519,15180686:20520,15180690:20521,15180691:20522,15180693:20523,15180694:20524,15180708:20525,15180699:20526,15180703:20527,15180704:20528,15180705:20529,15180710:20530,15180714:20531,15180722:20532,15180723:20533,15180928:20534,15180726:20535,15180727:20536,15180730:20537,15180731:20538,15180735:20539,15180934:20540,15180940:20541,15180944:20542,15180954:20543,15180956:20544,15180958:20545,15180959:20546,15180960:20547,15180965:20548,15180967:20549,15180969:20550,15180973:20551,15180977:20552,15180980:20553,15180981:20554,15180987:20555,15180989:20556,15180991:20557,15181188:20558,15181189:20559,15181190:20560,15181194:20561,15181195:20562,15181199:20563,15181201:20564,15181204:20565,15181208:20566,15181211:20567,15181212:20568,15181223:20569,15181225:20570,15181227:20571,15181234:20572,15181241:20573,15181243:20574,15181244:20575,15181246:20576,15181451:20577,15181452:20578,15181457:20579,15181459:20580,15181460:20581,15181461:20582,15181462:20583,15181464:20584,15181467:20585,15181468:20586,15181473:20587,15181480:20588,15181481:20589,15181483:20590,15181487:20591,15181489:20592,15181492:20593,15181496:20594,15181499:20595,15181698:20596,15181700:20597,15181703:20598,15181704:20599,15181706:20600,15181711:20601,15181716:20602,15181718:20603,15181722:20604,15181725:20605,15181726:20606,15181728:20769,15181730:20770,15181733:20771,15181738:20772,15181739:20773,15181741:20774,15181745:20775,15181752:20776,15181756:20777,15181954:20778,15181955:20779,15181959:20780,15181961:20781,15181962:20782,15181964:20783,15181969:20784,15181973:20785,15181979:20786,15181982:20787,15181985:20788,15181991:20789,15181995:20790,15181997:20791,15181999:20792,15182e3:20793,15182004:20794,15182005:20795,15182008:20796,15182009:20797,15182010:20798,15182212:20799,15182213:20800,15182215:20801,15182216:20802,15182220:20803,15182229:20804,15182230:20805,15182233:20806,15182236:20807,15182237:20808,15182239:20809,15182240:20810,15182245:20811,15182247:20812,15182250:20813,15182253:20814,15182261:20815,15182264:20816,15182270:20817,15182464:20818,15182466:20819,15182469:20820,15182470:20821,15182474:20822,15182475:20823,15182480:20824,15182481:20825,15182484:20826,15182494:20827,15182496:20828,15182499:20829,15182508:20830,15182515:20831,15182517:20832,15182521:20833,15182523:20834,15182524:20835,15182726:20836,15182729:20837,15182732:20838,15182734:20839,15182737:20840,15182747:20841,15182760:20842,15182761:20843,15182763:20844,15182764:20845,15182769:20846,15182772:20847,15182779:20848,15182781:20849,15182782:20850,15182983:20851,15182996:20852,15183007:20853,15183011:20854,15183015:20855,15183017:20856,15183018:20857,15183019:20858,15183021:20859,15183022:20860,15183023:20861,15183024:20862,15183025:21025,15183028:21026,15183037:21027,15183039:21028,15183232:21029,15183233:21030,15183239:21031,15183246:21032,15183253:21033,15183264:21034,15183268:21035,15183270:21036,15183273:21037,15183274:21038,15183277:21039,15183279:21040,15183282:21041,15183283:21042,15183287:21043,15183492:21044,15183497:21045,15183502:21046,15183504:21047,15183505:21048,15183510:21049,15183515:21050,15183518:21051,15183520:21052,15183525:21053,15183532:21054,15183535:21055,15183536:21056,15183538:21057,15183541:21058,15183542:21059,15183546:21060,15183547:21061,15183548:21062,15183549:21063,15183746:21064,15183749:21065,15183752:21066,15183754:21067,15183764:21068,15183766:21069,15183767:21070,15183769:21071,15183770:21072,15183771:21073,15183784:21074,15183786:21075,15183794:21076,15183796:21077,15183797:21078,15183800:21079,15183801:21080,15183802:21081,15183804:21082,15183806:21083,15184001:21084,15184002:21085,15184003:21086,15184004:21087,15184006:21088,15184009:21089,15184011:21090,15184012:21091,15184014:21092,15184015:21093,15184025:21094,15184027:21095,15184032:21096,15184037:21097,15184038:21098,15184040:21099,15184044:21100,15184049:21101,15184051:21102,15184052:21103,15184054:21104,15184057:21105,15184058:21106,15184262:21107,15184266:21108,15184277:21109,15184273:21110,15184274:21111,15184275:21112,15184281:21113,15184282:21114,15184283:21115,15184284:21116,15184285:21117,15184286:21118,15184289:21281,15184291:21282,15184295:21283,15184297:21284,15184301:21285,15184302:21286,15184304:21287,15184306:21288,15184313:21289,15184316:21290,15184317:21291,15184518:21292,15184519:21293,15184527:21294,15184532:21295,15184542:21296,15184544:21297,15184550:21298,15184560:21299,15184566:21300,15184567:21301,15184570:21302,15184571:21303,15184572:21304,15184575:21305,15184772:21306,15184775:21307,15184776:21308,15184777:21309,15184781:21310,15184783:21311,15184787:21312,15184788:21313,15184789:21314,15184791:21315,15184793:21316,15184794:21317,15184797:21318,15184806:21319,15184809:21320,15184811:21321,15184821:21322,15185027:21323,15185031:21324,15185032:21325,15185033:21326,15185039:21327,15185041:21328,15185042:21329,15185043:21330,15185046:21331,15185053:21332,15185054:21333,15185059:21334,15185062:21335,15185066:21336,15185069:21337,15185073:21338,15185084:21339,15185085:21340,15185086:21341,15185280:21342,15185281:21343,15185287:21344,15185288:21345,15185293:21346,15185297:21347,15185299:21348,15185303:21349,15185305:21350,15185306:21351,15185308:21352,15185309:21353,15185317:21354,15185319:21355,15185322:21356,15185328:21357,15185336:21358,15185338:21359,15185339:21360,15185343:21361,15185537:21362,15185538:21363,15185539:21364,15185541:21365,15185542:21366,15185544:21367,15185547:21368,15185548:21369,15185549:21370,15185553:21371,15185558:21372,15185559:21373,15185565:21374,15185566:21537,15185574:21538,15185575:21539,15185578:21540,15185587:21541,15185590:21542,15185591:21543,15185593:21544,15185794:21545,15185795:21546,15185796:21547,15185797:21548,15185798:21549,15185804:21550,15185805:21551,15185806:21552,15185815:21553,15185817:21554,15186048:21555,15185826:21556,15185829:21557,15185830:21558,15185834:21559,15185835:21560,15185837:21561,15185841:21562,15185845:21563,15185846:21564,15185849:21565,15185850:21566,15186056:21567,15186064:21568,15186065:21569,15186069:21570,15186071:21571,15186076:21572,15186077:21573,15186080:21574,15186087:21575,15186088:21576,15186092:21577,15186093:21578,15186095:21579,15186099:21580,15186102:21581,15186111:21582,15186308:21583,15186309:21584,15186311:21585,15186318:21586,15186320:21587,15186322:21588,15186328:21589,15186335:21590,15186337:21591,15186338:21592,15186341:21593,15186347:21594,15186350:21595,15186351:21596,15186355:21597,15186360:21598,15186366:21599,15186561:21600,15186566:21601,15186567:21602,15186570:21603,15186573:21604,15186577:21605,15186581:21606,15186584:21607,15186586:21608,15186589:21609,15186590:21610,15187132:21611,15187131:21612,15187133:21613,15187134:21614,15187135:21615,15187331:21616,15187332:21617,15187335:21618,15187343:21619,15187346:21620,15187347:21621,15187355:21622,15187356:21623,15187357:21624,15187361:21625,15187363:21626,15187364:21627,15187365:21628,15187366:21629,15187373:21630,15187377:21793,15187389:21794,15187390:21795,15187391:21796,15187584:21797,15187595:21798,15187597:21799,15187599:21800,15187600:21801,15187601:21802,15187606:21803,15187607:21804,15187612:21805,15187617:21806,15187618:21807,15187622:21808,15187626:21809,15187629:21810,15187636:21811,15187644:21812,15187647:21813,15187840:21814,15187843:21815,15187848:21816,15187854:21817,15187855:21818,15187867:21819,15187871:21820,15187875:21821,15187877:21822,15187880:21823,15187884:21824,15187886:21825,15187887:21826,15187890:21827,15187898:21828,15187901:21829,15187902:21830,15187903:21831,15237255:21832,15237256:21833,15237258:21834,15237261:21835,15237262:21836,15237263:21837,15237265:21838,15237267:21839,15237268:21840,15237270:21841,15237277:21842,15237278:21843,15237279:21844,15237280:21845,15237284:21846,15237286:21847,15237292:21848,15237294:21849,15237296:21850,15237300:21851,15237301:21852,15237303:21853,15237305:21854,15237306:21855,15237308:21856,15237310:21857,15237504:21858,15237508:21859,15237536:21860,15237540:21861,15237542:21862,15237549:21863,15237553:21864,15237557:21865,15237761:21866,15237768:21867,15237774:21868,15237788:21869,15237790:21870,15237798:21871,15237799:21872,15237803:21873,15237816:21874,15237817:21875,15238024:21876,15238029:21877,15238031:21878,15238034:21879,15238036:21880,15238037:21881,15238039:21882,15238040:21883,15238048:21884,15238061:21885,15238062:21886,15238064:22049,15238066:22050,15238067:22051,15238070:22052,15238073:22053,15238074:22054,15238078:22055,15238275:22056,15238283:22057,15238294:22058,15238295:22059,15238296:22060,15238300:22061,15238302:22062,15238304:22063,15238308:22064,15238311:22065,15238316:22066,15238320:22067,15238325:22068,15238330:22069,15238332:22070,15238533:22071,15238535:22072,15238538:22073,15238540:22074,15238546:22075,15238551:22076,15238560:22077,15238561:22078,15238567:22079,15238568:22080,15238569:22081,15238573:22082,15238575:22083,15238583:22084,15238785:22085,15238800:22086,15238788:22087,15238789:22088,15238790:22089,15238795:22090,15238798:22091,15238806:22092,15238808:22093,15238811:22094,15238814:22095,15238818:22096,15238830:22097,15238834:22098,15238836:22099,15238843:22100,15239051:22101,15239043:22102,15239045:22103,15239050:22104,15239054:22105,15239055:22106,15239061:22107,15239063:22108,15239067:22109,15239069:22110,15239070:22111,15239073:22112,15239076:22113,15239083:22114,15239084:22115,15239088:22116,15239089:22117,15239090:22118,15239093:22119,15239094:22120,15239096:22121,15239097:22122,15239101:22123,15239103:22124,15239296:22125,15239299:22126,15239311:22127,15239315:22128,15239316:22129,15239321:22130,15239322:22131,15239325:22132,15239329:22133,15239330:22134,15239336:22135,15239346:22136,15239348:22137,15239354:22138,15239555:22139,15239556:22140,15239557:22141,15239558:22142,15239563:22305,15239566:22306,15239567:22307,15239569:22308,15239574:22309,15239580:22310,15239584:22311,15239587:22312,15239591:22313,15239597:22314,15239604:22315,15239611:22316,15239613:22317,15239615:22318,15239808:22319,15239809:22320,15239811:22321,15239812:22322,15239815:22323,15239817:22324,15239818:22325,15239822:22326,15239825:22327,15239828:22328,15239830:22329,15239832:22330,15239834:22331,15239835:22332,15239840:22333,15239841:22334,15239843:22335,15239844:22336,15239847:22337,15239848:22338,15239849:22339,15239850:22340,15239854:22341,15239856:22342,15239858:22343,15239860:22344,15239863:22345,15239866:22346,15239868:22347,15239870:22348,15239871:22349,15240070:22350,15240080:22351,15240085:22352,15240090:22353,15240096:22354,15240098:22355,15240100:22356,15240104:22357,15240106:22358,15240109:22359,15240111:22360,15240118:22361,15240119:22362,15240125:22363,15240126:22364,15240320:22365,15240321:22366,15240327:22367,15240328:22368,15240330:22369,15240331:22370,15240596:22371,15240347:22372,15240349:22373,15240350:22374,15240351:22375,15240353:22376,15240354:22377,15240364:22378,15240365:22379,15240366:22380,15240368:22381,15240371:22382,15240375:22383,15240378:22384,15240380:22385,15240381:22386,15240578:22387,15240579:22388,15240580:22389,15240583:22390,15240589:22391,15240590:22392,15240593:22393,15240597:22394,15240598:22395,15240599:22396,15240624:22397,15240632:22398,15240637:22561,15240639:22562,15240832:22563,15240834:22564,15240836:22565,15240838:22566,15240845:22567,15240850:22568,15240852:22569,15240853:22570,15240856:22571,15240857:22572,15240859:22573,15240860:22574,15240861:22575,15240870:22576,15240871:22577,15240873:22578,15240876:22579,15240894:22580,15240895:22581,15241088:22582,15241095:22583,15241097:22584,15241103:22585,15241104:22586,15241105:22587,15241108:22588,15241117:22589,15240595:22590,15241128:22591,15241130:22592,15241142:22593,15241144:22594,15241145:22595,15241148:22596,15241345:22597,15241350:22598,15241354:22599,15241359:22600,15241361:22601,15241365:22602,15241369:22603,15240877:22604,15241391:22605,15241401:22606,15241605:22607,15241607:22608,15241608:22609,15241610:22610,15241613:22611,15241615:22612,15241617:22613,15241618:22614,15241622:22615,15241624:22616,15241625:22617,15241626:22618,15241628:22619,15241632:22620,15241636:22621,15241637:22622,15241639:22623,15241642:22624,15241648:22625,15241651:22626,15241652:22627,15241654:22628,15241656:22629,15241660:22630,15241661:22631,15241857:22632,15241861:22633,15241874:22634,15241875:22635,15241877:22636,15241886:22637,15241894:22638,15241896:22639,15241897:22640,15241898:22641,15241903:22642,15241905:22643,15241908:22644,15241914:22645,15241917:22646,15241918:22647,15242112:22648,15242114:22649,15242119:22650,15242120:22651,15242124:22652,15242127:22653,15242131:22654,15242140:22817,15242151:22818,15242154:22819,15242159:22820,15242160:22821,15242161:22822,15242162:22823,15242167:22824,15242418:22825,15242170:22826,15242171:22827,15242173:22828,15242370:22829,15242371:22830,15242375:22831,15242380:22832,15242382:22833,15242384:22834,15242396:22835,15242398:22836,15242402:22837,15242403:22838,15242404:22839,15242405:22840,15242407:22841,15242410:22842,15242411:22843,15242415:22844,15242419:22845,15242420:22846,15242422:22847,15242431:22848,15242630:22849,15242639:22850,15242640:22851,15242641:22852,15242642:22853,15242643:22854,15242646:22855,15242649:22856,15242652:22857,15242653:22858,15242654:22859,15242655:22860,15242656:22861,15242657:22862,15242658:22863,15242660:22864,15242667:22865,15242671:22866,15242681:22867,15242682:22868,15242683:22869,15242685:22870,15242687:22871,15242881:22872,15242885:22873,15242886:22874,15242889:22875,15242891:22876,15242892:22877,15242895:22878,15242899:22879,15242904:22880,15242909:22881,15242911:22882,15242912:22883,15242914:22884,15242917:22885,15242919:22886,15242932:22887,15242934:22888,15242935:22889,15242936:22890,15242940:22891,15242941:22892,15242942:22893,15242943:22894,15243138:22895,15243143:22896,15243146:22897,15243147:22898,15243150:22899,15242925:22900,15243160:22901,15243162:22902,15243167:22903,15243168:22904,15243174:22905,15243176:22906,15243181:22907,15243187:22908,15243190:22909,15243196:22910,15243199:23073,15243392:23074,15243396:23075,15243397:23076,15243405:23077,15243406:23078,15243408:23079,15243409:23080,15243410:23081,15243416:23082,15243417:23083,15243419:23084,15243422:23085,15243425:23086,15243431:23087,15243433:23088,15243446:23089,15243448:23090,15243450:23091,15243452:23092,15243453:23093,15243648:23094,15243650:23095,15243654:23096,15243666:23097,15243667:23098,15243670:23099,15243671:23100,15243672:23101,15243673:23102,15243677:23103,15243680:23104,15243681:23105,15243682:23106,15243683:23107,15243684:23108,15243689:23109,15243692:23110,15243695:23111,15243701:23112,15243702:23113,15243703:23114,15243706:23115,15243917:23116,15243921:23117,15243926:23118,15243928:23119,15243930:23120,15243932:23121,15243937:23122,15243942:23123,15243943:23124,15243944:23125,15243949:23126,15243953:23127,15243955:23128,15243956:23129,15243957:23130,15243959:23131,15243960:23132,15243961:23133,15243967:23134,15244160:23135,15244161:23136,15244163:23137,15244165:23138,15244177:23139,15244178:23140,15244181:23141,15244183:23142,15244186:23143,15244188:23144,15244192:23145,15244195:23146,15244197:23147,15244199:23148,15243912:23149,15244218:23150,15244220:23151,15244221:23152,15244420:23153,15244421:23154,15244423:23155,15244427:23156,15244430:23157,15244431:23158,15244432:23159,15244435:23160,15244436:23161,15244441:23162,15244446:23163,15244447:23164,15244449:23165,15244451:23166,15244456:23329,15244462:23330,15244463:23331,15244465:23332,15244466:23333,15244473:23334,15244474:23335,15244476:23336,15244477:23337,15244478:23338,15244672:23339,15244675:23340,15244677:23341,15244685:23342,15244696:23343,15244701:23344,15244705:23345,15244708:23346,15244709:23347,15244719:23348,15244721:23349,15244722:23350,15244731:23351,15244931:23352,15244932:23353,15244933:23354,15244934:23355,15244935:23356,15244936:23357,15244937:23358,15244939:23359,15244940:23360,15244944:23361,15244947:23362,15244949:23363,15244951:23364,15244952:23365,15244953:23366,15244958:23367,15244960:23368,15244963:23369,15244967:23370,15244972:23371,15244973:23372,15244974:23373,15244977:23374,15244981:23375,15244990:23376,15244991:23377,15245185:23378,15245192:23379,15245193:23380,15245194:23381,15245198:23382,15245205:23383,15245206:23384,15245209:23385,15245210:23386,15245212:23387,15245215:23388,15245218:23389,15245219:23390,15245220:23391,15245226:23392,15245227:23393,15245229:23394,15245233:23395,15245235:23396,15245240:23397,15245242:23398,15245247:23399,15245441:23400,15245443:23401,15245446:23402,15245449:23403,15245450:23404,15245451:23405,15245456:23406,15245465:23407,15245458:23408,15245459:23409,15245460:23410,15245464:23411,15245466:23412,15245467:23413,15245468:23414,15245470:23415,15245471:23416,15245480:23417,15245485:23418,15245486:23419,15245488:23420,15245490:23421,15245493:23422,15245498:23585,15245500:23586,15245697:23587,15245699:23588,15245701:23589,15245704:23590,15245705:23591,15245706:23592,15245707:23593,15245710:23594,15245713:23595,15245717:23596,15245718:23597,15245720:23598,15245722:23599,15245724:23600,15245727:23601,15245728:23602,15245732:23603,15245737:23604,15245745:23605,15245753:23606,15245755:23607,15245952:23608,15245976:23609,15245978:23610,15245979:23611,15245980:23612,15245983:23613,15245984:23614,15245992:23615,15245994:23616,15246010:23617,15246013:23618,15246014:23619,15246208:23620,15246218:23621,15246219:23622,15246220:23623,15246221:23624,15246222:23625,15246225:23626,15246226:23627,15246227:23628,15246235:23629,15246238:23630,15246247:23631,15246255:23632,15246256:23633,15246257:23634,15246261:23635,15246263:23636,15246465:23637,15246470:23638,15246477:23639,15246478:23640,15246479:23641,15246485:23642,15246486:23643,15246488:23644,15246489:23645,15246490:23646,15246492:23647,15246496:23648,15246502:23649,15246503:23650,15246504:23651,15246512:23652,15246513:23653,15246514:23654,15246517:23655,15246521:23656,15246522:23657,15246526:23658,15246720:23659,15246722:23660,15246725:23661,15246726:23662,15246729:23663,15246735:23664,15246738:23665,15246743:23666,15246746:23667,15246747:23668,15246748:23669,15246753:23670,15246754:23671,15246755:23672,15246763:23673,15246766:23674,15246768:23675,15246771:23676,15246773:23677,15246778:23678,15246779:23841,15246780:23842,15246781:23843,15246985:23844,15246989:23845,15246992:23846,15246996:23847,15246997:23848,15247003:23849,15247004:23850,15247007:23851,15247008:23852,15247013:23853,15247024:23854,15247028:23855,15247029:23856,15247030:23857,15247031:23858,15247036:23859,15247252:23860,15247253:23861,15247254:23862,15247255:23863,15247256:23864,15247269:23865,15247273:23866,15247275:23867,15247277:23868,15247281:23869,15247283:23870,15247286:23871,15247289:23872,15247293:23873,15247295:23874,15247492:23875,15247493:23876,15247495:23877,15247503:23878,15247505:23879,15247506:23880,15247508:23881,15247509:23882,15247518:23883,15247520:23884,15247522:23885,15247524:23886,15247526:23887,15247531:23888,15247532:23889,15247535:23890,15247541:23891,15247543:23892,15247549:23893,15247550:23894,15247744:23895,15247747:23896,15247749:23897,15247751:23898,15247753:23899,15247757:23900,15247758:23901,15247763:23902,15247766:23903,15247767:23904,15247768:23905,15247772:23906,15247773:23907,15247777:23908,15247781:23909,15247783:23910,15247797:23911,15247798:23912,15247799:23913,15247801:23914,15247802:23915,15247803:23916,15247806:23917,15247807:23918,15248e3:23919,15248003:23920,15248006:23921,15248011:23922,15248015:23923,15248016:23924,15248018:23925,15248022:23926,15248023:23927,15248025:23928,15248031:23929,15248039:23930,15248041:23931,15248046:23932,15248047:23933,15248051:23934,15248054:24097,15248055:24098,15248059:24099,15248062:24100,15248259:24101,15248262:24102,15248264:24103,15248265:24104,15248266:24105,15248273:24106,15248275:24107,15248276:24108,15248277:24109,15248279:24110,15248285:24111,15248287:24112,15248300:24113,15248304:24114,15248308:24115,15248309:24116,15248310:24117,15248316:24118,15248319:24119,15248517:24120,15248518:24121,15248523:24122,15248529:24123,15248540:24124,15248542:24125,15248543:24126,15248522:24127,15248557:24128,15248560:24129,15248567:24130,15248572:24131,15248770:24132,15248771:24133,15248772:24134,15248773:24135,15248774:24136,15248776:24137,15248786:24138,15248787:24139,15248788:24140,15248793:24141,15248781:24142,15248798:24143,15248803:24144,15248813:24145,15248822:24146,15248824:24147,15248825:24148,15248828:24149,15248830:24150,15249025:24151,15249028:24152,15249029:24153,15249035:24154,15249037:24155,15249039:24156,15249044:24157,15249045:24158,15249052:24159,15249054:24160,15249055:24161,15249592:24162,15249593:24163,15249597:24164,15249598:24165,15249797:24166,15249799:24167,15249801:24168,15249803:24169,15249807:24170,15249809:24171,15249811:24172,15249812:24173,15249815:24174,15249816:24175,15249819:24176,15249821:24177,15249817:24178,15249827:24179,15249828:24180,15249830:24181,15249832:24182,15249833:24183,15249837:24184,15249843:24185,15249845:24186,15249846:24187,15249851:24188,15249854:24189,15250054:24190,15250055:24353,15250059:24354,15250064:24355,15250066:24356,15250067:24357,15250073:24358,15250075:24359,15250076:24360,15250084:24361,15250105:24362,15250106:24363,15250309:24364,15250310:24365,15250313:24366,15250315:24367,15250319:24368,15250326:24369,15250325:24370,15250329:24371,15250333:24372,15250337:24373,15250344:24374,15250348:24375,15250351:24376,15250352:24377,15250354:24378,15250357:24379,15250359:24380,15250360:24381,15250366:24382,15250367:24383,15250561:24384,15250563:24385,15250569:24386,15250578:24387,15250583:24388,15250587:24389,15250853:24390,15250857:24391,15250860:24392,15250862:24393,15250879:24394,15251074:24395,15251076:24396,15251080:24397,15251085:24398,15251088:24399,15251089:24400,15251093:24401,15251102:24402,15251103:24403,15251104:24404,15251110:24405,15251115:24406,15251116:24407,15251119:24408,15251122:24409,15251125:24410,15251127:24411,15251129:24412,15251131:24413,15251328:24414,15251333:24415,15251334:24416,15251335:24417,15251336:24418,15251338:24419,15251342:24420,15251345:24421,15251348:24422,15251349:24423,15251351:24424,15251353:24425,15251364:24426,15251365:24427,15251367:24428,15251372:24429,15251376:24430,15251132:24431,15251377:24432,15251378:24433,15251380:24434,15251389:24435,15251585:24436,15251588:24437,15251589:24438,15251590:24439,15251595:24440,15251601:24441,15251604:24442,15251606:24443,15251616:24444,15251617:24445,15251618:24446,15251619:24609,15251622:24610,15251623:24611,15251633:24612,15251635:24613,15251638:24614,15251639:24615,15251640:24616,15251641:24617,15251645:24618,15251840:24619,15251841:24620,15251851:24621,15251853:24622,15251854:24623,15251855:24624,15251860:24625,15251867:24626,15251868:24627,15251869:24628,15251870:24629,15251873:24630,15251874:24631,15251881:24632,15251884:24633,15251885:24634,15251887:24635,15251888:24636,15251889:24637,15251897:24638,15251898:24639,15251899:24640,15252098:24641,15252099:24642,15252105:24643,15252112:24644,15252114:24645,15252117:24646,15252122:24647,15252123:24648,15252125:24649,15252126:24650,15252130:24651,15252135:24652,15252137:24653,15252141:24654,15252142:24655,15252147:24656,15252149:24657,15252154:24658,15252155:24659,15252352:24660,15252353:24661,15252355:24662,15252356:24663,15252359:24664,15252367:24665,15252369:24666,15252372:24667,15252380:24668,15252392:24669,15252398:24670,15252400:24671,15252401:24672,15252407:24673,15252409:24674,15252410:24675,15252397:24676,15252608:24677,15252610:24678,15252615:24679,15252616:24680,15252623:24681,15252624:24682,15252630:24683,15252631:24684,15252632:24685,15252638:24686,15252640:24687,15252641:24688,15252643:24689,15252645:24690,15252647:24691,15252648:24692,15252652:24693,15252653:24694,15252654:24695,15252660:24696,15252661:24697,15252662:24698,15252663:24699,15252666:24700,15252864:24701,15252865:24702,15252867:24865,15252871:24866,15252879:24867,15252881:24868,15252882:24869,15252883:24870,15252884:24871,15252885:24872,15252888:24873,15252893:24874,15252894:24875,15252901:24876,15253149:24877,15253152:24878,15253153:24879,15253156:24880,15253157:24881,15253158:24882,15253173:24883,15253174:24884,15253176:24885,15253182:24886,15253376:24887,15253377:24888,15253382:24889,15253386:24890,15253387:24891,15253389:24892,15253392:24893,15253394:24894,15253395:24895,15253397:24896,15253408:24897,15253411:24898,15253412:24899,15253416:24900,15253422:24901,15253425:24902,15253429:24903,15253430:24904,15253435:24905,15253438:24906,15302786:24907,15302788:24908,15302792:24909,15302796:24910,15302808:24911,15302811:24912,15302824:24913,15302825:24914,15302831:24915,15302826:24916,15302828:24917,15302829:24918,15302835:24919,15302836:24920,15302839:24921,15302847:24922,15303043:24923,15303044:24924,15303052:24925,15303067:24926,15303069:24927,15303074:24928,15303078:24929,15303079:24930,15303084:24931,15303088:24932,15303092:24933,15303097:24934,15303301:24935,15303304:24936,15303307:24937,15303308:24938,15303310:24939,15303312:24940,15303317:24941,15303319:24942,15303320:24943,15303321:24944,15303323:24945,15303328:24946,15303329:24947,15303330:24948,15303333:24949,15303344:24950,15303346:24951,15303347:24952,15303348:24953,15303350:24954,15303357:24955,15303564:24956,15303358:24957,15303555:24958,15303556:25121,15303557:25122,15303559:25123,15303560:25124,15303573:25125,15303575:25126,15303576:25127,15303577:25128,15303580:25129,15303581:25130,15303583:25131,15303589:25132,15303570:25133,15303606:25134,15303595:25135,15303599:25136,15303600:25137,15303604:25138,15303614:25139,15303615:25140,15303808:25141,15303812:25142,15303813:25143,15303814:25144,15303816:25145,15303821:25146,15303824:25147,15303828:25148,15303830:25149,15303831:25150,15303832:25151,15303834:25152,15303836:25153,15303838:25154,15303840:25155,15303845:25156,15303842:25157,15303843:25158,15303847:25159,15303849:25160,15303854:25161,15303855:25162,15303857:25163,15303860:25164,15303862:25165,15303863:25166,15303865:25167,15303866:25168,15303868:25169,15303869:25170,15304067:25171,15304071:25172,15304072:25173,15304079:25174,15304083:25175,15304087:25176,15304089:25177,15304090:25178,15304091:25179,15304097:25180,15304100:25181,15304103:25182,15304109:25183,15304116:25184,15304121:25185,15304122:25186,15304123:25187,15304321:25188,15304323:25189,15304325:25190,15304326:25191,15304330:25192,15304334:25193,15304337:25194,15304339:25195,15304340:25196,15304341:25197,15304344:25198,15304350:25199,15304353:25200,15304358:25201,15304360:25202,15304364:25203,15304365:25204,15304366:25205,15304368:25206,15304369:25207,15304370:25208,15304371:25209,15304374:25210,15304379:25211,15304380:25212,15304381:25213,15304383:25214,15304578:25377,15304579:25378,15304581:25379,15304595:25380,15304596:25381,15304599:25382,15304601:25383,15304602:25384,15304606:25385,15304612:25386,15304613:25387,15304617:25388,15304618:25389,15304620:25390,15304621:25391,15304622:25392,15304623:25393,15304624:25394,15304625:25395,15304631:25396,15304633:25397,15304635:25398,15304637:25399,15304832:25400,15304833:25401,15304836:25402,15304837:25403,15304838:25404,15304839:25405,15304841:25406,15304842:25407,15304844:25408,15304848:25409,15304850:25410,15304851:25411,15304854:25412,15304856:25413,15304860:25414,15304861:25415,15304867:25416,15304868:25417,15304869:25418,15304870:25419,15304872:25420,15304878:25421,15304879:25422,15304880:25423,15304883:25424,15304885:25425,15304886:25426,15304888:25427,15304889:25428,15304890:25429,15304892:25430,15304894:25431,15305088:25432,15305090:25433,15305091:25434,15305094:25435,15305095:25436,15305098:25437,15305101:25438,15305102:25439,15305103:25440,15305105:25441,15305112:25442,15305113:25443,15305116:25444,15305117:25445,15305120:25446,15305121:25447,15305125:25448,15305127:25449,15305128:25450,15305129:25451,15305134:25452,15305135:25453,15305136:25454,15305141:25455,15305142:25456,15305143:25457,15305144:25458,15305145:25459,15305147:25460,15305148:25461,15305149:25462,15305151:25463,15305352:25464,15305353:25465,15305354:25466,15305357:25467,15305358:25468,15305362:25469,15305367:25470,15305369:25633,15305375:25634,15305376:25635,15305380:25636,15305381:25637,15305383:25638,15305384:25639,15305387:25640,15305391:25641,15305394:25642,15305398:25643,15305400:25644,15305402:25645,15305403:25646,15305404:25647,15305405:25648,15305407:25649,15305600:25650,15305601:25651,15305602:25652,15305603:25653,15305605:25654,15305606:25655,15305607:25656,15305608:25657,15305611:25658,15305612:25659,15305613:25660,15305614:25661,15305616:25662,15305619:25663,15305621:25664,15305623:25665,15305624:25666,15305625:25667,15305628:25668,15305629:25669,15305631:25670,15305632:25671,15305633:25672,15305635:25673,15305637:25674,15305639:25675,15305640:25676,15305644:25677,15305646:25678,15305648:25679,15305657:25680,15305659:25681,15305663:25682,15305856:25683,15305858:25684,15305864:25685,15305869:25686,15305873:25687,15305876:25688,15305877:25689,15305884:25690,15305885:25691,15305886:25692,15305887:25693,15305889:25694,15305892:25695,15305893:25696,15305895:25697,15305897:25698,15305898:25699,15305907:25700,15305908:25701,15305910:25702,15305911:25703,15306119:25704,15306120:25705,15306121:25706,15306128:25707,15306129:25708,15306130:25709,15306133:25710,15306135:25711,15306136:25712,15306138:25713,15306142:25714,15306148:25715,15306149:25716,15306151:25717,15306153:25718,15306154:25719,15306157:25720,15306159:25721,15306160:25722,15306161:25723,15306163:25724,15306164:25725,15306166:25726,15306170:25889,15306173:25890,15306175:25891,15306368:25892,15306369:25893,15306370:25894,15306376:25895,15306378:25896,15306379:25897,15306381:25898,15306383:25899,15306386:25900,15306389:25901,15306392:25902,15306395:25903,15306398:25904,15306401:25905,15306403:25906,15306404:25907,15306406:25908,15306408:25909,15306411:25910,15306420:25911,15306421:25912,15306422:25913,15306426:25914,15306409:25915,15306625:25916,15306628:25917,15306629:25918,15306630:25919,15306631:25920,15306633:25921,15306634:25922,15306635:25923,15306636:25924,15306637:25925,15306643:25926,15306649:25927,15306652:25928,15306654:25929,15306655:25930,15306658:25931,15306662:25932,15306663:25933,15306681:25934,15306679:25935,15306680:25936,15306682:25937,15306683:25938,15306685:25939,15306881:25940,15306882:25941,15306884:25942,15306888:25943,15306889:25944,15306893:25945,15306894:25946,15306895:25947,15306901:25948,15306902:25949,15306903:25950,15306911:25951,15306926:25952,15306927:25953,15306929:25954,15306930:25955,15306931:25956,15306932:25957,15306939:25958,15306943:25959,15306941:25960,15307139:25961,15307141:25962,15307144:25963,15307146:25964,15307148:25965,15307157:25966,15307161:25967,15307164:25968,15307167:25969,15307169:25970,15307171:25971,15307176:25972,15307179:25973,15307181:25974,15307182:25975,15307183:25976,15307185:25977,15307186:25978,15307396:25979,15307395:25980,15308216:25981,15308217:25982,15308222:26145,15308420:26146,15308424:26147,15308428:26148,15308429:26149,15308430:26150,15308445:26151,15308446:26152,15308447:26153,15308449:26154,15308454:26155,15308457:26156,15308459:26157,15308460:26158,15308468:26159,15308470:26160,15308474:26161,15308477:26162,15308479:26163,15308678:26164,15308680:26165,15308681:26166,15308683:26167,15308688:26168,15308689:26169,15308690:26170,15308691:26171,15308697:26172,15308698:26173,15308701:26174,15308702:26175,15308703:26176,15308704:26177,15308708:26178,15308710:26179,15308957:26180,15308958:26181,15308962:26182,15308964:26183,15308965:26184,15308966:26185,15308972:26186,15308977:26187,15308979:26188,15308983:26189,15308984:26190,15308985:26191,15308986:26192,15308988:26193,15308989:26194,15309185:26195,15309202:26196,15309204:26197,15309206:26198,15309207:26199,15309208:26200,15309217:26201,15309230:26202,15309236:26203,15309243:26204,15309244:26205,15309246:26206,15309247:26207,15309441:26208,15309442:26209,15309443:26210,15309444:26211,15309449:26212,15309457:26213,15309462:26214,15309466:26215,15309469:26216,15309471:26217,15309476:26218,15309477:26219,15309478:26220,15309481:26221,15309486:26222,15309487:26223,15309491:26224,15309498:26225,15309706:26226,15309714:26227,15054514:26228,15309720:26229,15309722:26230,15309725:26231,15309726:26232,15309727:26233,15309737:26234,15309743:26235,15309745:26236,15309754:26237,15309954:26238,15309955:26401,15309957:26402,15309961:26403,15309978:26404,15309979:26405,15309981:26406,15309985:26407,15309986:26408,15309987:26409,15309992:26410,15310001:26411,15310003:26412,15310209:26413,15310211:26414,15310218:26415,15310222:26416,15310223:26417,15310229:26418,15310231:26419,15310232:26420,15310234:26421,15310235:26422,15310243:26423,15310247:26424,15310250:26425,15310254:26426,15310259:26427,15310262:26428,15310263:26429,15310264:26430,15310267:26431,15310269:26432,15310271:26433,15310464:26434,15310473:26435,15310485:26436,15310486:26437,15310487:26438,15310489:26439,15310490:26440,15310494:26441,15310495:26442,15310498:26443,15310508:26444,15310510:26445,15310513:26446,15310514:26447,15310517:26448,15310518:26449,15310520:26450,15310521:26451,15310522:26452,15310524:26453,15310526:26454,15310527:26455,15310721:26456,15310724:26457,15310725:26458,15310727:26459,15310729:26460,15310730:26461,15310732:26462,15310733:26463,15310734:26464,15310736:26465,15310737:26466,15310740:26467,15310743:26468,15310744:26469,15310745:26470,15310749:26471,15310750:26472,15310752:26473,15310747:26474,15310753:26475,15310756:26476,15310767:26477,15310769:26478,15310772:26479,15310775:26480,15310776:26481,15310778:26482,15310983:26483,15310986:26484,15311001:26485,15310989:26486,15310990:26487,15310996:26488,15310998:26489,15311004:26490,15311006:26491,15311008:26492,15311011:26493,15311014:26494,15311019:26657,15311022:26658,15311023:26659,15311024:26660,15311026:26661,15311027:26662,15311029:26663,15311013:26664,15311038:26665,15311236:26666,15311239:26667,15311242:26668,15311249:26669,15311250:26670,15311251:26671,15311254:26672,15311255:26673,15311257:26674,15311258:26675,15311266:26676,15311267:26677,15311269:26678,15311270:26679,15311274:26680,15311276:26681,15311531:26682,15311533:26683,15311534:26684,15311536:26685,15311540:26686,15311543:26687,15311544:26688,15311546:26689,15311547:26690,15311551:26691,15311746:26692,15311749:26693,15311752:26694,15311756:26695,15311777:26696,15311779:26697,15311781:26698,15311782:26699,15311783:26700,15311786:26701,15311795:26702,15311798:26703,15312002:26704,15312007:26705,15312008:26706,15312017:26707,15312021:26708,15312022:26709,15312023:26710,15312026:26711,15312027:26712,15312028:26713,15312031:26714,15312034:26715,15312038:26716,15312039:26717,15312043:26718,15312049:26719,15312050:26720,15312051:26721,15312052:26722,15312053:26723,15312057:26724,15312058:26725,15312059:26726,15312060:26727,15312256:26728,15312257:26729,15312262:26730,15312263:26731,15312264:26732,15312269:26733,15312270:26734,15312276:26735,15312280:26736,15312281:26737,15312283:26738,15312284:26739,15312286:26740,15312287:26741,15312288:26742,15312539:26743,15312541:26744,15312543:26745,15312550:26746,15312560:26747,15312561:26748,15312562:26749,15312565:26750,15312569:26913,15312570:26914,15312573:26915,15312575:26916,15312771:26917,15312777:26918,15312787:26919,15312788:26920,15312793:26921,15312794:26922,15312796:26923,15312798:26924,15312807:26925,15312810:26926,15312811:26927,15312812:26928,15312816:26929,15312820:26930,15312821:26931,15312825:26932,15312829:26933,15312830:26934,15313026:26935,15313027:26936,15313028:26937,15313035:26938,15313036:26939,15313040:26940,15313041:26941,15313046:26942,15313054:26943,15313056:26944,15313058:26945,15313059:26946,15313060:26947,15313063:26948,15313069:26949,15313070:26950,15313075:26951,15313077:26952,15313078:26953,15313080:26954,15313287:26955,15313281:26956,15313284:26957,15313290:26958,15313291:26959,15313292:26960,15313294:26961,15313297:26962,15313300:26963,15313302:26964,15313309:26965,15313578:26966,15313580:26967,15313582:26968,15313583:26969,15313586:26970,15313588:26971,15313589:26972,15313590:26973,15313593:26974,15313595:26975,15313598:26976,15313599:26977,15313793:26978,15313795:26979,15313798:26980,15313800:26981,15313806:26982,15313808:26983,15313810:26984,15313813:26985,15313814:26986,15313815:26987,15313819:26988,15313820:26989,15313824:26990,15313828:26991,15313829:26992,15313831:26993,15313833:26994,15313836:26995,15313842:26996,15313843:26997,15313845:26998,15313849:26999,15313850:27e3,15313853:27001,15313855:27002,15314048:27003,15314049:27004,15314050:27005,15314051:27006,15314052:27169,15314053:27170,15314056:27171,15314057:27172,15314059:27173,15314060:27174,15314061:27175,15314062:27176,15314064:27177,15314066:27178,15314070:27179,15314073:27180,15314075:27181,15314076:27182,15314080:27183,15314086:27184,15314091:27185,15314093:27186,15314099:27187,15314100:27188,15314101:27189,15314103:27190,15314105:27191,15314106:27192,15314109:27193,15314312:27194,15314315:27195,15314316:27196,15314325:27197,15314326:27198,15314327:27199,15314331:27200,15314334:27201,15314337:27202,15314339:27203,15314341:27204,15314342:27205,15314344:27206,15314346:27207,15314347:27208,15314348:27209,15314349:27210,15314350:27211,15314355:27212,15314357:27213,15314359:27214,15314360:27215,15314361:27216,15314367:27217,15314560:27218,15314564:27219,15314565:27220,15314566:27221,15314567:27222,15314569:27223,15314570:27224,15314571:27225,15314573:27226,15314575:27227,15314576:27228,15314580:27229,15314586:27230,15314589:27231,15314590:27232,15314598:27233,15314599:27234,15314601:27235,15314604:27236,15314608:27237,15314609:27238,15314610:27239,15314615:27240,15314616:27241,15314619:27242,15314620:27243,15314622:27244,15314623:27245,15314817:27246,15314823:27247,15314824:27248,15314830:27249,15314832:27250,15314839:27251,15314840:27252,15314845:27253,15314847:27254,15314853:27255,15314855:27256,15314858:27257,15314859:27258,15314863:27259,15314867:27260,15314871:27261,15314872:27262,15314873:27425,15314874:27426,15314877:27427,15314879:27428,15315072:27429,15315074:27430,15315083:27431,15315087:27432,15315089:27433,15315094:27434,15315096:27435,15315097:27436,15315098:27437,15315100:27438,15315102:27439,15315106:27440,15315107:27441,15315110:27442,15315111:27443,15315112:27444,15315113:27445,15315114:27446,15315121:27447,15315125:27448,15315126:27449,15315127:27450,15315133:27451,15315329:27452,15315331:27453,15315332:27454,15315333:27455,15315337:27456,15315338:27457,15315342:27458,15315343:27459,15315344:27460,15315347:27461,15315348:27462,15315350:27463,15315352:27464,15315355:27465,15315357:27466,15315358:27467,15315359:27468,15315363:27469,15315369:27470,15315370:27471,15315356:27472,15315371:27473,15315368:27474,15315374:27475,15315376:27476,15315378:27477,15315381:27478,15315383:27479,15315387:27480,15315878:27481,15315890:27482,15315895:27483,15315897:27484,15316107:27485,15316098:27486,15316113:27487,15316119:27488,15316120:27489,15316124:27490,15316125:27491,15316126:27492,15316143:27493,15316144:27494,15316146:27495,15316147:27496,15316148:27497,15316154:27498,15316156:27499,15316357:27500,15316157:27501,15316354:27502,15316355:27503,15316359:27504,15316362:27505,15316371:27506,15316372:27507,15316383:27508,15316387:27509,15316386:27510,15316389:27511,15316393:27512,15316394:27513,15316395:27514,15316400:27515,15316406:27516,15316407:27517,15316411:27518,15316412:27681,15316414:27682,15316611:27683,15316612:27684,15316614:27685,15316618:27686,15316621:27687,15316622:27688,15316626:27689,15316627:27690,15316629:27691,15316630:27692,15316631:27693,15316632:27694,15316641:27695,15316650:27696,15316652:27697,15316654:27698,15316657:27699,15316661:27700,15316665:27701,15316668:27702,15316671:27703,15316867:27704,15316871:27705,15316873:27706,15316874:27707,15316884:27708,15316885:27709,15316886:27710,15316887:27711,15316890:27712,15316894:27713,15316895:27714,15316896:27715,15316901:27716,15316903:27717,15316905:27718,15316907:27719,15316910:27720,15316912:27721,15316915:27722,15316916:27723,15316926:27724,15317130:27725,15317122:27726,15317127:27727,15317134:27728,15317136:27729,15317137:27730,15317138:27731,15317141:27732,15317142:27733,15317145:27734,15317148:27735,15317149:27736,15317434:27737,15317435:27738,15317436:27739,15317632:27740,15317634:27741,15317635:27742,15317636:27743,15317637:27744,15317639:27745,15317646:27746,15317647:27747,15317654:27748,15317656:27749,15317659:27750,15317662:27751,15317668:27752,15317672:27753,15317676:27754,15317678:27755,15317679:27756,15317680:27757,15317683:27758,15317684:27759,15317685:27760,15317894:27761,15317896:27762,15317899:27763,15317909:27764,15317919:27765,15317924:27766,15317927:27767,15317932:27768,15317933:27769,15317934:27770,15317936:27771,15317937:27772,15317938:27773,15317941:27774,15317944:27937,15317951:27938,15318146:27939,15318147:27940,15318153:27941,15318159:27942,15318160:27943,15318161:27944,15318162:27945,15318164:27946,15318166:27947,15318167:27948,15318169:27949,15318170:27950,15318171:27951,15318175:27952,15318178:27953,15318182:27954,15318186:27955,15318187:27956,15318191:27957,15318193:27958,15318194:27959,15318196:27960,15318199:27961,15318201:27962,15318202:27963,15318204:27964,15318205:27965,15318207:27966,15318401:27967,15318403:27968,15318404:27969,15318405:27970,15318406:27971,15318407:27972,15318419:27973,15318421:27974,15318422:27975,15318423:27976,15318424:27977,15318426:27978,15318429:27979,15318430:27980,15318440:27981,15318441:27982,15318445:27983,15318446:27984,15318447:27985,15318448:27986,15318449:27987,15318451:27988,15318453:27989,15318458:27990,15318461:27991,15318671:27992,15318672:27993,15318673:27994,15318674:27995,15318676:27996,15318678:27997,15318679:27998,15318686:27999,15318689:28e3,15318690:28001,15318691:28002,15318693:28003,14909596:8513}},{}],12:[function(n,e,t){var h=n("./config"),i=String.fromCharCode,r=Array.prototype.slice,o=Object.prototype.toString,a=Object.prototype.hasOwnProperty,l=Array.isArray,f=Object.keys;function u(n){return l?l(n):"[object Array]"===o.call(n)}function c(n){if(f)return f(n);var e,t=[];for(e in n)a.call(n,e)&&(t[t.length]=e);return t}function g(n,e){if(h.HAS_TYPED)switch(n){case 8:return new Uint8Array(e);case 16:return new Uint16Array(e)}return new Array(e)}function T(n){if(h.CAN_CHARCODE_APPLY&&h.CAN_CHARCODE_APPLY_TYPED){var e=n&&n.length;if(e<h.APPLY_BUFFER_SIZE&&h.APPLY_BUFFER_SIZE_OK)return i.apply(null,n);if(null===h.APPLY_BUFFER_SIZE_OK)try{var t=i.apply(null,n);return e>h.APPLY_BUFFER_SIZE&&(h.APPLY_BUFFER_SIZE_OK=!0),t}catch(n){h.APPLY_BUFFER_SIZE_OK=!1}}return s(n)}function s(n){for(var e,t="",r=n&&n.length,o=0;o<r;){if(e=n.subarray?n.subarray(o,o+h.APPLY_BUFFER_SIZE):n.slice(o,o+h.APPLY_BUFFER_SIZE),o+=h.APPLY_BUFFER_SIZE,!h.APPLY_BUFFER_SIZE_OK){if(null===h.APPLY_BUFFER_SIZE_OK)try{t+=i.apply(null,e),e.length>h.APPLY_BUFFER_SIZE&&(h.APPLY_BUFFER_SIZE_OK=!0);continue}catch(n){h.APPLY_BUFFER_SIZE_OK=!1}return A(n)}t+=i.apply(null,e)}return t}function A(n){for(var e="",t=n&&n.length,r=0;r<t;r++)e+=i(n[r]);return e}t.isObject=function(n){var e=typeof n;return"function"==e||"object"==e&&!!n},t.isArray=u,t.isString=function(n){return"string"==typeof n||"[object String]"===o.call(n)},t.objectKeys=c,t.createBuffer=g,t.stringToBuffer=function(n){for(var e=n.length,t=g(16,e),r=0;r<e;r++)t[r]=n.charCodeAt(r);return t},t.codeToString_fast=T,t.codeToString_chunked=s,t.codeToString_slow=A,t.stringToCode=function(n){for(var e=[],t=n&&n.length,r=0;r<t;r++)e[r]=n.charCodeAt(r);return e},t.codeToBuffer=function(n){if(h.HAS_TYPED)return new Uint16Array(n);if(u(n))return n;for(var e=n&&n.length,t=[],r=0;r<e;r++)t[r]=n[r];return t},t.bufferToCode=function(n){return u(n)?n:r.call(n)},t.canonicalizeEncodingName=function(n){for(var e,t,r,o="",i=(""+n).toUpperCase().replace(/[^A-Z0-9]+/g,""),l=c(h.EncodingAliases),f=l.length,u=0,g=0;g<f;g++){if((e=l[g])===i){o=e;break}for(t=e.length,r=u;r<t;r++)e.slice(0,r)!==i.slice(0,r)&&e.slice(-r)!==i.slice(-r)||(o=e,u=r)}return a.call(h.EncodingAliases,o)?h.EncodingAliases[o]:o};var E=[65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,54,55,56,57,43,47],_=[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,63,52,53,54,55,56,57,58,59,60,61,-1,-1,-1,-1,-1,-1,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,-1,-1,-1,-1,-1,-1,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,-1,-1,-1,-1,-1],U="=".charCodeAt(0);t.base64encode=function(n){for(var e,t,r,o=n&&n.length,i=0,l=[];i<o;){if(e=n[i++],i==o){l[l.length]=E[e>>2],l[l.length]=E[(3&e)<<4],l[l.length]=U,l[l.length]=U;break}if(t=n[i++],i==o){l[l.length]=E[e>>2],l[l.length]=E[(3&e)<<4|(240&t)>>4],l[l.length]=E[(15&t)<<2],l[l.length]=U;break}r=n[i++],l[l.length]=E[e>>2],l[l.length]=E[(3&e)<<4|(240&t)>>4],l[l.length]=E[(15&t)<<2|(192&r)>>6],l[l.length]=E[63&r]}return T(l)},t.base64decode=function(n){for(var e,t,r,o,i=n&&n.length,l=0,f=[];l<i;){for(;e=_[255&n.charCodeAt(l++)],l<i&&-1==e;);if(-1==e)break;for(;t=_[255&n.charCodeAt(l++)],l<i&&-1==t;);if(-1==t)break;f[f.length]=e<<2|(48&t)>>4;do{if(61==(r=255&n.charCodeAt(l++)))return f}while(r=_[r],l<i&&-1==r);if(-1==r)break;f[f.length]=(15&t)<<4|(60&r)>>2;do{if(61==(o=255&n.charCodeAt(l++)))return f}while(o=_[o],l<i&&-1==o);if(-1==o)break;f[f.length]=(3&r)<<6|o}return f}},{"./config":2}]},{},[6])(6)});

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\inout_details_table.js -----
// C:\Dev\WASABI\static\js\inout_details_table.js

import { showModal } from './inout_modal.js';
import { transactionTypeMap, createUploadTableHTML } from './common_table.js';

let tableBody, addRowBtn, tableContainer;
// ▼▼▼ [修正点] 「個数」をINPUTから表示用のセルに変更 ▼▼▼
function createInoutRowsHTML(record = {}) {
    const rowId = record.lineNumber || `new-${Date.now()}`;
    const janQuantity = record.janQuantity ?? 1;
    const datQuantity = record.datQuantity ?? 1;
    // Default value, will be recalculated
    const nhiPrice = record.nhiPrice || 0;
    const janPackInnerQty = record.janPackInnerQty ||
    0;
    const yjQuantity = janQuantity * janPackInnerQty;
    const subtotal = yjQuantity * nhiPrice;
    const transactionType = record.flag ?
    (transactionTypeMap[record.flag] || '') : '';

    const upperRow = `
        <tr data-row-id="${rowId}">
            <td rowspan="2" class="center"><button class="delete-row-btn btn">削除</button></td>
            <td>${record.transactionDate ||
            ''}</td>
            <td class="yj-jan-code display-yj-code">${record.yjCode ||
            ''}</td>
            <td colspan="2" class="product-name-cell left" style="cursor: pointer; text-decoration: underline; color: blue;">${record.productName ||
            'ここをクリックして製品を検索'}</td>
            <td class="right display-dat-quantity">${datQuantity.toFixed(2)}</td>
            <td class="right display-yj-quantity">${yjQuantity.toFixed(2)}</td>
            <td class="right display-yj-pack-unit-qty">${record.yjPackUnitQty ||
            ''}</td>
            <td class="display-yj-unit-name">${record.yjUnitName ||
            ''}</td>
            <td class="right display-unit-price">${nhiPrice.toFixed(4)}</td>
            <td class="right">${record.taxAmount ||
            ''}</td>
            <td><input type="text" name="expiryDate" value="${record.expiryDate || ''}" placeholder="YYYYMM"></td>
            <td class="left">${record.clientCode ||
            ''}</td>
            <td class="right">${record.lineNumber ||
            ''}</td>
        </tr>`;

    const lowerRow = `
        <tr data-row-id-lower="${rowId}">
            <td>${transactionType}</td>
            <td class="yj-jan-code display-jan-code">${record.productCode ||
            record.janCode || ''}</td>
            <td class="left display-package-spec">${record.formattedPackageSpec || record.packageSpec ||
            ''}</td>
            <td class="left display-maker-name">${record.makerName ||
            ''}</td>
            <td class="left display-usage-classification">${record.usageClassification ||
            ''}</td>
            <td class="right"><input type="number" name="janQuantity" value="${janQuantity}" step="any"></td>
            <td class="right display-jan-pack-unit-qty">${record.janPackUnitQty ||
            ''}</td>
            <td class="display-jan-unit-name">${record.janUnitName ||
            ''}</td>
            <td class="right display-subtotal">${subtotal.toFixed(2)}</td>
            <td class="right">${record.taxRate != null ?
            (record.taxRate * 100).toFixed(0) + "%" : ""}</td>
            <td class="left"><input type="text" name="lotNumber" value="${record.lotNumber || ''}"></td>
            <td class="left">${record.receiptNumber ||
            ''}</td>
            <td class="left">${record.processFlagMA ||
            ''}</td>
        </tr>`;

    return upperRow + lowerRow;
}

export function populateDetailsTable(records) {
    if (!records || records.length === 0) {
        clearDetailsTable();
        return;
    }
    tableBody.innerHTML = records.map(createInoutRowsHTML).join('');
    
    tableBody.querySelectorAll('tr[data-row-id]').forEach((row, index) => {
        if (records[index]) {
            const masterData = { ...records[index] };
            delete masterData.id;
            delete masterData.runningBalance;
            row.dataset.product = JSON.stringify(masterData);
            recalculateRow(row); // Recalculate to set the initial datQuantity correctly
  
        }
    });
}

export function clearDetailsTable() {
    if (tableBody) {
        tableBody.innerHTML = `<tr><td colspan="14">ヘッダーで情報を選択後、「明細を追加」ボタンを押してください。</td></tr>`;
    }
}

/**
 * @brief 保存する全ての明細データをテーブルから収集します。
 * @details
 * 画面に表示されている全ての行（既存・新規問わず）を走査し、
 * 製品データが設定されている有効な行のみを抽出して配列にまとめます。
 * これにより、追記保存時に既存のデータが欠落することを防ぎます。
 * デバッグ用に、どの行が処理されたかをコンソールに出力します。
 * @returns {Array} 保存用の明細レコードの配列
 */
export function getDetailsData() {
    console.log("Collecting details data for saving...");
    const records = [];
    const allUpperRows = tableBody.querySelectorAll('tr[data-row-id]');
    console.log(`Found ${allUpperRows.length} item rows in the table.`);
    allUpperRows.forEach((upperRow, index) => {
        const productDataString = upperRow.dataset.product;

        // 製品情報が設定されていない行（空の行など）は保存対象外とします
        if (!productDataString || productDataString === '{}') {
            console.log(`Row ${index + 1} skipped: No product data found.`);
            return; // continue
        }

        const lowerRow = upperRow.nextElementSibling;
        if (!lowerRow) 
        {
            console.error(`Row ${index + 1} is missing its corresponding lower row.`);
            return; // continue
        }

        const productData = JSON.parse(productDataString);
        const janQuantity = parseFloat(lowerRow.querySelector('input[name="janQuantity"]').value) || 0;
        let datQuantity = 0;
        if (productData.janPackUnitQty > 0) {
  
           
           datQuantity = janQuantity / productData.janPackUnitQty;
        }

        const record = {
            productCode: productData.janCode,
            productName: productData.productName,
            janQuantity: janQuantity,
            datQuantity: datQuantity,
      
            expiryDate: upperRow.querySelector('input[name="expiryDate"]').value,
          
           lotNumber: lowerRow.querySelector('input[name="lotNumber"]').value,
        };
        console.log(`Row ${index + 1} processed:`, record);
        records.push(record);
    });
    console.log(`Total records to be saved: ${records.length}`, records);
    return records;
}
function recalculateRow(upperRow) {
    const productDataString = upperRow.dataset.product;
    if (!productDataString) return;
    const product = JSON.parse(productDataString);
    const lowerRow = upperRow.nextElementSibling;
    if (!lowerRow) return;
    
    const janQuantity = parseFloat(lowerRow.querySelector('[name="janQuantity"]').value) || 0;
    const nhiPrice = parseFloat(product.nhiPrice) || 0;
    const janPackInnerQty = parseFloat(product.janPackInnerQty) || 0;
    const janPackUnitQty = parseFloat(product.janPackUnitQty) || 0;

    let datQuantity = 0;
    if(janPackUnitQty > 0) {
        datQuantity = janQuantity / janPackUnitQty;
    }
    const yjQuantity = janQuantity * janPackInnerQty;
    const subtotal = yjQuantity * nhiPrice;

    upperRow.querySelector('.display-dat-quantity').textContent = datQuantity.toFixed(2);
    upperRow.querySelector('.display-yj-quantity').textContent = yjQuantity.toFixed(2);
    lowerRow.querySelector('.display-subtotal').textContent = subtotal.toFixed(2);
}
// ▲▲▲ 修正ここまで ▲▲▲

export function initDetailsTable() {
    tableContainer = document.getElementById('inout-details-container');
    addRowBtn = document.getElementById('addRowBtn');
    if (!tableContainer || !addRowBtn) return;
    
    tableContainer.innerHTML = createUploadTableHTML('inout-details-table');
    tableBody = document.querySelector('#inout-details-table tbody');
    addRowBtn.addEventListener('click', () => {
        if (tableBody.querySelector('td[colspan="14"]')) {
            tableBody.innerHTML = '';
        }
        tableBody.insertAdjacentHTML('beforeend', createInoutRowsHTML());
    });
    tableBody.addEventListener('click', (e) => {
        if (e.target.classList.contains('delete-row-btn')) {
            const upperRow = e.target.closest('tr');
            const lowerRow = upperRow.nextElementSibling;
            if(lowerRow) lowerRow.remove();
            upperRow.remove();
            if (tableBody.children.length === 0) {
                
                clearDetailsTable();
            }
        }
        if (e.target.classList.contains('product-name-cell')) {
            const activeRow = e.target.closest('tr');
            showModal(activeRow, (selectedProduct, targetRow) => {
                // ▼▼▼【ここからが修正箇所です】▼▼▼
                // 選択された製品データ(productCodeを持つ)を、
                // 既存の取引データ(janCodeを持つ)と構造を合わせるために正規化します。
                const productToStore = { ...selectedProduct };
                productToStore.janCode = productToStore.productCode; // janCodeプロパティを追加

                // 正規化したオブジェクトをデータとして保存します。
                targetRow.dataset.product = JSON.stringify(productToStore);
                // ▲▲▲【修正ここまで】▲▲▲
         
                const lowerRow = targetRow.nextElementSibling;
                
                targetRow.querySelector('.display-yj-code').textContent = selectedProduct.yjCode;
                targetRow.querySelector('.product-name-cell').textContent = selectedProduct.productName;
                targetRow.querySelector('.display-yj-pack-unit-qty').textContent = selectedProduct.yjPackUnitQty || '';
                targetRow.querySelector('.display-yj-unit-name').textContent = selectedProduct.yjUnitName || '';
                targetRow.querySelector('.display-unit-price').textContent = (selectedProduct.nhiPrice || 0).toFixed(4);
                
                lowerRow.querySelector('.display-jan-code').textContent = selectedProduct.productCode;
                lowerRow.querySelector('.display-package-spec').textContent = selectedProduct.formattedPackageSpec || '';
                lowerRow.querySelector('.display-maker-name').textContent = selectedProduct.makerName;
                lowerRow.querySelector('.display-usage-classification').textContent = selectedProduct.usageClassification || '';
                lowerRow.querySelector('.display-jan-pack-unit-qty').textContent = selectedProduct.janPackUnitQty || '';
                lowerRow.querySelector('.display-jan-unit-name').textContent = selectedProduct.janUnitName || '';
                
                const quantityInput = lowerRow.querySelector('input[name="janQuantity"]');
                quantityInput.focus();
                quantityInput.select();
                recalculateRow(targetRow);
            });
        }
    });
    tableBody.addEventListener('input', (e) => {
        const upperRow = e.target.closest('tr[data-row-id]') || e.target.closest('tr[data-row-id-lower]')?.previousElementSibling;
        if(upperRow) {
            recalculateRow(upperRow);
        }
    });
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\inout_header.js -----
// C:\Dev\WASABI\static\js\inout_header.js

import { setupDateDropdown, setupClientDropdown } from './common_table.js';
// ▼▼▼ [修正点] refreshClientMap をインポート ▼▼▼
import { refreshClientMap } from './master_data.js';
// ▲▲▲ 修正ここまで ▲▲▲

const NEW_ENTRY_VALUE = '--new--';
let clientSelect, receiptSelect, saveBtn, deleteBtn, headerDateInput, headerTypeSelect;
let newClientName = null;
let currentLoadedReceipt = null;

// (initializeClientDropdown, resetHeader 関数は変更ありません)
async function initializeClientDropdown() {
	clientSelect.innerHTML = `<option value="">選択してください</option>`;
	await setupClientDropdown(clientSelect);
	
	const newOption = document.createElement('option');
	newOption.value = NEW_ENTRY_VALUE;
	newOption.textContent = '--- 新規作成 ---';
	clientSelect.appendChild(newOption);
}

export function resetHeader() {
	if (!clientSelect || !headerDateInput) return;
	setupDateDropdown(headerDateInput);
	initializeClientDropdown();
	
	receiptSelect.innerHTML = `
		<option value="">日付を選択してください</option>
		<option value="${NEW_ENTRY_VALUE}">--- 新規作成 ---</option>
	`;
	headerTypeSelect.value = "入庫";
	newClientName = null;
	currentLoadedReceipt = null;
	deleteBtn.disabled = true;
	headerDateInput.dispatchEvent(new Event('change'));
}

export async function initHeader(getDetailsData, clearDetailsTable, populateDetailsTable) {
	clientSelect = document.getElementById('in-out-client');
	receiptSelect = document.getElementById('in-out-receipt');
	saveBtn = document.getElementById('saveBtn');
	deleteBtn = document.getElementById('deleteBtn');
	headerDateInput = document.getElementById('in-out-date');
	headerTypeSelect = document.getElementById('in-out-type');

	if (!clientSelect || !receiptSelect || !saveBtn || !deleteBtn) return;
	
    // (各種イベントリスナーは変更ありません)
	headerDateInput.addEventListener('change', async () => {
		const date = headerDateInput.value.replace(/-/g, '');
		if (!date) return;
		try {
			const res = await fetch(`/api/receipts?date=${date}`);
			if (!res.ok) throw new Error('伝票の取得に失敗');
			const receiptNumbers = await res.json();
			
			receiptSelect.innerHTML = `
				<option value="">選択してください</option>
				<option value="${NEW_ENTRY_VALUE}">--- 新規作成 ---</option>
			`;
			if (receiptNumbers && receiptNumbers.length > 0) {
				receiptNumbers.forEach(num => {
					const opt = document.createElement('option');
					opt.value = num;
					opt.textContent = num;
					receiptSelect.appendChild(opt);
				});
			}
		} catch (err) { console.error(err); }
	});

	clientSelect.addEventListener('change', () => {
		const selectedValue = clientSelect.value;
		if (selectedValue === NEW_ENTRY_VALUE) {
			const name = prompt('新しい得意先名を入力してください:');
			if (name && name.trim()) {
				newClientName = name.trim();
				const opt = document.createElement('option');
				opt.value = `new:${newClientName}`;
				opt.textContent = `[新規] ${newClientName}`;
				opt.selected = true;
				clientSelect.appendChild(opt);
			} else {
				clientSelect.value = '';
			}
		} else if (!selectedValue.startsWith('new:')) {
			newClientName = null;
		}
	});
	receiptSelect.addEventListener('change', async () => {
		const selectedValue = receiptSelect.value;
		deleteBtn.disabled = (selectedValue === NEW_ENTRY_VALUE || selectedValue === "");

		if (selectedValue === NEW_ENTRY_VALUE || selectedValue === "") {
			clearDetailsTable();
			currentLoadedReceipt = null;
		} else {
			window.showLoading();
			try {
				const res = await fetch(`/api/transaction/${selectedValue}`);
				if (!res.ok) throw new Error('明細の読込に失敗');
				const records = await res.json();
				if (records && records.length > 0) {
					currentLoadedReceipt = selectedValue;
					clientSelect.value = records[0].clientCode;
					headerTypeSelect.value = records[0].flag === 11 ? "入庫" : "出庫";
					newClientName = null;
				}
				populateDetailsTable(records);
			} catch (err) {
				console.error(err);
				window.showNotification(err.message, 'error');
			} finally {
				window.hideLoading();
			}
		}
	});

	saveBtn.addEventListener('click', async () => {
		let clientCode = clientSelect.value;
		let clientNameToSave = '';
		let isNewClient = false;
		if (newClientName && clientCode.startsWith('new:')) {
			clientNameToSave = newClientName;
			isNewClient = true;
			clientCode = '';
		} else {
			if (!clientCode || clientCode === NEW_ENTRY_VALUE) {
				window.showNotification('得意先を選択または新規作成してください。', 'error');
				return;
			}
		}
		const records = getDetailsData();
		if (records.length === 0) {
			window.showNotification('保存する明細データがありません。', 'error');
			return;
		}
		const payload = {
			isNewClient, clientCode, clientName: clientNameToSave,
			transactionDate: headerDateInput.value.replace(/-/g, ''),
			transactionType: headerTypeSelect.value,
			records: records,
			originalReceiptNumber: currentLoadedReceipt
		};
		window.showLoading();
		try {
			const res = await fetch('/api/inout/save', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify(payload),
			});
			const resData = await res.json();
			if (!res.ok) {
				throw new Error(resData.message || `保存に失敗しました (HTTP ${res.status})`);
			}

			// ▼▼▼ [修正点] 新規得意先が作成された場合、変換マップを更新する ▼▼▼
			if (resData.newClient) {
				await refreshClientMap();
			}
			// ▲▲▲ 修正ここまで ▲▲▲

			window.showNotification(`データを保存しました。\n伝票番号: ${resData.receiptNumber}`, 'success');
			resetHeader();
			clearDetailsTable();
		} catch (err) {
			console.error(err);
			window.showNotification(err.message, 'error');
		} finally {
			window.hideLoading();
		}
	});

	deleteBtn.addEventListener('click', async () => {
		const receiptNumber = receiptSelect.value;
		if (!receiptNumber || receiptNumber === NEW_ENTRY_VALUE) {
			window.showNotification("削除対象の伝票が選択されていません。", 'error');
			return;
		}
		if (!confirm(`伝票番号 [${receiptNumber}] を完全に削除します。よろしいですか？`)) {
			return;
		}
		window.showLoading();
		try {
			const res = await fetch(`/api/transaction/delete/${receiptNumber}`, { method: 'DELETE' });
			const errData = await res.json().catch(() => null);
			if (!res.ok) {
				throw new Error(errData?.message || '削除に失敗しました。');
			}
			window.showNotification(`伝票 [${receiptNumber}] を削除しました。`, 'success');
			resetHeader();
			clearDetailsTable();
		} catch(err) {
			console.error(err);
			window.showNotification(err.message, 'error');
		} finally {
			window.hideLoading();
		}
	});
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\inout_modal.js -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\inout_modal.js

import { hiraganaToKatakana } from './utils.js';

let activeCallback = null;
let activeRowElement = null;
let skipQueryLengthCheck = false; 

const DEFAULT_SEARCH_API = '/api/products/search';
const modal = document.getElementById('search-modal');
const closeModalBtn = document.getElementById('closeModalBtn');
const searchInput = document.getElementById('product-search-input');
const searchBtn = document.getElementById('product-search-btn');
const searchResultsBody = document.querySelector('#search-results-table tbody');

function hideModal() {
  if (modal) {
        modal.classList.add('hidden');
        document.body.classList.remove('modal-open');
    }
}

function handleResultClick(event) {
  if (event.target && event.target.classList.contains('select-product-btn')) {
    const product = JSON.parse(event.target.dataset.product);
    if (typeof activeCallback === 'function') {
      activeCallback(product, activeRowElement);
    }
    hideModal();
  }
}

async function performSearch() {
  const query = hiraganaToKatakana(searchInput.value.trim());
  
  if (!skipQueryLengthCheck && query.length < 2) {
    alert('検索キーワードを2文字以上入力してください。');
    searchResultsBody.innerHTML = '<tr><td colspan="6" class="center">2文字以上入力して検索してください。</td></tr>';
    return;
  }
  
  const searchApi = modal.dataset.searchApi || DEFAULT_SEARCH_API;
  searchResultsBody.innerHTML = '<tr><td colspan="6" class="center">検索中...</td></tr>';

  try {
    const separator = searchApi.includes('?') ? '&' : '?';
    const fullUrl = `${searchApi}${separator}q=${encodeURIComponent(query)}`;
    const res = await fetch(fullUrl);

    if (!res.ok) {
        throw new Error(`サーバーエラー: ${res.status}`);
    }
    const products = await res.json();
    renderSearchResults(products);
  } catch (err) {
    searchResultsBody.innerHTML = `<tr><td colspan="6" class="center" style="color:red;">${err.message}</td></tr>`;
  }
}

function renderSearchResults(products) {
  if (!products || products.length === 0) {
    searchResultsBody.innerHTML = '<tr><td colspan="6" class="center">該当する製品が見つかりません。</td></tr>';
    return;
  }

  let html = '';
  products.forEach(p => {
    const productData = JSON.stringify(p);
    html += `
      <tr>
        <td class="left">${p.productName || ''}</td>
        <td class="left">${p.makerName || ''}</td>
        <td class="left">${p.formattedPackageSpec}</td>
        <td>${p.yjCode || ''}</td>
        <td>${p.productCode || ''}</td>
        <td><button class="select-product-btn" data-product='${productData.replace(/'/g, "&apos;")}'>選択</button></td>
      </tr>
    `;
  });
  searchResultsBody.innerHTML = html;
}

export function initModal() {
  if (!modal || !closeModalBtn || !searchInput || !searchBtn || !searchResultsBody) {
    console.error("薬品検索モーダルの必須要素が見つかりません。");
    return;
  }
  closeModalBtn.addEventListener('click', hideModal);
  searchBtn.addEventListener('click', () => performSearch());
  searchInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      performSearch();
    }
  });
  searchResultsBody.addEventListener('click', handleResultClick);
}

export function showModal(rowElement, callback, options = {}) {
  if (modal) {
    document.body.classList.add('modal-open');
    activeRowElement = rowElement;
    activeCallback = callback; 
    
    skipQueryLengthCheck = options.skipQueryLengthCheck || false;
    searchInput.placeholder = skipQueryLengthCheck ? '製品名またはカナ名（絞り込みフィルタ有効）' : '製品名またはカナ名（2文字以上）';
    
    const searchApi = options.searchApi || DEFAULT_SEARCH_API;
    modal.dataset.searchApi = searchApi;
    
    modal.classList.remove('hidden');
    searchInput.value = '';
    setTimeout(() => {
        searchInput.focus();
    }, 0);

    if (options.initialResults) {
        renderSearchResults(options.initialResults);
    } else {
        searchResultsBody.innerHTML = '<tr><td colspan="6" class="center">製品名を入力して検索してください。</td></tr>';
    }
  }
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\inout.js -----
import { initHeader, resetHeader } from './inout_header.js';
import { initDetailsTable, getDetailsData, clearDetailsTable, populateDetailsTable } from './inout_details_table.js';

export async function initInOut() {
  initDetailsTable();
  await initHeader(getDetailsData, clearDetailsTable, populateDetailsTable);
}

export function resetInOutView() {
    clearDetailsTable();
    resetHeader();
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\inventory_adjustment.js -----
// C:/Users/wasab/OneDrive/デスクトップ/WASABI/static/js/inventory_adjustment.js
import { showModal } from './inout_modal.js';
import { transactionTypeMap } from './common_table.js';
import { wholesalerMap } from './master_data.js';
import { hiraganaToKatakana, getLocalDateString, toHalfWidth } from './utils.js';


let view, outputContainer;
let dosageFormFilter, kanaInitialFilter, selectProductBtn, deadStockOnlyFilter, barcodeInput, shelfNumberInput;
let currentYjCode = null;
let lastLoadedDataCache = null;
let unitMap = {};
async function fetchUnitMap() {
    if (Object.keys(unitMap).length > 0) return;
    try {
        const res = await fetch('/api/units/map');
        if (!res.ok) throw new Error('単位マスタの取得に失敗');
        unitMap = await res.json();
    } catch (err) {
        console.error(err);
        window.showNotification(err.message, 'error');
    }
}

function renderStandardTable(id, records, addCheckbox = false, customBody = null) {
    const header = `<thead>
        <tr><th rowspan="2">－</th><th>日付</th><th>YJ</th><th colspan="2">製品名</th><th>個数</th><th>YJ数量</th><th>YJ包装数</th><th>YJ単位</th><th>単価</th><th>税額</th><th>期限</th><th>得意先</th><th>行</th></tr>
        <tr><th>種別</th><th>JAN</th><th>包装</th><th>メーカー</th><th>剤型</th><th>JAN数量</th><th>JAN包装数</th><th>JAN単位</th><th>金額</th><th>税率</th><th>ロット</th><th>伝票番号</th><th>MA</th></tr></thead>`;
    let bodyHtml = customBody ? customBody : `<tbody>${(!records || records.length === 0) ?
 '<tr><td colspan="14">対象データがありません。</td></tr>' : records.map(rec => {
        let clientDisplayHtml = '';
        if (rec.flag === 1 || rec.flag === 2) {
            clientDisplayHtml = wholesalerMap.get(rec.clientCode) || rec.clientCode || '';
        } else {
            clientDisplayHtml = rec.clientCode || '';
        }

        const top = `<tr><td rowspan="2">${addCheckbox ? `<input type="checkbox" class="precomp-active-check" data-quantity="${rec.yjQuantity}" data-product-code="${rec.janCode}">` : ''}</td>
            <td>${rec.transactionDate || ''}</td><td class="yj-jan-code">${rec.yjCode || ''}</td><td class="left" colspan="2">${rec.productName || ''}</td>
            <td class="right">${rec.datQuantity?.toFixed(2) || ''}</td><td class="right">${rec.yjQuantity?.toFixed(2) || ''}</td><td class="right">${rec.yjPackUnitQty || ''}</td><td>${rec.yjUnitName || ''}</td>
            <td class="right">${rec.unitPrice?.toFixed(4) || ''}</td><td class="right">${rec.taxAmount?.toFixed(2) || ''}</td><td>${rec.expiryDate || ''}</td><td class="left">${clientDisplayHtml}</td><td class="right">${rec.lineNumber || ''}</td></tr>`;
        const bottom = `<tr><td>${transactionTypeMap[rec.flag] || rec.flag}</td><td class="yj-jan-code">${rec.janCode || ''}</td><td>${rec.packageSpec || ''}</td><td>${rec.makerName || ''}</td>
            <td>${rec.usageClassification || ''}</td><td class="right">${rec.janQuantity?.toFixed(2) || ''}</td><td class="right">${rec.janPackUnitQty || ''}</td><td>${rec.janUnitName || ''}</td>
            <td class="right">${rec.subtotal?.toFixed(2) || ''}</td><td class="right">${rec.taxRate != null ? (rec.taxRate * 100).toFixed(0) + "%" : ""}</td><td>${rec.lotNumber || ''}</td><td class="left">${rec.receiptNumber || ''}</td><td class="left">${rec.processFlagMA || ''}</td></tr>`;
    return top + bottom;
    }).join('')}</tbody>`;
    return `<table class="data-table" id="${id}">${header}${bodyHtml}</table>`;
}

function generateSummaryLedgerHtml(yjGroup, yesterdaysTotal) {
    const endDate = getLocalDateString();
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - 30);
    const startDateStr = startDate.toISOString().slice(0, 10);

    let packageLedgerHtml = (yjGroup.packageLedgers || []).map(pkg => {
        const sortedTxs = (pkg.transactions || []).sort((a, b) => 
            (a.transactionDate + a.id).toString().localeCompare(b.transactionDate + b.id)
        );
        const pkgHeader = `
            <div class="agg-pkg-header" style="margin-top: 10px;">
                <span>包装: ${pkg.packageKey}</span>
                <span class="balance-info">
                    本日理論在庫(包装計): ${(pkg.endingBalance || 0).toFixed(2)} ${yjGroup.yjUnitName}
                </span>
            </div>
        `;
        const txTable = renderStandardTable(`ledger-table-${pkg.packageKey.replace(/[^a-zA-Z0-9]/g, '')}`, sortedTxs);
        return pkgHeader + txTable;
    }).join('');

    return `<div class="summary-section">
        <h3 class="view-subtitle">1. 全体サマリー</h3>
        <div class="report-section-header">
            <h4>在庫元帳 (期間: ${startDateStr} ～ ${endDate})</h4>
            <span class="header-total">【参考】前日理論在庫合計: ${yesterdaysTotal.toFixed(2)} ${yjGroup.yjUnitName}</span>
        </div>
        ${packageLedgerHtml}
    </div>`;
}

function generateSummaryPrecompHtml(precompDetails) {
    const precompTransactions = (precompDetails || []).map(p => ({
        transactionDate: (p.transactionDate || '').slice(0, 8),
        flag: '予製',
        clientCode: p.clientCode ? `患者: ${p.clientCode}` : '',
        receiptNumber: p.receiptNumber,
        yjQuantity: p.yjQuantity,
        yjUnitName: p.yjUnitName,
        janCode: p.janCode,
        productName: p.productName,
        yjCode: p.yjCode,
        packageSpec: p.packageSpec,
        makerName: p.makerName,
        usageClassification: p.usageClassification,
        janQuantity: p.janQuantity,
        janPackUnitQty: p.janPackUnitQty,
        janUnitName: p.janUnitName
    }));
    return `<div class="summary-section" style="margin-top: 15px;">
        <div class="report-section-header"><h4>予製払出明細 (全体)</h4>
        <span class="header-total" id="precomp-active-total">有効合計: 0.00</span></div>
        ${renderStandardTable('precomp-table', precompTransactions, true)}</div>`;
}

function createFinalInputRow(master, deadStockRecord = null, isPrimary = false) {
    const actionButtons = isPrimary ?
`
        <button class="btn add-deadstock-row-btn" data-product-code="${master.productCode}">＋</button>
        <button class="btn register-inventory-btn">登録</button>
    ` : `<button class="btn delete-deadstock-row-btn">－</button>`;

    const quantityInputClass = isPrimary ? 'final-inventory-input' : 'lot-quantity-input';
    const quantityPlaceholder = isPrimary ? '目安をここに転記' : 'ロット数量';
    const quantity = deadStockRecord ? deadStockRecord.stockQuantityJan : '';
    const expiry = deadStockRecord ? deadStockRecord.expiryDate : '';
    const lot = deadStockRecord ? deadStockRecord.lotNumber : '';
    const topRow = `<tr class="inventory-row"><td rowspan="2"><div style="display: flex; flex-direction: column; gap: 4px;">${actionButtons}</div></td>
        <td>(棚卸日)</td><td class="yj-jan-code">${master.yjCode}</td><td class="left" colspan="2">${master.productName}</td>
        <td></td><td></td><td class="right">${master.yjPackUnitQty || ''}</td><td>${master.yjUnitName || ''}</td>
        <td></td><td></td><td><input type="text" class="expiry-input" placeholder="YYYYMM" value="${expiry}"></td><td></td><td></td></tr>`;
    const bottomRow = `<tr class="inventory-row"><td>棚卸</td><td class="yj-jan-code">${master.productCode}</td>
        <td>${master.formattedPackageSpec || ''}</td><td>${master.makerName || ''}</td><td>${master.usageClassification || ''}</td>
        <td><input type="number" class="${quantityInputClass}" data-product-code="${master.productCode}" placeholder="${quantityPlaceholder}" value="${quantity}"></td>
        <td class="right">${master.janPackUnitQty || ''}</td><td>${master.janUnitName || ''}</td>
        <td></td><td></td><td><input type="text" class="lot-input" placeholder="ロット番号" value="${lot}"></td><td></td><td></td></tr>`;
    return topRow + bottomRow;
}

function generateInputSectionsHtml(packageLedgers, yjUnitName = '単位') {
    const packageGroupsHtml = (packageLedgers || []).map(pkgLedger => {
        let html = `
        <div class="package-input-group" style="margin-bottom: 20px;">
            <div class="agg-pkg-header">
                <span>包装: ${pkgLedger.packageKey}</span>
            </div>`;
        html += (pkgLedger.masters || []).map(master => {
            if (!master) return '';
            
            const janUnitName = (master.janUnitCode === 0 || !unitMap[master.janUnitCode]) ? master.yjUnitName : (unitMap[master.janUnitCode] || master.yjUnitName);
            
            const userInputArea = `
            <div class="user-input-area" style="font-size: 14px; padding: 10px; background-color: #fffbdd;">
                    <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 8px;">
                        <label style="font-weight: bold; min-width: 250px;">① 本日の実在庫数量（予製除く）:</label>
                        <input type="number" class="physical-stock-input" data-product-code="${master.productCode}" step="any">
                        <span>(${janUnitName})</span>
                    </div>
                    <div style="display: flex; align-items: center; gap: 8px; font-weight: bold; color: #dc3545;">
                        <label style="min-width: 250px;">② 前日在庫(逆算値):</label>
                        <span class="calculated-previous-day-stock" data-product-code="${master.productCode}">0.00</span>
                        <span>(${janUnitName})</span>
                        <span style="font-size: 11px; color: #555; margin-left: 10px;">(この数値が棚卸データとして登録されます)</span>
                    </div>
                </div>`;
            
            const relevantDeadStock = (lastLoadedDataCache.deadStockDetails || []).filter(ds => ds.productCode === master.productCode);
            let finalInputTbodyHtml;
            if (relevantDeadStock.length > 0) {
                finalInputTbodyHtml = relevantDeadStock.map((rec, index) => createFinalInputRow(master, rec, index === 0)).join('');
            } else {
                finalInputTbodyHtml = createFinalInputRow(master, null, true);
            }
            const finalInputTable = renderStandardTable(`final-table-${master.productCode}`, [], false, 
                `<tbody class="final-input-tbody" data-product-code="${master.productCode}">${finalInputTbodyHtml}</tbody>`);
            
            return `<div class="product-input-group" style="padding-left: 20px; margin-top: 10px;">
                        ${userInputArea}
                        <div style="margin-top: 10px;">
                            <p style="font-size: 12px; font-weight: bold; margin-bottom: 4px;">ロット・期限を個別入力</p>
                            ${finalInputTable}
                        </div>
                    </div>`;
        }).join('');

        html += `</div>`;
        return html;
    }).join('');

    return `<div class="input-section" style="margin-top: 30px;"><h3 class="view-subtitle">2. 棚卸入力</h3>
        <div class="inventory-input-area" style="padding: 10px; border: 1px solid #ccc; background-color: #f8f9fa; margin-bottom: 15px;">
            <label for="inventory-date" style="font-weight: bold;">棚卸日:</label>
            <input type="date" id="inventory-date"></div>
        ${packageGroupsHtml}</div>`;
}

function generateDeadStockReferenceHtml(deadStockRecords) {
    if (!deadStockRecords || deadStockRecords.length === 0) {
        return '';
    }

    const getProductName = (productCode) => {
        const master = findMaster(productCode);
        return master ? master.productName : productCode;
    };

    const rowsHtml = deadStockRecords.map(rec => `
        <tr>
            <td class="left">${getProductName(rec.productCode)}</td>
            <td class="right">${rec.stockQuantityJan.toFixed(2)}</td>
            <td>${rec.expiryDate || ''}</td>
            <td class="left">${rec.lotNumber || ''}</td>
        </tr>
    `).join('');
    return `
        <div class="summary-section" style="margin-top: 30px;">
            <h3 class="view-subtitle">3. 参考：現在登録済みのロット・期限情報</h3>
            <p style="font-size: 11px; margin-bottom: 5px;">※このリストは参照用です。棚卸情報を保存するには、上の「2. 棚卸入力」の欄に改めて入力してください。</p>
            <table class="data-table">
                <thead>
                    <tr>
                        <th style="width: 40%;">製品名</th>
                        <th style="width: 15%;">在庫数量(JAN)</th>
                        <th style="width: 20%;">使用期限</th>
                        <th style="width: 25%;">ロット番号</th>
                    </tr>
                </thead>
                <tbody>
                    ${rowsHtml}
                </tbody>
            </table>
        </div>
    `;
}

function generateFullHtml(data) {
    if (!data.transactionLedger || data.transactionLedger.length === 0) {
        return '<p>対象の製品データが見つかりませんでした。</p>';
    }
    const yjGroup = data.transactionLedger[0];

    const productName = yjGroup.productName;

    const yesterdaysTotal = data.yesterdaysStock ? (data.yesterdaysStock.endingBalance || 0) : 0;
    const summaryLedgerHtml = generateSummaryLedgerHtml(yjGroup, yesterdaysTotal);
    const summaryPrecompHtml = generateSummaryPrecompHtml(data.precompDetails);
    
    const inputSectionsHtml = generateInputSectionsHtml(yjGroup.packageLedgers, yjGroup.yjUnitName);
    const deadStockReferenceHtml = generateDeadStockReferenceHtml(data.deadStockDetails);
    return `<h2 style="text-align: center; margin-bottom: 20px;">【棚卸調整】 ${productName} (YJ: ${yjGroup.yjCode})</h2>
        ${summaryLedgerHtml}
        ${summaryPrecompHtml}
        ${inputSectionsHtml}
        ${deadStockReferenceHtml}`;
}

export async function initInventoryAdjustment() {
    await fetchUnitMap();
    view = document.getElementById('inventory-adjustment-view');
    if (!view) return;

    dosageFormFilter = document.getElementById('ia-dosageForm');
    kanaInitialFilter = document.getElementById('ia-kanaInitial');
    selectProductBtn = document.getElementById('ia-select-product-btn');
    deadStockOnlyFilter = document.getElementById('ia-dead-stock-only');
    outputContainer = document.getElementById('inventory-adjustment-output');
    
    barcodeInput = document.getElementById('ia-barcode-input');
    const barcodeForm = document.getElementById('ia-barcode-form');
    shelfNumberInput = document.getElementById('ia-shelf-number');

    if (barcodeForm) {
        barcodeForm.addEventListener('submit', handleBarcodeScan);
    }

    selectProductBtn.addEventListener('click', onSelectProductClick);
    outputContainer.addEventListener('input', handleInputChanges);
    outputContainer.addEventListener('click', handleClicks);

    view.addEventListener('loadInventoryAdjustment', (e) => {
        const { yjCode } = e.detail;
        if (yjCode) {
            dosageFormFilter.value = '';
            kanaInitialFilter.value = '';
            deadStockOnlyFilter.checked = false;
            shelfNumberInput.value = '';
            loadAndRenderDetails(yjCode);
        }
    });
}

function parseGS1_128(code) {
    let rest = code;
    const data = {};

    if (rest.startsWith('01')) {
        if (rest.length < 16) return null;
        data.gs1Code = rest.substring(2, 16);
        rest = rest.substring(16);
    } else {
        return null;
    }

    if (rest.startsWith('17')) {
        if (rest.length < 8) return data; 
        data.expiryDate = rest.substring(2, 8);
        rest = rest.substring(8);
    }

    if (rest.startsWith('10')) {
        data.lotNumber = rest.substring(2);
    }
   
    return data;
}

async function handleBarcodeScan(e) {
    e.preventDefault();
    
    const barcodeInput = document.getElementById('ia-barcode-input');
    const inputValue = barcodeInput.value.trim();
    if (!inputValue) return;

    let parsedData = null;
    let gs1Code = '';

    if (inputValue.startsWith('01') && inputValue.length > 16) {
        parsedData = parseGS1_128(inputValue);
        if (parsedData) {
            gs1Code = parsedData.gs1Code;
        }
    }
    
    if (!gs1Code) {
        gs1Code = inputValue;
    }

    if (!gs1Code) {
        window.showNotification('有効なGS1コードではありません。', 'error');
        return;
    }
   
    window.showLoading('製品情報を検索中...');
    try {
        const res = await fetch(`/api/product/by_gs1?gs1_code=${gs1Code}`);
        if (!res.ok) {
            if (res.status === 404) {
                if (confirm(`このGS1コードはマスターに登録されていません。\n新規マスターを作成しますか？`)) {
                    await createProvisionalMaster(gs1Code);
                } else {
                    throw new Error('このGS1コードはマスターに登録されていません。');
                }
            } else {
                throw new Error('製品情報の検索に失敗しました。');
            }
        } else {
            const productMaster = await res.json();
            await loadAndRenderDetails(productMaster.yjCode);

            if (parsedData && (parsedData.expiryDate || parsedData.lotNumber)) {
                setTimeout(() => {
                    const firstProductInputGroup = outputContainer.querySelector('.product-input-group');
                    if (firstProductInputGroup) {
                        if (parsedData.expiryDate) {
                            const expiryInput = firstProductInputGroup.querySelector('.expiry-input');
                            if (expiryInput) expiryInput.value = parsedData.expiryDate;
                        }
                        if (parsedData.lotNumber) {
                            const lotInput = firstProductInputGroup.querySelector('.lot-input');
                            if (lotInput) lotInput.value = parsedData.lotNumber;
                        }
                        window.showNotification('有効期限とロットを自動入力しました。', 'success');
                    }
                }, 100);
            }
            barcodeInput.value = '';
            barcodeInput.focus();
        }
    } catch (err) {
        window.showNotification(err.message, 'error');
    } finally {
        window.hideLoading();
    }
}

async function createProvisionalMaster(gs1Code) {
    window.showLoading('新規マスターを作成中...');
    try {
        const productCode = gs1Code.length === 14 ? gs1Code.substring(1) : gs1Code;

        const res = await fetch('/api/master/create_provisional', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ gs1Code: gs1Code, productCode: productCode }),
        });
        const resData = await res.json();
        if (!res.ok) {
            throw new Error(resData.message || 'マスターの作成に失敗しました。');
        }

        window.showNotification(`新規マスターを作成しました (YJ: ${resData.yjCode})`, 'success');
        await loadAndRenderDetails(resData.yjCode);

        barcodeInput.value = '';
        barcodeInput.focus();
    } catch (err) {
        throw err;
    }
}


async function onSelectProductClick() {
    const dosageForm = dosageFormFilter.value;
    const kanaInitial = kanaInitialFilter.value;
    const isDeadStockOnly = deadStockOnlyFilter.checked;
    const shelfNumber = shelfNumberInput.value.trim();
    
    const params = new URLSearchParams({
        dosageForm: dosageForm,
        kanaInitial: kanaInitial,
        deadStockOnly: isDeadStockOnly,
        shelfNumber: shelfNumber,
    });
    
    const apiUrl = `/api/products/search_filtered?${params.toString()}`;
    const shouldSkipQueryLengthCheck = !!(dosageForm || kanaInitial || isDeadStockOnly || shelfNumber);
    
    window.showLoading();
    try {
        const res = await fetch(apiUrl);
        if (!res.ok) throw new Error('品目リストの取得に失敗しました。');
        const products = await res.json();
        window.hideLoading();
        showModal(view, (selectedProduct) => {
            loadAndRenderDetails(selectedProduct.yjCode);
        }, { 
            initialResults: products, 
            searchApi: apiUrl,
            skipQueryLengthCheck: shouldSkipQueryLengthCheck
        });
    } catch (err) {
        window.hideLoading();
        window.showNotification(err.message, 'error');
    }
}

export async function loadAndRenderDetails(yjCode) {
    currentYjCode = yjCode;
    if (!yjCode) {
        window.showNotification('YJコードを指定してください。', 'error');
        return;
    }

    window.showLoading();
    outputContainer.innerHTML = '<p>データを読み込んでいます...</p>';
    try {
        const apiUrl = `/api/inventory/adjust/data?yjCode=${yjCode}`;
        const res = await fetch(apiUrl);
        if (!res.ok) {
            const errText = await res.text();
            throw new Error(errText || 'データ取得に失敗しました。');
        }
        
        lastLoadedDataCache = await res.json();
        const html = generateFullHtml(lastLoadedDataCache);
        outputContainer.innerHTML = html;
        
        const dateInput = document.getElementById('inventory-date');
        if(dateInput) {
            const yesterday = new Date();
            yesterday.setDate(yesterday.getDate() - 1);
            const yyyy = yesterday.getFullYear();
            const mm = String(yesterday.getMonth() + 1).padStart(2, '0');
            const dd = String(yesterday.getDate()).padStart(2, '0');
            dateInput.value = `${yyyy}-${mm}-${dd}`;
        }
    } catch (err) {
        outputContainer.innerHTML = `<p style="color:red;">エラー: ${err.message}</p>`;
    } finally {
        window.hideLoading();
    }
}

function handleInputChanges(e) {
    const targetClassList = e.target.classList;
    if (targetClassList.contains('physical-stock-input') || targetClassList.contains('precomp-active-check')) {
        reverseCalculateStock();
    }

    if(targetClassList.contains('lot-quantity-input') || targetClassList.contains('final-inventory-input')){
        const productCode = e.target.dataset.productCode;
        updateFinalInventoryTotal(productCode);
    }
}

function handleClicks(e) {
    const target = e.target;
    if (target.classList.contains('add-deadstock-row-btn')) {
        const productCode = target.dataset.productCode;
        const master = findMaster(productCode);
        const tbody = document.querySelector(`.final-input-tbody[data-product-code="${productCode}"]`);
        if(master && tbody){
            const newRowHTML = createFinalInputRow(master, null, false);
            tbody.insertAdjacentHTML('beforeend', newRowHTML);
        }
    }
  
    if (target.classList.contains('delete-deadstock-row-btn')) {
        const topRow = target.closest('tr');
        const bottomRow = topRow.nextElementSibling;
        const productCode = bottomRow.querySelector('[data-product-code]')?.dataset.productCode;
        topRow.remove();
        bottomRow.remove();
        if(productCode) updateFinalInventoryTotal(productCode);
    }
    if (target.classList.contains('register-inventory-btn')) {
        saveInventoryData();
    }
}

function reverseCalculateStock() {
    const todayStr = getLocalDateString().replace(/-/g, '');

    const precompTotalsByProduct = {};
    document.querySelectorAll('.precomp-active-check:checked').forEach(cb => {
        const productCode = cb.dataset.productCode;
        const master = findMaster(productCode);
        
        if (!master) return;
        
        const yjQuantity = parseFloat(cb.dataset.quantity) || 0;
        let janQuantity = 0;
        if (master.janPackInnerQty > 0) {
            janQuantity = yjQuantity / master.janPackInnerQty;
        }
        precompTotalsByProduct[productCode] = (precompTotalsByProduct[productCode] || 0) + janQuantity;
    });

    const todayNetChangeByProduct = {};
    if (lastLoadedDataCache && lastLoadedDataCache.transactionLedger) {
        lastLoadedDataCache.transactionLedger.forEach(yjGroup => {
            yjGroup.packageLedgers.forEach(pkg => {
                pkg.transactions.forEach(tx => {
                    if (tx.transactionDate === todayStr && tx.flag !== 0) {
                        let janQty = tx.janQuantity || 0;
                        if (janQty === 0 && tx.yjQuantity && tx.janPackInnerQty > 0) {
                            janQty = tx.yjQuantity / tx.janPackInnerQty;
                        }
                        const signedJanQty = janQty * (tx.flag === 1 || tx.flag === 11 || tx.flag === 4 ? 1 : -1);
                        todayNetChangeByProduct[tx.janCode] = (todayNetChangeByProduct[tx.janCode] || 0) + signedJanQty;
                    }
                });
            });
        });
    }

    document.querySelectorAll('.physical-stock-input').forEach(input => {
        const productCode = input.dataset.productCode;
        const physicalStockToday = parseFloat(input.value) || 0;
    
        const precompStock = precompTotalsByProduct[productCode] || 0;
        const netChangeToday = todayNetChangeByProduct[productCode] || 0;

        const totalStockToday = physicalStockToday + precompStock;
        const calculatedPreviousDayStock = totalStockToday - netChangeToday;
        
        const displaySpan = document.querySelector(`.calculated-previous-day-stock[data-product-code="${productCode}"]`);
        if(displaySpan) displaySpan.textContent = calculatedPreviousDayStock.toFixed(2);
        
        const finalInput = document.querySelector(`.final-inventory-input[data-product-code="${productCode}"]`);
        if(finalInput) {
            finalInput.value = calculatedPreviousDayStock.toFixed(2);
            updateFinalInventoryTotal(productCode);
        }
    });
}

function updateFinalInventoryTotal(productCode) {
    const tbody = document.querySelector(`.final-input-tbody[data-product-code="${productCode}"]`);
    if (!tbody) return;
    let totalQuantity = 0;
    tbody.querySelectorAll('.final-inventory-input, .lot-quantity-input').forEach(input => {
        totalQuantity += parseFloat(input.value) || 0;
    });
}

function findMaster(productCode) {
    if (!lastLoadedDataCache || !lastLoadedDataCache.transactionLedger || lastLoadedDataCache.transactionLedger.length === 0) {
        return null;
    }
    for (const pkgLedger of lastLoadedDataCache.transactionLedger[0].packageLedgers) {
        const master = (pkgLedger.masters || []).find(m => m.productCode === productCode);
        if (master) {
            return master;
        }
    }
    return null;
}

async function saveInventoryData() {
    const dateInput = document.getElementById('inventory-date');
    if (!dateInput || !dateInput.value) {
        window.showNotification('棚卸日を指定してください。', 'error');
        return;
    }
    
    if (!confirm(`${dateInput.value}の棚卸データとして保存します。よろしいですか？`)) return;

    const inventoryData = {};
    const deadStockData = [];
    const allMasters = (lastLoadedDataCache.transactionLedger[0].packageLedgers || []).flatMap(pkg => pkg.masters || []);
    
    allMasters.forEach(master => {
        const productCode = master.productCode;
        const tbody = document.querySelector(`.final-input-tbody[data-product-code="${productCode}"]`);
        if (!tbody) {
            inventoryData[productCode] = 0;
            return;
        };

        let totalInputQuantity = 0;
        
        const inventoryRows = tbody.querySelectorAll('.inventory-row');
        for (let i = 0; i < inventoryRows.length; i += 2) {
            const topRow = inventoryRows[i];
            const bottomRow = inventoryRows[i+1];
            
            const quantityInput = bottomRow.querySelector('.final-inventory-input, .lot-quantity-input');
            const expiryInput = topRow.querySelector('.expiry-input');
            const lotInput = bottomRow.querySelector('.lot-input');
            
            if (!quantityInput || !expiryInput || !lotInput) continue;
            
            const quantity = parseFloat(quantityInput.value) || 0;
            const expiry = expiryInput.value.trim();
            const lot = lotInput.value.trim();
            
            totalInputQuantity += quantity;
            if (quantity > 0 && (expiry || lot)) {
                deadStockData.push({ 
                    productCode, 
                    yjCode: master.yjCode, packageForm: master.packageForm,
                    janPackInnerQty: master.janPackInnerQty, yjUnitName: master.yjUnitName,
                    stockQuantityJan: quantity, expiryDate: expiry, lotNumber: lot 
                });
            }
        }
        inventoryData[productCode] = totalInputQuantity;
    });
    
    const payload = {
        date: dateInput.value.replace(/-/g, ''),
        yjCode: currentYjCode,
        inventoryData: inventoryData,
        deadStockData: deadStockData,
    };
    
    window.showLoading();
    try {
        const res = await fetch('/api/inventory/adjust/save', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload),
        });
        const resData = await res.json();
        if (!res.ok) throw new Error(resData.message || '保存に失敗しました。');

        window.showNotification(resData.message, 'success');
        loadAndRenderDetails(currentYjCode);
    } catch (err) {
        window.showNotification(err.message, 'error');
    } finally {
        window.hideLoading();
    }
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\inventory_history.js -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\inventory_history.js (新規作成)
// ▼▼▼ [修正点] getLocalDateString をインポート ▼▼▼
import { getLocalDateString } from './utils.js';
// ▲▲▲ 修正ここまで ▲▲▲
let view, dateInput, showBtn, outputContainer;

/**
 * 棚卸履歴のテーブルを描画する
 * @param {Array} records - 表示する取引記録の配列
 */
function renderInventoryHistory(records) {
    if (!records || records.length === 0) {
        outputContainer.innerHTML = "<p>この日付の棚卸データはありません。</p>";
        return;
    }

    const tableHeader = `
        <thead>
            <tr>
                <th style="width: 30%;">製品名</th>
                <th style="width: 15%;">JANコード</th>
                <th style="width: 10%;">YJ数量</th>
                <th style="width: 10%;">YJ単位</th>
                <th style="width: 25%;">包装仕様</th>
                <th style="width: 10%;">操作</th>
            </tr>
        </thead>
    `;

    const tableBody = records.map(rec => `
        <tr data-id="${rec.id}">
            <td class="left">${rec.productName}</td>
            <td>${rec.janCode}</td>
            <td class="right">${rec.yjQuantity.toFixed(2)}</td>
            <td>${rec.yjUnitName}</td>
            <td class="left">${rec.packageSpec}</td>
            <td class="center"><button class="btn delete-inv-record-btn" data-id="${rec.id}">削除</button></td>
        </tr>
    `).join('');

    outputContainer.innerHTML = `<table class="data-table">${tableHeader}<tbody>${tableBody}</tbody></table>`;
}

/**
 * 削除ボタンが押されたときの処理
 * @param {number} transactionId - 削除する取引のID
 */
async function handleDelete(transactionId) {
    if (!confirm(`この棚卸レコードを完全に削除しますか？\nこの操作は元に戻せません。`)) {
        return;
    }

    window.showLoading();
    try {
        const res = await fetch(`/api/transaction/delete_by_id/${transactionId}`, {
            method: 'DELETE',
        });
        const resData = await res.json();
        if (!res.ok) {
            throw new Error(resData.message || '削除に失敗しました。');
        }
        
        // 画面から該当の行を削除
        const rowToRemove = outputContainer.querySelector(`tr[data-id="${transactionId}"]`);
        if (rowToRemove) {
            rowToRemove.remove();
        }

        window.showNotification(resData.message, 'success');
    } catch (err) {
        window.showNotification(err.message, 'error');
    } finally {
        window.hideLoading();
    }
}


export function initInventoryHistory() {
    view = document.getElementById('inventory-history-view');
    if (!view) return;

    dateInput = document.getElementById('history-inv-date');
    showBtn = document.getElementById('history-inv-show-btn');
    outputContainer = document.getElementById('inventory-history-output');

    // ▼▼▼ [修正点] 日付設定処理を新しい関数に置き換え ▼▼▼
    dateInput.value = getLocalDateString();
    // ▲▲▲ 修正ここまで ▲▲▲

    showBtn.addEventListener('click', async () => {
        const date = dateInput.value.replace(/-/g, '');
        if (!date) {
            window.showNotification('日付を選択してください。', 'error');
            return;
        }

        window.showLoading();
        try {
            const res = await fetch(`/api/inventory/by_date?date=${date}`);
            if (!res.ok) {
                const errText = await res.text();
                throw new Error(errText || '棚卸データの取得に失敗しました。');
            }
            const records = await res.json();
            renderInventoryHistory(records);
        } catch (err) {
            outputContainer.innerHTML = `<p style="color:red;">${err.message}</p>`;
        } finally {
            window.hideLoading();
        }
    });

    outputContainer.addEventListener('click', (e) => {
        if (e.target.classList.contains('delete-inv-record-btn')) {
            const transactionId = e.target.dataset.id;
            handleDelete(transactionId);
        }
    });
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\inventory.js -----
import { createUploadTableHTML, renderUploadTableRows } from './common_table.js';

const fileInput = document.getElementById('inventoryFileInput');
const outputContainer = document.getElementById('inventory-output-container');

async function handleInventoryUpload(event) {
    const files = event.target.files;
    if (!files.length) return;

    // ▼▼▼【ここからが修正箇所です】▼▼▼

    // 先に処理中メッセージだけ表示する
    outputContainer.innerHTML = `<p>Processing...</p>`;
    window.showLoading();

    try {
        const formData = new FormData();
        for (const file of files) {
            formData.append('file', file);
        }

        const response = await fetch('/api/inventory/upload', {
            method: 'POST',
            body: formData,
        });
        
        const data = await response.json();
        if (!response.ok) {
            throw new Error(data.message || 'Inventory file processing failed.');
        }

        // --- 修正後の描画ロジック ---
        // 1. データを取得した後に、テーブルの枠と中身をそれぞれ文字列として生成
        const tableShell = createUploadTableHTML('inventory-output-table');
        // 棚卸画面のAPIレスポンスでは、データは 'details' キーに含まれるため data.details を使用 
        const tableBodyContent = renderUploadTableRows(data.details); 
        
        // 2. 文字列を結合して完全なHTMLを作成
        const fullTableHtml = tableShell.replace('<tbody></tbody>', `<tbody>${tableBodyContent}</tbody>`);

        // 3. 完成したHTMLを一度だけDOMに書き込む
        outputContainer.innerHTML = fullTableHtml;
        
        window.showNotification(data.message || 'Inventory file processed successfully.', 'success');

    } catch (err) {
        // エラー時も同様に、テーブルの枠を作ってからエラーメッセージを表示すると確実
        const tableShell = createUploadTableHTML('inventory-output-table');
        const errorRow = `<tr><td colspan="14" class="center" style="color:red;">Error: ${err.message}</td></tr>`;
        outputContainer.innerHTML = tableShell.replace('<tbody></tbody>', `<tbody>${errorRow}</tbody>`);
        
        window.showNotification(err.message, 'error');
    } finally {
        window.hideLoading();
        event.target.value = ''; // ファイル入力をリセット
    }
    // ▲▲▲【修正ここまで】▲▲▲
}

export function initInventoryUpload() {
    if (!fileInput) return;
    fileInput.addEventListener('change', handleInventoryUpload);
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\jcshms_update.js -----
export function initJcshmsUpdate() {
    const reloadBtn = document.getElementById('reloadJcshmsBtn');
    if (!reloadBtn) return;

    reloadBtn.addEventListener('click', async () => {
        if (!confirm('SOUフォルダ内のJCSHMS.CSVとJANCODE.CSVをデータベースに再読み込みします。\nこれには数分かかることがあり、完了するまでアプリケーションは応答しなくなります。\nよろしいですか？')) {
            return;
        }
        window.showLoading();
        // ▼▼▼ [修正点] 結果表示用のコンテナを取得し、処理中メッセージを表示 ▼▼▼
        const resultContainer = document.getElementById('upload-output-container');
        const uploadView = document.getElementById('upload-view');
        const activeView = document.querySelector('main > div:not(.hidden)');
        
        if (uploadView && activeView) {
            activeView.classList.add('hidden');
            uploadView.classList.remove('hidden');
        }
        resultContainer.innerHTML = `<h3>JCSHMSマスター更新処理中...</h3><p>ブラウザを閉じないでください。</p>`;
        // ▲▲▲ 修正ここまで ▲▲▲

        try {
            const res = await fetch('/api/masters/reload_jcshms', { method: 'POST' });
            const resData = await res.json();
            if (!res.ok) {
                throw new Error(resData.message || '再読み込みに失敗しました。');
            }
            
            // ▼▼▼ [修正点] 結果表示ロジックを全面的に書き換え ▼▼▼
            let resultHTML = `<h3>${resData.message}</h3>`;

            if (resData.updatedProducts && resData.updatedProducts.length > 0) {
                resultHTML += `<p style="margin-top: 10px;">以下の${resData.updatedProducts.length}件が更新されました。</p>
                               <table class="data-table"><thead><tr><th>JAN</th><th>製品名</th></tr></thead><tbody>`;
                resData.updatedProducts.forEach(p => {
                    resultHTML += `<tr><td>${p.productCode}</td><td class="left">${p.productName}</td></tr>`;
                });
                resultHTML += `</tbody></table>`;
            }

            if (resData.orphanedProducts && resData.orphanedProducts.length > 0) {
                resultHTML += `<p style="margin-top: 10px;">以下の${resData.orphanedProducts.length}件がJCSHMSから削除されたため、手動管理に移行しました。</p>
                               <table class="data-table"><thead><tr><th>JAN</th><th>製品名</th></tr></thead><tbody>`;
                resData.orphanedProducts.forEach(p => {
                    resultHTML += `<tr><td>${p.productCode}</td><td class="left">${p.productName}</td></tr>`;
                });
                resultHTML += `</tbody></table>`;
            }

            resultContainer.innerHTML = resultHTML;
            window.showNotification(resData.message, 'success');
            // ▲▲▲ 修正ここまで ▲▲▲
        } catch (err) {
            console.error(err);
            resultContainer.innerHTML = `<p style="color:red;">エラー: ${err.message}</p>`; // エラーもコンテナに表示
            window.showNotification(`エラー: ${err.message}`, 'error');
        } finally {
            window.hideLoading();
        }
    });
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\ledger.js -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\ledger.js

import { showModal } from './inout_modal.js';
import { hiraganaToKatakana } from './utils.js';
import { wholesalerMap, clientMap } from './master_data.js';
import { transactionTypeMap } from './common_table.js';

let view, selectProductBtn, outputContainer, selectedProductDisplay, printBtn, shelfNumberInput;
let lastLoadedData = null; 

/**
 * トランザクションレコードから符号付きのYJ数量を計算するヘルパー関数
 * @param {object} record - TransactionRecordオブジェクト
 * @returns {number} - 符号付きのYJ数量
 */
function getSignedYjQty(record) {
    const flag = record.flag;
    const qty = record.yjQuantity || 0;
    switch (flag) {
        case 1: case 4: case 11: // 入庫系
            return qty;
        case 2: case 3: case 5: case 12: // 出庫系
            return -qty;
        default: // 棚卸など
            return 0;
    }
}

/**
 * 最新の棚卸を基点に、在庫を再計算し、日付昇順のリストを返す
 * @param {Array} transactions - サーバーから受け取った昇順の取引リスト
 * @returns {Array} - 在庫を再計算した、昇順の取引リスト
 */
function recalculateBalancesFromLatestInventory(transactions) {
    if (!transactions || transactions.length === 0) {
        return [];
    }

    let recalculatedTxs = JSON.parse(JSON.stringify(transactions));

    let latestInventoryIndex = -1;
    for (let i = recalculatedTxs.length - 1; i >= 0; i--) {
        if (recalculatedTxs[i].flag === 0) {
            latestInventoryIndex = i;
            break;
        }
    }

    if (latestInventoryIndex !== -1) {
        recalculatedTxs[latestInventoryIndex].runningBalance = recalculatedTxs[latestInventoryIndex].yjQuantity;

        for (let i = latestInventoryIndex + 1; i < recalculatedTxs.length; i++) {
            recalculatedTxs[i].runningBalance = recalculatedTxs[i - 1].runningBalance + getSignedYjQty(recalculatedTxs[i]);
        }

        for (let i = latestInventoryIndex - 1; i >= 0; i--) {
            recalculatedTxs[i].runningBalance = recalculatedTxs[i + 1].runningBalance - getSignedYjQty(recalculatedTxs[i + 1]);
        }

    } else {
        if (recalculatedTxs.length > 0) {
            for (let i = recalculatedTxs.length - 2; i >= 0; i--) {
                recalculatedTxs[i].runningBalance = recalculatedTxs[i + 1].runningBalance - getSignedYjQty(recalculatedTxs[i + 1]);
            }
        }
    }

    return recalculatedTxs;
}

/**
 * 予製情報テーブルを含む、台帳ビュー全体のHTMLを生成して描画する
 */
function renderLedgerView() {
    if (!lastLoadedData) {
        outputContainer.innerHTML = "<p>データがありません。</p>";
        return;
    }

    const ascendingTransactions = recalculateBalancesFromLatestInventory(lastLoadedData.ledgerTransactions);

    const ledgerHtml = renderLedgerTable(ascendingTransactions);
    const precompHtml = renderPrecompDetails(lastLoadedData.precompDetails);
    
    const finalTheoreticalStock = ascendingTransactions.length > 0
        ? ascendingTransactions[ascendingTransactions.length - 1].runningBalance
        : 0;

    const summaryHtml = `
        <div style="text-align: right; margin-top: 20px; padding-top: 10px; border-top: 2px solid #333; font-weight: bold;">
            <span>最終理論在庫: <span id="final-theoretical-stock">${finalTheoreticalStock.toFixed(2)}</span></span> | 
            <span>チェック済み予製合計: <span id="total-precomp-stock">0.00</span></span> | 
            <span style="color: blue;">最終実在庫: <span id="final-real-stock">${finalTheoreticalStock.toFixed(2)}</span></span>
        </div>
    `;

    outputContainer.innerHTML = ledgerHtml + precompHtml + summaryHtml;
    updateRealStock();
}

/**
 * 台帳テーブルのHTMLを生成する
 * @param {Array} records - 表示する台帳データの配列 (LedgerTransaction)
 */
function renderLedgerTable(records) {
    if (!records || records.length === 0) {
        return "<h4>取引履歴 (過去30日)</h4><p>対象期間の取引データがありませんでした。</p>";
    }

    const tableHeader = `
        <thead>
            <tr>
                <th>日付</th>
                <th>種別</th>
                <th>入庫 (YJ)</th>
                <th>出庫 (YJ)</th>
                <th>在庫(理論)</th>
                <th style="color: blue;">在庫(実)</th>
                <th>卸/患者</th>
                <th>ロット</th>
                <th>期限</th>
            </tr>
        </thead>
    `;

    const tableBody = records.map(rec => {
        const signedQty = getSignedYjQty(rec);
        const receipt = signedQty > 0 ? signedQty.toFixed(2) : '';
        const dispense = signedQty < 0 ? (-signedQty).toFixed(2) : '';
        
        let partyName = '';
        if (rec.flag === 1 || rec.flag === 2) {
             partyName = wholesalerMap.get(rec.clientCode) || rec.clientCode || '';
        } else if (rec.flag === 3 || rec.flag === 5) {
             partyName = clientMap.get(rec.clientCode) || rec.clientCode || '';
        }

        return `
        <tr class="ledger-row" data-theoretical-stock="${rec.runningBalance}">
            <td>${rec.transactionDate || ''}</td>
            <td>${transactionTypeMap[rec.flag] || ''}</td>
            <td class="right">${receipt}</td>
            <td class="right">${dispense}</td>
            <td class="right">${(rec.runningBalance ?? 0).toFixed(2)}</td>
            <td class="right real-stock-cell" style="font-weight: bold; color: blue;">${(rec.runningBalance ?? 0).toFixed(2)}</td>
            <td class="left">${partyName}</td>
            <td class="left">${rec.lotNumber || ''}</td>
            <td>${rec.expiryDate || ''}</td>
        </tr>
    `}).join('');

    return `<h3 class="view-subtitle">取引履歴 (過去30日)</h3><table class="data-table">${tableHeader}<tbody>${tableBody}</tbody></table>`;
}

/**
 * 予製情報テーブルのHTMLを生成する
 * @param {Array} records - 表示する予製データの配列 (TransactionRecord)
 */
function renderPrecompDetails(records) {
    if (!records || records.length === 0) {
        return '<div style="margin-top: 20px;"><h3 class="view-subtitle">関連する予製情報</h3><p>この製品に紐づく予製情報はありません。</p></div>';
    }

    const tableHeader = `
        <thead>
            <tr>
                <th style="width: 5%;"><input type="checkbox" class="precomp-check-all" checked></th>
                <th style="width: 25%;">患者番号</th>
                <th style="width: 40%;">製品名</th>
                <th style="width: 15%;">予製数量 (YJ)</th>
                <th style="width: 15%;">包装</th>
            </tr>
        </thead>
    `;
    const tableBody = records.map(rec => `
        <tr>
            <td class="center"><input type="checkbox" class="precomp-check" data-quantity="${rec.yjQuantity}" checked></td>
            <td class="left">${clientMap.get(rec.clientCode) || rec.clientCode}</td>
            <td class="left">${rec.productName}</td>
            <td class="right">${rec.yjQuantity.toFixed(2)}</td>
            <td class="left">${rec.packageSpec}</td>
        </tr>
    `).join('');

    return `<div style="margin-top: 20px;">
                <h3 class="view-subtitle">関連する予製情報</h3>
                <p style="font-size: 11px; margin-bottom: 5px;">チェックを入れた予製は実在庫から引かれます。</p>
                <table class="data-table">${tableHeader}<tbody>${tableBody}</tbody></table>
            </div>`;
}

/**
 * 予製チェックボックスの変更に応じて実在庫を再計算・描画する
 */
function updateRealStock() {
    let precompTotal = 0;
    outputContainer.querySelectorAll('.precomp-check:checked').forEach(checkbox => {
        precompTotal += parseFloat(checkbox.dataset.quantity || 0);
    });

    const totalPrecompEl = document.getElementById('total-precomp-stock');
    if (totalPrecompEl) totalPrecompEl.textContent = precompTotal.toFixed(2);

    const ledgerRows = outputContainer.querySelectorAll('tr.ledger-row');
    ledgerRows.forEach(row => {
        const theoreticalStock = parseFloat(row.dataset.theoreticalStock);
        const realStock = theoreticalStock - precompTotal;
        row.querySelector('.real-stock-cell').textContent = realStock.toFixed(2);
    });

    const finalRealStockEl = document.getElementById('final-real-stock');
    if (finalRealStockEl) {
        const finalTheoreticalStockEl = document.getElementById('final-theoretical-stock');
        const finalTheoreticalStock = finalTheoreticalStockEl ? parseFloat(finalTheoreticalStockEl.textContent) : 0;
        finalRealStockEl.textContent = (finalTheoreticalStock - precompTotal).toFixed(2);
    }
}


/**
 * 指定された製品コードの台帳データをサーバーから取得して描画する
 * @param {string} productCode - 対象の製品JANコード
 */
async function loadLedgerForProduct(productCode) {
    outputContainer.innerHTML = '<p>台帳データを読み込み中...</p>';
    window.showLoading();
    try {
        const res = await fetch(`/api/ledger/product/${productCode}`);
        if (!res.ok) {
            const errText = await res.text();
            throw new Error(errText || '台帳データの取得に失敗しました。');
        }
        lastLoadedData = await res.json();
        
        renderLedgerView();

    } catch (err) {
        outputContainer.innerHTML = `<p style="color:red;">${err.message}</p>`;
    } finally {
        window.hideLoading();
    }
}

/**
 * 「品目を選択...」ボタンがクリックされたときの処理
 */
async function onSelectProductClick() {
    const drugTypeCheckboxes = document.querySelectorAll('input[name="ledgerDrugType"]:checked');
    const selectedDrugTypes = Array.from(drugTypeCheckboxes).map(cb => cb.value).join(',');
    const shelfNumber = shelfNumberInput.value.trim();

    const params = new URLSearchParams({
        deadStockOnly: false,
        drugTypes: selectedDrugTypes,
        shelfNumber: shelfNumber,
    });
    const apiUrl = `/api/products/search_filtered?${params.toString()}`;
    const shouldSkipQueryLengthCheck = !!(selectedDrugTypes || shelfNumber);

    window.showLoading();
    try {
        const res = await fetch(apiUrl);
        if (!res.ok) throw new Error('品目リストの取得に失敗しました。');
        const products = await res.json();
        window.hideLoading();
        
        showModal(view, (selectedProduct) => {
            selectedProductDisplay.textContent = `${selectedProduct.productName} (${selectedProduct.yjCode})`;
            loadLedgerForProduct(selectedProduct.productCode);
        }, { 
            initialResults: products, 
            searchApi: apiUrl,
            skipQueryLengthCheck: shouldSkipQueryLengthCheck
        });
    } catch (err) {
        window.hideLoading();
        window.showNotification(err.message, 'error');
    }
}


/**
 * 管理台帳ビューの初期化
 */
export function initLedgerView() {
    view = document.getElementById('ledger-view');
    if (!view) return;

    selectProductBtn = document.getElementById('ledger-select-product-btn');
    outputContainer = document.getElementById('ledger-output-container');
    selectedProductDisplay = document.getElementById('ledger-selected-product');
    printBtn = document.getElementById('print-ledger-btn');
    shelfNumberInput = document.getElementById('ledger-shelf-number');

    selectProductBtn.addEventListener('click', onSelectProductClick);
    
    printBtn.addEventListener('click', () => {
        if (outputContainer.querySelector('table')) {
            view.classList.add('print-this-view');
            window.print();
        } else {
            window.showNotification('印刷するデータがありません。', 'error');
        }
    });
    
    window.addEventListener('afterprint', () => {
        view.classList.remove('print-this-view');
    });

    outputContainer.addEventListener('change', (e) => {
        if (e.target.classList.contains('precomp-check')) {
            updateRealStock();
        } else if (e.target.classList.contains('precomp-check-all')) {
            const isChecked = e.target.checked;
            outputContainer.querySelectorAll('.precomp-check').forEach(chk => chk.checked = isChecked);
            updateRealStock();
        }
    });
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\manual_inventory.js -----
// C:\Dev\WASABI\static\js\manual_inventory.js

// ▼▼▼ [修正点] getLocalDateString をインポート ▼▼▼
import { hiraganaToKatakana, getLocalDateString } from './utils.js';
// ▲▲▲ 修正ここまで ▲▲▲

export function initManualInventory() {
    const view = document.getElementById('manual-inventory-view');
    if (!view) return;
    const dateInput = document.getElementById('manual-inv-date');
    const saveBtn = document.getElementById('save-manual-inv-btn');
    const container = document.getElementById('manual-inventory-container');
    const kanaNameInput = document.getElementById('manual-inv-kanaName');
    const dosageFormInput = document.getElementById('manual-inv-dosageForm');
    let allProducts = [];

    // ▼▼▼ [修正点] 日付を自動設定する関数を追加 ▼▼▼
    async function setDefaultDate() {
        // ▼▼▼ [修正点] 日付設定処理を新しい関数に置き換え ▼▼▼
        dateInput.value = getLocalDateString();
        // ▲▲▲ 修正ここまで ▲▲▲
    }
    // ▲▲▲ 修正ここまで ▲▲▲

    async function loadProducts() {
        container.innerHTML = '<p>製品マスターと理論在庫を読み込んでいます...</p>';
        window.showLoading();
        try {
            // ▼▼▼ [修正点] 製品リスト取得APIには最終棚卸日が含まれるようになった ▼▼▼
            const [mastersRes, stockRes] = await Promise.all([
                fetch('/api/inventory/list'),
                fetch('/api/stock/all_current')
            ]);
            // ▲▲▲ 修正ここまで ▲▲▲
            if (!mastersRes.ok) throw new Error('製品リストの取得に失敗しました。');
            if (!stockRes.ok) throw new Error('理論在庫の取得に失敗しました。');

            allProducts = await mastersRes.json();
            const stockMap = await stockRes.json();
            if(!allProducts) allProducts = [];

            allProducts.forEach(p => {
                p.currentStock = stockMap[p.productCode] || 0;
            });
            
            applyFiltersAndRender();
        } catch (err) {
            container.innerHTML = `<p style="color:red;">${err.message}</p>`;
        } finally {
            window.hideLoading();
        }
    }
    
function applyFiltersAndRender() {
    const kanaFilter = hiraganaToKatakana(kanaNameInput.value).toLowerCase();
    const dosageFilter = dosageFormInput.value; // toLowerCase()を削除
    
    let filteredProducts = allProducts;
    if (kanaFilter) {
        filteredProducts = filteredProducts.filter(p => 
            p.productName.toLowerCase().includes(kanaFilter) || p.kanaName.toLowerCase().includes(kanaFilter)
        );
    }
    
    // ▼▼▼ [修正点] プルダウンに合わせた絞り込みロジックに変更 ▼▼▼
    if (dosageFilter) {
        filteredProducts = filteredProducts.filter(p => 
            p.usageClassification && p.usageClassification.trim() === dosageFilter
        );
    }
    // ▲▲▲ 修正ここまで ▲▲▲
    
    renderProducts(filteredProducts);
}

    function renderProducts(productsToRender) {
        if (productsToRender.length === 0) {
            container.innerHTML = '<p>表示する製品マスターがありません。</p>';
            return;
        }

        const groups = productsToRender.reduce((acc, p) => {
            const key = p.yjCode || 'YJコードなし';
            if (!acc[key]) {
                acc[key] = {
                    productName: p.productName,
                    yjCode: p.yjCode,
                    packages: []
                };
            }
            acc[key].packages.push(p);
            return acc;
        }, {});
        
        Object.values(groups).forEach(group => {
            group.packages = group.packages.reduce((acc, p) => {
                 const key = `${p.packageForm}|${p.janPackInnerQty}|${p.yjUnitName}`;
                 if (!acc[key]) {
                     acc[key] = {
                         packageKey: key,
                         masters: []
                     };
                 }
                 acc[key].masters.push(p);
                 return acc;
            }, {});
        });
        
        let html = '';
        for (const group of Object.values(groups)) {
            html += `<div class="agg-yj-header"><span>YJ: ${group.yjCode}</span><span class="product-name">${group.productName}</span></div>`;
            for (const pkg of Object.values(group.packages)) {
                const firstMaster = pkg.masters[0];
                const productCodes = pkg.masters.map(m => m.productCode).join(',');
                const theoreticalStockForPackage = pkg.masters.reduce((sum, master) => sum + (master.currentStock || 0), 0);

                // ▼▼▼ [修正点] 最終棚卸日を表示するロジックを追加 ▼▼▼
                let lastInvDateStr = '';
                if (firstMaster.lastInventoryDate) {
                    const d = firstMaster.lastInventoryDate; // YYYYMMDD
                    lastInvDateStr = ` (最終棚卸: ${d.slice(0,4)}-${d.slice(4,6)}-${d.slice(6,8)})`;
                }

                html += `
                    <div class="agg-pkg-header" style="display:flex; align-items:center; gap: 10px;">
                        <span>包装: ${pkg.packageKey}</span>
                        <div style="margin-left:auto; display:flex; align-items: center; gap: 10px;">
                            <span style="font-size: 12px; color: #333;">理論在庫: ${theoreticalStockForPackage.toFixed(2)}${lastInvDateStr}</span>
                            <label for="inv-qty-${firstMaster.productCode}" style="font-weight: bold;">実在庫数:</label>
                            <input type="number" step="any" class="manual-inv-qty" data-product-codes="${productCodes}" id="inv-qty-${firstMaster.productCode}" style="width: 100px;">
                            <span>${firstMaster.yjUnitName || ''}</span>
                        </div>
                    </div>
                `;
                // ▲▲▲ 修正ここまで ▲▲▲
            }
        }
        container.innerHTML = html;
    }
    
    view.addEventListener('show', () => {
        setDefaultDate();
        loadProducts();
    });

    // ▼▼▼ [修正点] フィルター入力時のイベントリスナーを追加 ▼▼▼
    kanaNameInput.addEventListener('input', applyFiltersAndRender);
    dosageFormInput.addEventListener('input', applyFiltersAndRender);
    // ▲▲▲ 修正ここまで ▲▲▲
    
    saveBtn.addEventListener('click', async () => {
        const date = dateInput.value.replace(/-/g, '');
        if (!date) {
            window.showNotification('棚卸日を指定してください。', 'error');
            return;
        }
        if (!confirm(`${dateInput.value} の棚卸データとして保存します。よろしいですか？`)) {
            return;
        }

        const records = [];
        container.querySelectorAll('.manual-inv-qty').forEach(input => {
            if (input.value !== '') { 
                const quantity = parseFloat(input.value);
                if (!isNaN(quantity)) {
                    const productCode = input.dataset.productCodes.split(',')[0];
                    records.push({
                        productCode: productCode,
                        yjQuantity: quantity
                    });
                }
            }
        });

        window.showLoading();
        try {
            const res = await fetch('/api/inventory/save_manual', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ date, records }),
            });
            const resData = await res.json();
            if (!res.ok) throw new Error(resData.message || '保存に失敗しました。');
            window.showNotification(resData.message, 'success');
            loadProducts();
        } catch (err) {
            window.showNotification(err.message, 'error');
        } finally {
            window.hideLoading();
        }
    });
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\master_data.js -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\master_data.js

export const clientMap = new Map();
export const wholesalerMap = new Map();

async function fetchAndPopulateClients() {
	const res = await fetch('/api/clients');
	if (!res.ok) {
		throw new Error('得意先マスターの取得に失敗しました。');
	}
	const clients = await res.json();
	clientMap.clear();
	if (clients) {
		clients.forEach(c => clientMap.set(c.code, c.name));
	}
}

export async function refreshClientMap() {
	try {
		await fetchAndPopulateClients();
		console.log('得意先マップを更新しました。');
	} catch (error) {
		console.error("得意先マップの更新に失敗しました:", error);
		window.showNotification('得意先リストの更新に失敗しました。', 'error');
	}
}

// ▼▼▼【ここから修正】▼▼▼
async function fetchAndPopulateWholesalers() {
	const res = await fetch('/api/settings/wholesalers');
	if (!res.ok) {
		throw new Error('卸業者マスターの読み込みに失敗しました。');
	}
	const wholesalers = await res.json();
	wholesalerMap.clear();
	if (wholesalers) {
		wholesalers.forEach(w => wholesalerMap.set(w.code, w.name));
	}
}

export async function refreshWholesalerMap() {
    try {
        await fetchAndPopulateWholesalers();
        console.log('卸業者マップを更新しました。');
    } catch (error) {
        console.error("卸業者マップの更新に失敗しました:", error);
        window.showNotification('卸業者リストの更新に失敗しました。', 'error');
    }
}

export async function loadMasterData() {
	try {
		await Promise.all([
			fetchAndPopulateClients(),
			fetchAndPopulateWholesalers()
		]);
		console.log('得意先と卸業者のマスターデータを読み込みました。');
	} catch (error) {
		console.error("マスターデータの読み込み中にエラーが発生しました:", error);
		window.showNotification('マスターデータの読み込みに失敗しました。', 'error');
	}
}
// ▲▲▲【修正ここまで】▲▲▲

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\master_edit.js -----
import { showModal } from './inout_modal.js';
import { hiraganaToKatakana } from './utils.js';
import { wholesalerMap } from './master_data.js';

let view, tableContainer, refreshBtn, addRowBtn, kanaNameInput, dosageFormInput, shelfNumberInput;
let allMasters = []; // サーバーから取得した全マスターデータを保持する配列
let unitMap = {};

// ▼▼▼【ここから追加】棚番連続登録モーダル用の変数を追加▼▼▼
let shelfModal, closeShelfModalBtn, bulkShelfNumberBtn;
let shelfBarcodeForm, shelfBarcodeInput, shelfScannedList, shelfScannedCount;
let shelfNumberInputForBulk, shelfRegisterBtn, shelfClearBtn;
let shelfScanPool = []; // GS1コードを溜めるプール
// ▲▲▲【追加ここまで】▲▲▲

// 内部で使用するCSSを定義
const style = document.createElement('style');
style.innerHTML = `
    .master-edit-table .field-group { display: flex; flex-direction: column; gap: 2px; }
    .master-edit-table .field-group label { font-size: 10px; font-weight: bold; color: #555; }
    .master-edit-table .field-group input, .master-edit-table .field-group select, .master-edit-table .field-group textarea { width: 100%; font-size: 12px; padding: 4px; border: 1px solid #ccc; }
    .master-edit-table textarea { resize: vertical; min-height: 40px; }
    .master-edit-table .flags-container { display: flex; gap: 5px; }
    .master-edit-table .flags-container .field-group { flex: 1; }
    .master-edit-table input:read-only, .master-edit-table select:disabled, .master-edit-table input:disabled { background-color: #e9ecef; color: #6c757d; cursor: not-allowed; }
    
    .save-success {
        animation: flash-green 1.5s ease-out;
    }
    @keyframes flash-green {
        0% { background-color: #d1e7dd; }
        100% { background-color: transparent; }
    }
`;
document.head.appendChild(style);


async function fetchUnitMap() {
    if (Object.keys(unitMap).length > 0) return;
    try {
        const res = await fetch('/api/units/map');
        if (!res.ok) throw new Error('単位マスタの取得に失敗');
        unitMap = await res.json();
    } catch (err) {
        console.error(err);
        window.showNotification(err.message, 'error');
    }
}

function formatPackageSpecForRow(tbody) {
    if (!tbody) return;
    const getVal = (name) => tbody.querySelector(`[name="${name}"]`)?.value || '';
    const packageForm = getVal('packageForm');
    const yjPackUnitQty = getVal('yjPackUnitQty');
    const yjUnitName = getVal('yjUnitName');
    const janPackInnerQty = getVal('janPackInnerQty');
    const janPackUnitQty = getVal('janPackUnitQty');
    const janUnitCode = getVal('janUnitCode');
    
    let formattedSpec = `${packageForm} ${yjPackUnitQty}${yjUnitName}`;
    if (parseFloat(janPackInnerQty) > 0 && parseFloat(janPackUnitQty) > 0) {
        let janUnitName = (janUnitCode === '0' || janUnitCode === '') ?
            '' : (unitMap[janUnitCode] || '');
        formattedSpec += ` (${janPackInnerQty}${yjUnitName}×${janPackUnitQty}${janUnitName})`;
    }
    const targetCell = tbody.querySelector('.formatted-spec-cell');
    if (targetCell) targetCell.textContent = formattedSpec;
}

function createMasterRowHTML(master = {}) {
    const isNew = !master.productCode;
    const rowId = master.productCode || `new-${Date.now()}`;
    const isProtected = master.origin === 'JCSHMS';
    const disabledAttr = isProtected ? 'disabled' : '';

    const row1 = `
        <tr class="data-row-top">
            <td colspan="2"><div class="field-group"><label>1. JAN</label><input type="text" name="productCode" value="${master.productCode || ''}" placeholder="製品コード(JAN)" ${!isNew ? 'readonly' : ''}></div></td>
            <td colspan="2"><div class="field-group"><label>2. YJ</label><input type="text" name="yjCode" value="${master.yjCode || ''}" placeholder="YJコード" ${isNew || isProtected ? 'readonly' : ''}></div></td>
            <td colspan="2"><div class="field-group"><label>3. GS1</label><input type="text" name="gs1Code" value="${master.gs1Code || ''}" ${disabledAttr}></div></td>
            <td colspan="3"><div class="field-group"><label>4. 商品名</label><input type="text" name="productName" value="${master.productName || ''}" ${disabledAttr}></div></td>
            <td colspan="3"><div class="field-group"><label>5. カナ</label><input type="text" name="kanaName" value="${master.kanaName || ''}" ${disabledAttr}></div></td>
        </tr>`;

    const row2 = `
        <tr class="data-row-middle">
            <td colspan="3"><div class="field-group"><label>6. メーカー</label><input type="text" name="makerName" value="${master.makerName || ''}" ${disabledAttr}></div></td>
            <td colspan="3"><div class="field-group"><label>7. 規格容量</label><input type="text" name="specification" value="${master.specification || ''}" ${disabledAttr}></div></td>
            <td colspan="2"><div class="field-group"><label>8. 剤型</label><input type="text" name="usageClassification" value="${master.usageClassification || ''}" ${disabledAttr}></div></td>
            <td colspan="4"><div class="field-group"><label>9. 包装</label><input type="text" name="packageForm" value="${master.packageForm || ''}" ${disabledAttr}></div></td>
        </tr>`;
    
    let janUnitOptions = '<option value="0">YJ単位と同じ</option>';
    for (const [code, name] of Object.entries(unitMap)) {
        if (code !== '0') janUnitOptions += `<option value="${code}" ${code == (master.janUnitCode || 0) ? 'selected' : ''}>${name}</option>`;
    }
    const flags = [
        { key: 'flagPoison', lbl: '18.毒' }, { key: 'flagDeleterious', lbl: '19.劇' }, { key: 'flagNarcotic', lbl: '20.麻' },
        { key: 'flagPsychotropic', lbl: '21.向' }, { key: 'flagStimulant', lbl: '22.覚' }, { key: 'flagStimulantRaw', lbl: '23.覚原' }
    ];
    const flagSelectorsHTML = flags.map(f => {
        const opts = (f.key === 'flagPsychotropic') ? [0, 1, 2, 3] : [0, 1];
        const options = opts.map(o => `<option value="${o}" ${o == (master[f.key] || 0) ? 'selected' : ''}>${o}</option>`).join('');
        return `<div class="field-group"><label style="text-align:center;">${f.lbl}</label><select name="${f.key}" ${disabledAttr}>${options}</select></div>`;
    }).join('');

    const row3 = `
        <tr class="data-row-middle">
            <td><div class="field-group"><label>10. YJ単位</label><input type="text" name="yjUnitName" value="${master.yjUnitName || ''}" ${disabledAttr}></div></td>
            <td><div class="field-group"><label>11. YJ数量</label><input type="number" name="yjPackUnitQty" value="${master.yjPackUnitQty || 0}" ${disabledAttr}></div></td>
            <td><div class="field-group"><label>12. 包装数</label><input type="number" name="janPackInnerQty" value="${master.janPackInnerQty || 0}" ${disabledAttr}></div></td>
            <td><div class="field-group"><label>13. JAN単位</label><select name="janUnitCode" ${disabledAttr}>${janUnitOptions}</select></div></td>
            <td><div class="field-group"><label>14. JAN数量</label><input type="number" name="janPackUnitQty" value="${master.janPackUnitQty || 0}" ${disabledAttr}></div></td>
            <td><div class="field-group"><label>15. マスタ</label><input type="text" name="origin" value="${master.origin || ''}" readonly></div></td>
            <td><div class="field-group"><label>16. 薬価</label><input type="number" name="nhiPrice" value="${master.nhiPrice || 0}" step="0.0001" ${disabledAttr}></div></td>
            <td colspan="5"><div class="flags-container">${flagSelectorsHTML}</div></td>
        </tr>`;

    let wholesalerOptions = '<option value="">--- 選択 ---</option>';
    wholesalerMap.forEach((name, code) => {
        wholesalerOptions += `<option value="${code}" ${code === master.supplierWholesale ? 'selected' : ''}>${name}</option>`;
    });
    const isOrderStoppedOptions = `<option value="0" ${ (master.isOrderStopped || 0) == 0 ? 'selected' : '' }>可</option><option value="1" ${ (master.isOrderStopped || 0) == 1 ? 'selected' : '' }>不可</option>`;
    
    const row4 = `
        <tr class="data-row-user">
            <td colspan="2"><div class="field-group"><label>17. 納入価(包装)</label><input type="number" name="purchasePrice" value="${master.purchasePrice || ''}" step="0.01"></div></td>
            <td colspan="2"><div class="field-group"><label>24. 卸</label><select name="supplierWholesale">${wholesalerOptions}</select></div></td>
            <td><div class="field-group"><label>25. 発注</label><select name="isOrderStopped">${isOrderStoppedOptions}</select></div></td>
            <td><div class="field-group"><label>26. グループ</label><input type="text" name="groupCode" value="${master.groupCode || ''}"></div></td>
            <td><div class="field-group"><label>27. 棚番</label><input type="text" name="shelfNumber" value="${master.shelfNumber || ''}"></div></td>
            <td><div class="field-group"><label>28. 分類</label><input type="text" name="category" value="${master.category || ''}"></div></td>
            <td colspan="2"><div class="field-group"><label>29. メモ</label><textarea name="userNotes">${master.userNotes || ''}</textarea></div></td>
            <td><div class="field-group"><label>&nbsp;</label><button class="save-master-btn btn">30.保存</button></div></td>
            <td><div class="field-group"><label>&nbsp;</label><button class="quote-jcshms-btn btn" ${disabledAttr}>31.引用</button></div></td>
        </tr>`;

    return `<tbody data-record-id="${rowId}">${row1}${row2}${row3}${row4}</tbody>`;
}

function renderMasters(mastersToRender) {
    if (!mastersToRender || mastersToRender.length === 0) {
        tableContainer.innerHTML = '<p>対象のマスターが見つかりません。</p>';
        return;
    }
    const allTablesHTML = mastersToRender.map(master => {
        const tableContent = createMasterRowHTML(master);
        return `<table class="data-table master-edit-table">${tableContent}</table>`;
    }).join('');
    tableContainer.innerHTML = allTablesHTML;
}

function applyFiltersAndRender() {
    const kanaFilter = hiraganaToKatakana(kanaNameInput.value).toLowerCase();
    const dosageFilter = dosageFormInput.value;
    const shelfFilter = shelfNumberInput ? shelfNumberInput.value.trim().toLowerCase() : '';
    let filteredMasters = allMasters;

    if (kanaFilter) {
        filteredMasters = filteredMasters.filter(p => 
            (p.productCode && p.productCode.toLowerCase().includes(kanaFilter)) ||
            (p.productName && p.productName.toLowerCase().includes(kanaFilter)) || 
            (p.kanaName && p.kanaName.toLowerCase().includes(kanaFilter))
        );
    }
    
    if (dosageFilter) {
        filteredMasters = filteredMasters.filter(p => 
            p.usageClassification && p.usageClassification.trim() === dosageFilter
        );
    }

    if (shelfFilter) {
        filteredMasters = filteredMasters.filter(p =>
            p.shelfNumber && p.shelfNumber.toLowerCase().includes(shelfFilter)
        );
    }
    
    renderMasters(filteredMasters);
}

async function loadAndRenderMasters() {
    tableContainer.innerHTML = `<p>読み込み中...</p>`;
    window.showLoading();
    try {
        const res = await fetch('/api/masters/editable');
        if (!res.ok) throw new Error('マスターの読み込みに失敗しました。');
        allMasters = await res.json();
        applyFiltersAndRender();
    } catch (err) {
        tableContainer.innerHTML = `<p style="color:red;">${err.message}</p>`;
    } finally {
        window.hideLoading();
    }
}

function populateFormWithJcshms(selectedProduct, tbody) {
    if (!tbody) return;
    const setVal = (name, value) => {
        const el = tbody.querySelector(`[name="${name}"]`);
        if (el) el.value = value !== undefined ? value : '';
    };
    const productCodeInput = tbody.querySelector('[name="productCode"]');
    if (productCodeInput && !productCodeInput.readOnly) {
        productCodeInput.value = selectedProduct.productCode || '';
    }
    setVal('yjCode', selectedProduct.yjCode); setVal('productName', selectedProduct.productName);
    setVal('kanaName', selectedProduct.kanaName); setVal('makerName', selectedProduct.makerName);
    setVal('usageClassification', selectedProduct.usageClassification); setVal('packageForm', selectedProduct.packageForm);
    setVal('nhiPrice', selectedProduct.nhiPrice); setVal('flagPoison', selectedProduct.flagPoison);
    setVal('flagDeleterious', selectedProduct.flagDeleterious); setVal('flagNarcotic', selectedProduct.flagNarcotic);
    setVal('flagPsychotropic', selectedProduct.flagPsychotropic); setVal('flagStimulant', selectedProduct.flagStimulant);
    setVal('flagStimulantRaw', selectedProduct.flagStimulantRaw); setVal('yjUnitName', selectedProduct.yjUnitName);
    setVal('yjPackUnitQty', selectedProduct.yjPackUnitQty); setVal('janPackInnerQty', selectedProduct.janPackInnerQty);
    setVal('janUnitCode', selectedProduct.janUnitCode); setVal('janPackUnitQty', selectedProduct.janPackUnitQty);
	setVal('specification', selectedProduct.specification);
	setVal('gs1Code', selectedProduct.gs1Code);
    formatPackageSpecForRow(tbody);
}

// ▼▼▼【ここから追加】棚番連続登録用の関数群▼▼▼

/**
 * 棚番登録モーダル内のスキャン済みリスト表示を更新する
 */
function updateShelfScannedList() {
    shelfScannedCount.textContent = shelfScanPool.length;
    shelfScannedList.innerHTML = shelfScanPool.map(item => `
        <div class="scanned-item" data-gs1="${item.gs1}">
            <span class="scanned-item-name ${item.name ? 'resolved' : ''}">${item.name || item.gs1}</span>
        </div>
    `).join('');
}

/**
 * スキャンされたGS1コードに対応する品目名を取得して表示を更新する
 * @param {string} gs1 - GS1コード
 */
async function resolveProductNameForShelfScan(gs1) {
    try {
        const res = await fetch(`/api/product/by_gs1?gs1_code=${gs1}`);
        if (res.ok) {
            const product = await res.json();
            const poolItem = shelfScanPool.find(item => item.gs1 === gs1);
            if (poolItem) {
                poolItem.name = product.productName;
                const listItem = shelfScannedList.querySelector(`.scanned-item[data-gs1="${gs1}"] .scanned-item-name`);
                if (listItem) {
                    listItem.textContent = product.productName;
                    listItem.classList.add('resolved');
                }
            }
        }
    } catch (err) {
        console.warn(`品目名の解決に失敗: ${gs1}`, err);
    }
}

/**
 * 「この棚番で登録」ボタンが押されたときの処理
 */
async function handleShelfRegister() {
    const shelfNumber = shelfNumberInputForBulk.value.trim();
    if (!shelfNumber) {
        window.showNotification('棚番を入力してください。', 'error');
        return;
    }
    if (shelfScanPool.length === 0) {
        window.showNotification('登録する品目がスキャンされていません。', 'error');
        return;
    }

    const gs1Codes = shelfScanPool.map(item => item.gs1);

    if (!confirm(`スキャンした ${gs1Codes.length} 件の品目の棚番を「${shelfNumber}」として一括登録します。\nよろしいですか？`)) {
        return;
    }

    window.showLoading('棚番を一括更新中...');
    try {
        const payload = {
            shelfNumber: shelfNumber,
            gs1Codes: gs1Codes
        };
        const res = await fetch('/api/masters/bulk_update_shelf_numbers', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });
        const resData = await res.json();
        if (!res.ok) {
            throw new Error(resData.message || '棚番の更新に失敗しました。');
        }
        window.showNotification(resData.message, 'success');
        
        // 成功したらモーダル内のリストと入力欄をクリア
        shelfScanPool = [];
        updateShelfScannedList();
        shelfNumberInputForBulk.value = '';
        shelfBarcodeInput.focus();

        // 裏のマスター一覧も更新
        loadAndRenderMasters();

    } catch (err) {
        window.showNotification(`エラー: ${err.message}`, 'error');
    } finally {
        window.hideLoading();
    }
}

// ▲▲▲【追加ここまで】▲▲▲

export async function initMasterEdit() {
    view = document.getElementById('master-edit-view');
    if (!view) return;
    tableContainer = document.getElementById('master-edit-container');
    refreshBtn = document.getElementById('refreshMastersBtn');
    addRowBtn = document.getElementById('addMasterRowBtn');
    kanaNameInput = document.getElementById('master-edit-kanaName');
    dosageFormInput = document.getElementById('master-edit-dosageForm');
    shelfNumberInput = document.getElementById('master-edit-shelfNumber');

    // ▼▼▼【ここから追加】棚番モーダル用の要素を取得・イベント設定▼▼▼
    shelfModal = document.getElementById('bulk-shelf-number-modal');
    closeShelfModalBtn = document.getElementById('close-shelf-modal-btn');
    bulkShelfNumberBtn = document.getElementById('bulkShelfNumberBtn');
    shelfBarcodeForm = document.getElementById('shelf-barcode-form');
    shelfBarcodeInput = document.getElementById('shelf-barcode-input');
    shelfScannedList = document.getElementById('shelf-scanned-list');
    shelfScannedCount = document.getElementById('shelf-scanned-count');
    shelfNumberInputForBulk = document.getElementById('shelf-number-input');
    shelfRegisterBtn = document.getElementById('shelf-register-btn');
    shelfClearBtn = document.getElementById('shelf-clear-btn');

    bulkShelfNumberBtn.addEventListener('click', () => {
        shelfScanPool = [];
        updateShelfScannedList();
        shelfNumberInputForBulk.value = '';
        shelfModal.classList.remove('hidden');
        document.body.classList.add('modal-open');
        setTimeout(() => shelfBarcodeInput.focus(), 100);
    });

    closeShelfModalBtn.addEventListener('click', () => {
        shelfModal.classList.add('hidden');
        document.body.classList.remove('modal-open');
    });

    shelfBarcodeForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const barcode = shelfBarcodeInput.value.trim();
        if (barcode) {
            // 重複チェック
            if (!shelfScanPool.some(item => item.gs1 === barcode)) {
                shelfScanPool.push({ gs1: barcode, name: null });
                updateShelfScannedList();
                resolveProductNameForShelfScan(barcode); // 裏で品目名を取得
            } else {
                window.showNotification('このバーコードは既にリストにあります。', 'error');
            }
        }
        shelfBarcodeInput.value = '';
    });

    shelfRegisterBtn.addEventListener('click', handleShelfRegister);

    shelfClearBtn.addEventListener('click', () => {
        if (confirm('スキャン済みリストをクリアしますか？')) {
            shelfScanPool = [];
            updateShelfScannedList();
            shelfBarcodeInput.focus();
        }
    });
    // ▲▲▲【追加ここまで】▲▲▲

    await fetchUnitMap();

    view.addEventListener('filterMasterEdit', async (e) => {
        const { productCode } = e.detail;
        if (productCode) {
            kanaNameInput.value = productCode;
            await loadAndRenderMasters(); 
            
            const targetRow = tableContainer.querySelector(`[data-record-id="${productCode}"]`);
            if (targetRow) {
                targetRow.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }
        }
    });

    refreshBtn.addEventListener('click', loadAndRenderMasters);

    addRowBtn.addEventListener('click', async () => {
        window.showLoading();
        try {
            const res = await fetch('/api/sequence/next/MA2Y');
            const data = await res.json();
            if (!res.ok) throw new Error(data.message || 'YJコードの採番に失敗しました。');
            
            const newMasterData = { yjCode: data.nextCode };
            const newRowContent = createMasterRowHTML(newMasterData);
            const newTableHTML = `<table class="data-table master-edit-table">${newRowContent}</table>`;

            tableContainer.insertAdjacentHTML('beforeend', newTableHTML);
            const newTable = tableContainer.lastElementChild;
            
            if (newTable) {
                newTable.scrollIntoView({ behavior: 'smooth', block: 'end' });
                const firstInput = newTable.querySelector('input[name="productCode"]');
                if (firstInput) firstInput.focus();
            }
        } catch (err) {
            window.showNotification(err.message, 'error');
        } finally {
            window.hideLoading();
        }
    });

    kanaNameInput.addEventListener('input', applyFiltersAndRender);
    dosageFormInput.addEventListener('change', applyFiltersAndRender);
    shelfNumberInput.addEventListener('input', applyFiltersAndRender);
    
    tableContainer.addEventListener('input', (e) => {
        const tbody = e.target.closest('tbody[data-record-id]');
        if (tbody) {
            formatPackageSpecForRow(tbody);
        }
    });

    tableContainer.addEventListener('click', async (e) => {
        const target = e.target;
        const tbody = target.closest('tbody[data-record-id]');
        if (!tbody) return;

        if (target.classList.contains('save-master-btn')) {
            const isNew = tbody.dataset.recordId.startsWith('new-');
            const data = {};
            tbody.querySelectorAll('input, select, textarea').forEach(el => {
                if(el.name){
                    const name = el.name;
                    const value = el.value;
                    
                    const numericSelects = [
                        'janUnitCode', 'flagPoison', 'flagDeleterious', 'flagNarcotic', 
                        'flagPsychotropic', 'flagStimulant', 'flagStimulantRaw', 'isOrderStopped'
                    ];

                    if (el.type === 'number' || (el.tagName === 'SELECT' && numericSelects.includes(name))) {
                        const numValue = parseFloat(value);
                        data[name] = !isNaN(numValue) ? numValue : 0;
                    } else {
                        data[name] = value;
                    }
                }
            });
      
            data.origin = data.origin || "PROVISIONAL";

            if (!data.productCode) {
                window.showNotification('製品コード(JAN)は必須です。', 'error');
                return;
            }
            window.showLoading();
            try {
                const res = await fetch('/api/master/update', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data),
                });

                if (!res.ok) {
                    let errorMsg = `保存に失敗しました (HTTP ${res.status})`;
                    try {
                        const errData = await res.json();
                        errorMsg = errData.message || errorMsg;
                    } catch (jsonError) {
                        const errText = await res.text();
                        errorMsg = errText || errorMsg;
                    }
                    throw new Error(errorMsg);
                }

                const resData = await res.json();
                window.showNotification(resData.message, 'success');

                const masterIndex = allMasters.findIndex(m => m.productCode === data.productCode);
                if (masterIndex > -1) {
                    allMasters[masterIndex] = { ...allMasters[masterIndex], ...data };
                } else {
                    allMasters.push(data);
                }

                if (isNew) {
                    const productCodeInput = tbody.querySelector('input[name="productCode"]');
                    productCodeInput.readOnly = true;
                    tbody.dataset.recordId = data.productCode;
                    const originInput = tbody.querySelector('input[name="origin"]');
                    originInput.value = data.origin;
                }
                
                tbody.querySelectorAll('tr').forEach(row => {
                    row.classList.remove('save-success');
                    void row.offsetWidth;
                    row.classList.add('save-success');
                });

            } catch (err) {
                window.showNotification(err.message, 'error');
            } finally {
                window.hideLoading();
            }
        }
      
        if (target.classList.contains('quote-jcshms-btn')) {
            showModal(tbody, populateFormWithJcshms);
        }
    });
}

export function resetMasterEditView() {
    if (tableContainer) {
        if(kanaNameInput) kanaNameInput.value = '';
        if(dosageFormInput) dosageFormInput.value = '';
        if(shelfNumberInput) shelfNumberInput.value = '';
        loadAndRenderMasters();
    }
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\medrec.js -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\medrec.js

export function initMedrec() {
    const downloadBtn = document.getElementById('medrecDownloadBtn');
    if (!downloadBtn) return;

    downloadBtn.addEventListener('click', async () => {
        if (!confirm('e-mednet.jpにログインし、納品データをダウンロードします。よろしいですか？')) {
            return;
        }

        window.showLoading();
        try {
            const res = await fetch('/api/medrec/download', {
                method: 'POST',
            });
            
            // ▼▼▼ [ここから修正] エラーハンドリングを改善 ▼▼▼
            if (!res.ok) {
                const errorText = await res.text();
                try {
                    const resData = JSON.parse(errorText);
                    throw new Error(resData.message || `ダウンロードに失敗しました (HTTP ${res.status})`);
                } catch (e) {
                    throw new Error(errorText || `ダウンロードに失敗しました (HTTP ${res.status})`);
                }
            }
            const resData = await res.json();
            window.showNotification(resData.message, 'success');
            // ▲▲▲ [修正ここまで] ▲▲▲
        } catch (err) {
            console.error('Download failed:', err);
            const errorMessage = err.message || 'サーバーとの通信に失敗しました。設定画面でID/パスワードが正しいか確認してください。';
            window.showNotification(errorMessage, 'error');
        } finally {
            window.hideLoading();
        }
    });
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\orders.js -----
// C:/Users/wasab/OneDrive/デスクトップ/WASABI/static/js/orders.js
import { hiraganaToKatakana, getLocalDateString, toHalfWidth } from './utils.js';
import { wholesalerMap } from './master_data.js';

// 連続スキャン用のグローバル変数
let continuousOrderModal, continuousOrderBtn, closeContinuousModalBtn;
let continuousBarcodeForm, continuousBarcodeInput, scannedItemsList, scannedItemsCount, processingIndicator;
let scanQueue = [];
let isProcessingQueue = false;

function formatBalance(balance) {
    if (typeof balance === 'number') {
        return balance.toFixed(2);
    }
    return balance;
}

/**
 * 発注リストに品目を追加、または既に存在する場合は数量を更新する関数
 * @param {object} productMaster - 追加する製品のマスターデータ
 */
function addOrUpdateOrderItem(productMaster) {
    const outputContainer = document.getElementById('order-candidates-output');
    const productCode = productMaster.productCode;
    const yjCode = productMaster.yjCode;

    // 1. 既に同じJANコードの行が存在するかチェック
    const existingRow = outputContainer.querySelector(`tr[data-jan-code="${productCode}"]`);
    if (existingRow) {
        // 存在する場合、数量を1増やす
        const quantityInput = existingRow.querySelector('.order-quantity-input');
        if (quantityInput) {
            quantityInput.value = parseInt(quantityInput.value, 10) + 1;
            window.showNotification(`「${productMaster.productName}」の数量を1増やしました。`, 'success');
        }
        return;
    }

    // 2. 新しい行のHTMLを生成
    let wholesalerOptions = '<option value="">--- 選択 ---</option>';
    wholesalerMap.forEach((name, code) => {
        const isSelected = (code === productMaster.supplierWholesale);
        wholesalerOptions += `<option value="${code}" ${isSelected ? 'selected' : ''}>${name}</option>`;
    });

    const actionCellHTML = `
        <td class="order-actions-cell">
            <div class="order-action-buttons">
                <button class="remove-order-item-btn btn">除外</button>
                <button class="go-to-master-btn btn" data-product-code="${productMaster.productCode}">ﾏｽﾀ</button>
                <button class="set-unorderable-btn btn" data-product-code="${productMaster.productCode}">発注不可</button>
                <button class="go-to-inv-adj-btn btn" data-yj-code="${productMaster.yjCode}">棚卸調整</button>
            </div>
        </td>
    `;

    const newRowHTML = `
        <tr data-jan-code="${productMaster.productCode}" 
            data-yj-code="${productMaster.yjCode}"
            data-product-name="${productMaster.productName}"
            data-package-form="${productMaster.packageForm}"
            data-jan-pack-inner-qty="${productMaster.janPackInnerQty}"
            data-yj-unit-name="${productMaster.yjUnitName}"
            data-yj-pack-unit-qty="${productMaster.yjPackUnitQty}"
            data-order-multiplier="${productMaster.yjPackUnitQty}"> 
            <td class="left">${productMaster.productName}</td>
            <td class="left">${productMaster.makerName || ''}</td>
            <td class="left">${productMaster.formattedPackageSpec}</td>
            <td><select class="wholesaler-select" style="width: 100%;">${wholesalerOptions}</select></td>
            <td>1包装 (${productMaster.yjPackUnitQty} ${productMaster.yjUnitName})</td>
            <td><input type="number" value="1" class="order-quantity-input" style="width: 80px;"></td>
            ${actionCellHTML}
        </tr>
    `;

    // 3. 対応するYJコードのグループを探す
    let yjGroupWrapper = outputContainer.querySelector(`.order-yj-group-wrapper[data-yj-code="${yjCode}"]`);

    if (yjGroupWrapper) {
        // 4a. 既存のYJグループに新しい行を追加
        const tbody = yjGroupWrapper.querySelector('tbody');
        tbody.insertAdjacentHTML('beforeend', newRowHTML);
    } else {
        // 4b. YJグループが存在しない場合、新しいグループ全体を作成
        const yjHeaderHTML = `
            <div class="agg-yj-header">
                <span>YJ: ${yjCode}</span>
                <span class="product-name">${productMaster.productName}</span>
            </div>`;
        
        const tableHTML = `
            <table class="data-table" style="margin-bottom: 20px;">
                <thead>
                    <tr>
                        <th style="width: 25%;">製品名（包装）</th>
                        <th style="width: 15%;">メーカー</th>
                        <th style="width: 15%;">包装仕様</th>
                        <th style="width: 20%;">卸業者</th>
                        <th style="width: 10%;">発注単位</th>
                        <th style="width: 5%;">発注数</th>
                        <th style="width: 10%;">操作</th>
                    </tr>
                </thead>
                <tbody>
                    ${newRowHTML}
                </tbody>
            </table>`;
        
        const newGroupHTML = `
            <div class="order-yj-group-wrapper" data-yj-code="${yjCode}">
                ${yjHeaderHTML}
                ${tableHTML}
            </div>`;
        
        outputContainer.insertAdjacentHTML('beforeend', newGroupHTML);
    }
    window.showNotification(`「${productMaster.productName}」を発注リストに追加しました。`, 'success');
}

/**
 * 連続スキャンモーダル内のスキャン済みリストの表示を更新する関数
 */
function updateScannedItemsDisplay() {
    const counts = scanQueue.reduce((acc, code) => {
        acc[code] = (acc[code] || 0) + 1;
        return acc;
    }, {});

    scannedItemsList.innerHTML = Object.entries(counts).map(([code, count]) => {
        return `<div class="scanned-item">
                    <span class="scanned-item-name">${code}</span>
                    <span class="scanned-item-count">x ${count}</span>
                </div>`;
    }).join('');
    scannedItemsCount.textContent = scanQueue.length;
}

/**
 * バックグラウンドでスキャンキューを処理する非同期関数
 */
async function processScanQueue() {
    if (isProcessingQueue) return; // 既に処理中なら何もしない

    isProcessingQueue = true;
    processingIndicator.classList.remove('hidden');

    while (scanQueue.length > 0) {
        const barcode = scanQueue.shift(); // キューから1件取り出す

        try {
            // GS1コードから製品情報を取得（既存のロジックを再利用）
            let gs1Code = '';
            if (barcode.startsWith('01') && barcode.length > 16) {
                gs1Code = barcode.substring(2, 16);
            } else {
                gs1Code = barcode;
            }

            const res = await fetch(`/api/product/by_gs1?gs1_code=${gs1Code}`);
            if (!res.ok) {
                if (res.status === 404) {
                    // マスターが存在しない場合は自動で作成
                    const newMaster = await createAndFetchMaster(gs1Code);
                    addOrUpdateOrderItem(newMaster);
                } else {
                    throw new Error(`サーバーエラー (HTTP ${res.status})`);
                }
            } else {
                const productMaster = await res.json();
                addOrUpdateOrderItem(productMaster);
            }
        } catch (err) {
            console.error(`バーコード[${barcode}]の処理に失敗:`, err);
            window.showNotification(`バーコード[${barcode}]の処理に失敗しました: ${err.message}`, 'error');
        } finally {
            // モーダル内の表示を更新して、処理済みの項目をリストから消す
            updateScannedItemsDisplay();
        }
    }

    isProcessingQueue = false;
    processingIndicator.classList.add('hidden');
}

function renderOrderCandidates(data, container, wholesalers) {
    if (!data || data.length === 0) {
        container.innerHTML = "<p>発注が必要な品目はありませんでした。</p>";
        return;
    }

    let html = '';
    data.forEach(yjGroup => {
        const yjShortfall = yjGroup.totalReorderPoint - (yjGroup.endingBalance || 0);

        html += `
            <div class="order-yj-group-wrapper" data-yj-code="${yjGroup.yjCode}">
                <div class="agg-yj-header" style="background-color: #ff0015ff;">
                    <span>YJ: ${yjGroup.yjCode}</span>
                    <span class="product-name">${yjGroup.productName}</span>
                    <span class="balance-info">
                        在庫: ${formatBalance(yjGroup.endingBalance)} | 
                        発注点: ${formatBalance(yjGroup.totalReorderPoint)} | 
                        不足数: ${formatBalance(yjShortfall)}
                    </span>
                </div>
                <table class="data-table" style="margin-bottom: 20px;">
                    <thead>
                        <tr>
                            <th style="width: 25%;">製品名（包装）</th>
                            <th style="width: 15%;">メーカー</th>
                            <th style="width: 15%;">包装仕様</th>
                            <th style="width: 20%;">卸業者</th>
                            <th style="width: 10%;">発注単位</th>
                            <th style="width: 5%;">発注数</th>
                            <th style="width: 10%;">操作</th>
                        </tr>
                    </thead>
                    <tbody>
        `;
        yjGroup.packageLedgers.forEach(pkg => {
            if (pkg.masters && pkg.masters.length > 0) {
                pkg.masters.forEach(master => {
                    const pkgShortfall = pkg.reorderPoint - (pkg.endingBalance || 0);
                    if (pkgShortfall > 0) {
                        const isProvisional = master.productCode.startsWith('99999') && master.productCode.length > 13;
                        const isOrderStopped = master.isOrderStopped === 1;
                        const isOrderable = !isProvisional && !isOrderStopped;

                        const rowClass = !isOrderable ? 'provisional-order-item' : '';
                        const disabledAttr = !isOrderable ? 'disabled' : '';

                        const recommendedOrder = master.yjPackUnitQty > 0 ? Math.ceil(pkgShortfall / master.yjPackUnitQty) : 0;
                        
                        let rowWholesalerOptions = '<option value="">--- 選択 ---</option>';
                        wholesalers.forEach(w => {
                            const isSelected = (w.code === master.supplierWholesale);
                            rowWholesalerOptions += `<option value="${w.code}" ${isSelected ? 'selected' : ''}>${w.name}</option>`;
                        });

                        let actionCellHTML = `
                            <td class="order-actions-cell">
                                <div class="order-action-buttons">
                        `;
                        if (isOrderable) {
                            actionCellHTML += '<button class="remove-order-item-btn btn">除外</button>';
                        } else {
                            actionCellHTML += '<button class="change-to-orderable-btn btn">発注に変更</button>';
                        }
                        actionCellHTML += `
                                    <button class="go-to-master-btn btn" data-product-code="${master.productCode}">ﾏｽﾀ</button>
                                    <button class="set-unorderable-btn btn" data-product-code="${master.productCode}">発注不可</button>
                                    <button class="go-to-inv-adj-btn btn" data-yj-code="${yjGroup.yjCode}">棚卸調整</button>
                                </div>
                            </td>
                        `;

                        html += `
                            <tr class="${rowClass}" 
                                data-jan-code="${master.productCode}" 
                                data-yj-code="${yjGroup.yjCode}"
                                data-product-name="${master.productName}"
                                data-package-form="${master.packageForm}"
                                data-jan-pack-inner-qty="${master.janPackInnerQty}"
                                data-yj-unit-name="${master.yjUnitName}"
                                data-yj-pack-unit-qty="${master.yjPackUnitQty}"
                                data-order-multiplier="${master.yjPackUnitQty}"> 
                                <td class="left">${master.productName}</td>
                                <td class="left">${master.makerName || ''}</td>
                                <td class="left">${master.formattedPackageSpec}</td>
                                <td><select class="wholesaler-select" style="width: 100%;" ${disabledAttr}>${rowWholesalerOptions}</select></td>
                                <td>1包装 (${master.yjPackUnitQty} ${master.yjUnitName})</td>
                                <td><input type="number" value="${recommendedOrder}" class="order-quantity-input" style="width: 80px;" ${disabledAttr}></td>
                                ${actionCellHTML}
                            </tr>
                        `;
                    }
                });
            }
        });
        html += `</tbody></table></div>`;
    });
    container.innerHTML = html;
}

async function handleOrderBarcodeScan(e) {
    e.preventDefault();
    const barcodeInput = document.getElementById('order-barcode-input');
    const inputValue = barcodeInput.value.trim();
    if (!inputValue) return;

    let gs1Code = '';
    if (inputValue.startsWith('01') && inputValue.length > 16) {
        gs1Code = inputValue.substring(2, 16);
    } else {
        gs1Code = inputValue;
    }

    if (!gs1Code) {
        window.showNotification('有効なGS1コードではありません。', 'error');
        return;
    }

    window.showLoading('製品情報を検索中...');
    try {
        const res = await fetch(`/api/product/by_gs1?gs1_code=${gs1Code}`);
        if (!res.ok) {
            if (res.status === 404) {
                if (confirm(`このGS1コードはマスターに登録されていません。\n新規マスターを作成して発注リストに追加しますか？`)) {
                    const newMaster = await createAndFetchMaster(gs1Code);
                    addOrUpdateOrderItem(newMaster);
                } else {
                    throw new Error('このGS1コードはマスターに登録されていません。');
                }
            } else {
                throw new Error('製品情報の検索に失敗しました。');
            }
        } else {
            const productMaster = await res.json();
            addOrUpdateOrderItem(productMaster);
        }
        barcodeInput.value = '';
        barcodeInput.focus();
    } catch (err) {
        window.showNotification(err.message, 'error');
    } finally {
        window.hideLoading();
    }
}

async function createAndFetchMaster(gs1Code) {
    window.showLoading('新規マスターを作成中...');
    try {
        const productCode = gs1Code.length === 14 ? gs1Code.substring(1) : gs1Code;

        const createRes = await fetch('/api/master/create_provisional', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ gs1Code, productCode }),
        });
        const createData = await createRes.json();
        if (!createRes.ok) {
            throw new Error(createData.message || 'マスターの作成に失敗しました。');
        }
        window.showNotification(`新規マスターを作成しました (YJ: ${createData.yjCode})`, 'success');
        window.showLoading('作成したマスター情報を取得中...');
        const fetchRes = await fetch(`/api/product/by_gs1?gs1_code=${gs1Code}`);
        if (!fetchRes.ok) {
            throw new Error('作成されたマスター情報の取得に失敗しました。');
        }
        const newMaster = await fetchRes.json();
        return newMaster;

    } catch (err) {
        throw err;
    }
}

export function initOrders() {
    const view = document.getElementById('order-view');
    if (!view) return;

    const runBtn = document.getElementById('generate-order-candidates-btn');
    const outputContainer = document.getElementById('order-candidates-output');
    const kanaNameInput = document.getElementById('order-kanaName');
    const dosageFormInput = document.getElementById('order-dosageForm');
    const coefficientInput = document.getElementById('order-reorder-coefficient');
    const createCsvBtn = document.getElementById('createOrderCsvBtn');
    const barcodeInput = document.getElementById('order-barcode-input');
    const barcodeForm = document.getElementById('order-barcode-form');
    const shelfNumberInput = document.getElementById('order-shelf-number');

    continuousOrderModal = document.getElementById('continuous-order-modal');
    continuousOrderBtn = document.getElementById('continuous-order-btn');
    closeContinuousModalBtn = document.getElementById('close-continuous-modal-btn');
    continuousBarcodeForm = document.getElementById('continuous-barcode-form');
    continuousBarcodeInput = document.getElementById('continuous-barcode-input');
    scannedItemsList = document.getElementById('scanned-items-list');
    scannedItemsCount = document.getElementById('scanned-items-count');
    processingIndicator = document.getElementById('processing-indicator');

    continuousOrderBtn.addEventListener('click', () => {
        scanQueue = [];
        updateScannedItemsDisplay();
        continuousOrderModal.classList.remove('hidden');
        document.body.classList.add('modal-open');
        setTimeout(() => continuousBarcodeInput.focus(), 100);
    });

    closeContinuousModalBtn.addEventListener('click', () => {
        continuousOrderModal.classList.add('hidden');
        document.body.classList.remove('modal-open');
    });

    continuousBarcodeForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const barcode = continuousBarcodeInput.value.trim();
        if (barcode) {
            scanQueue.push(barcode);
            updateScannedItemsDisplay();
            processScanQueue();
        }
        continuousBarcodeInput.value = '';
    });
    
    if (barcodeForm) {
        barcodeForm.addEventListener('submit', handleOrderBarcodeScan);
    }
    
    runBtn.addEventListener('click', async () => {
        window.showLoading();
        const params = new URLSearchParams({
            kanaName: hiraganaToKatakana(kanaNameInput.value),
            dosageForm: dosageFormInput.value,
            shelfNumber: shelfNumberInput.value,
            coefficient: coefficientInput.value,
        });

        try {
            const res = await fetch(`/api/orders/candidates?${params.toString()}`);
            if (!res.ok) {
                const errText = await res.text();
                throw new Error(errText || 'List generation failed');
            }
            const data = await res.json();
            
            renderOrderCandidates(data.candidates, outputContainer, data.wholesalers || []);

        } catch (err) {
            outputContainer.innerHTML = `<p style="color:red;">エラー: ${err.message}</p>`;
        } finally {
            window.hideLoading();
        }
    });

    createCsvBtn.addEventListener('click', async () => {
        const rows = outputContainer.querySelectorAll('tbody tr');
        if (rows.length === 0) {
            window.showNotification('発注する品目がありません。', 'error');
            return;
        }

        const backorderPayload = [];
        let csvContent = "";
        let hasItemsToOrder = false;

        rows.forEach(row => {
            if (row.classList.contains('provisional-order-item')) {
                return; 
            }
            
            const quantityInput = row.querySelector('.order-quantity-input');
            const quantity = parseInt(quantityInput.value, 10);
            
            if (quantity > 0) {
                hasItemsToOrder = true;
                
                const janCode = row.dataset.janCode;
                const productName = row.cells[0].textContent;
                const wholesalerCode = row.querySelector('.wholesaler-select').value;
    
                const csvRow = [janCode, `"${productName}"`, quantity, wholesalerCode].join(',');
                csvContent += csvRow + "\r\n";

                const orderMultiplier = parseFloat(row.dataset.orderMultiplier) || 0;
                
                backorderPayload.push({
                    yjCode: row.dataset.yjCode,
                    packageForm: row.dataset.packageForm,
                    janPackInnerQty: parseFloat(row.dataset.janPackInnerQty),
                    yjUnitName: row.dataset.yjUnitName,
                    yjQuantity: quantity * orderMultiplier,
                    productName: row.dataset.productName,
                    yjPackUnitQty: parseFloat(row.dataset.yjPackUnitQty) || 0,
                });
            }
        });

        if (!hasItemsToOrder) {
            window.showNotification('発注数が1以上の品目がありません。', 'error');
            return;
        }

        window.showLoading();
        try {
            const res = await fetch('/api/orders/place', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(backorderPayload),
            });
            const resData = await res.json();
            if (!res.ok) throw new Error(resData.message || '発注残の登録に失敗しました。');
            
            window.showNotification(resData.message, 'success');
            const sjisArray = Encoding.convert(csvContent, {
                to: 'SJIS',
                from: 'UNICODE',
                type: 'array'
            });
            const sjisUint8Array = new Uint8Array(sjisArray);

            const blob = new Blob([sjisUint8Array], { type: 'text/csv' });
            const link = document.createElement("a");
            const url = URL.createObjectURL(blob);
            const now = new Date();
            const timestamp = `${now.getFullYear()}${(now.getMonth()+1).toString().padStart(2, '0')}${now.getDate().toString().padStart(2, '0')}_${now.getHours().toString().padStart(2, '0')}${now.getMinutes().toString().padStart(2, '0')}${now.getSeconds().toString().padStart(2, '0')}`;
            const fileName = `発注書_${timestamp}.csv`;
            
            link.setAttribute("href", url);
            link.setAttribute("download", fileName);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        } catch(err) {
            window.showNotification(err.message, 'error');
        } finally {
            window.hideLoading();
        }
    });

    outputContainer.addEventListener('click', async (e) => {
        const target = e.target;
        const row = target.closest('tr');

        if (target.classList.contains('go-to-master-btn')) {
            const productCode = target.dataset.productCode;
            document.dispatchEvent(new CustomEvent('navigateToMasterEdit', {
                detail: { productCode },
                bubbles: true
            }));
        } else if (target.classList.contains('set-unorderable-btn')) {
            const productCode = target.dataset.productCode;
            const productName = row ? row.cells[0].textContent : productCode;
            if (!confirm(`「${productName}」を発注不可に設定しますか？\nこの品目は今後、不足品リストに表示されなくなります。`)) {
                return;
            }
            window.showLoading('マスターを更新中...');
            try {
                const res = await fetch('/api/master/set_order_stopped', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ productCode: productCode, status: 1 }),
                });
                const resData = await res.json();
                if (!res.ok) throw new Error(resData.message || '更新に失敗しました。');

                if (row) {
                    row.classList.add('provisional-order-item');
                    row.querySelector('.wholesaler-select').disabled = true;
                    row.querySelector('.order-quantity-input').disabled = true;
                    target.disabled = true; // ボタン自体も無効化
                }
                window.showNotification(`「${productName}」を発注不可に設定しました。`, 'success');

            } catch(err) {
                window.showNotification(err.message, 'error');
            } finally {
                window.hideLoading();
            }
        } else if (target.classList.contains('go-to-inv-adj-btn')) {
            const yjCode = target.dataset.yjCode;
            document.dispatchEvent(new CustomEvent('navigateToInventoryAdjustment', {
                detail: { yjCode },
                bubbles: true
            }));
        } else if (target.classList.contains('change-to-orderable-btn')) {
            if (row) {
                row.classList.remove('provisional-order-item');
                row.querySelector('.wholesaler-select').disabled = false;
                row.querySelector('.order-quantity-input').disabled = false;

                target.textContent = '除外';
                target.classList.remove('change-to-orderable-btn');
                target.classList.add('remove-order-item-btn');
            }
        } else if (target.classList.contains('remove-order-item-btn')) {
            const tbody = row.closest('tbody');
            const table = tbody.closest('table');
            const wrapper = table.closest('.order-yj-group-wrapper');
            row.remove();
            
            if (tbody.children.length === 0 && wrapper) {
                wrapper.remove();
            }
        }
    });
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\precomp_details_table.js -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\precomp_details_table.js
import { showModal } from './inout_modal.js';
import { createUploadTableHTML } from './common_table.js';
import { clientMap } from './master_data.js';

let tableBody, addRowBtn, outputContainer;

function createRowHTML(rec = {}) {
    const isNew = !rec.janCode && !rec.productCode;
    const rowId = isNew ? `new-${Date.now()}` : rec.id;
    const productData = isNew ? {} : rec;
    const janQuantity = rec.janQuantity || 1;
    const yjQuantity = janQuantity * (rec.janPackInnerQty || 0);

    const topRow = `
        <tr class="data-row" data-row-id="${rowId}" data-product='${JSON.stringify(productData)}'>
            <td rowspan="2" class="center"><button class="delete-row-btn btn">削除</button><button class="insert-row-btn btn" style="margin-top: 4px;">挿入</button></td>
            <td>${rec.transactionDate || ''}</td>
            <td class="yj-jan-code">${rec.yjCode || ''}</td>
            <td colspan="2" class="product-name-cell left" style="cursor: pointer; text-decoration: underline; color: blue;">${rec.productName || 'ここをクリックして製品を検索'}</td>
            <td></td>
            <td class="right yj-quantity-cell">${yjQuantity.toFixed(2)}</td>
            <td class="right yj-pack-unit-qty-cell">${rec.yjPackUnitQty || ''}</td>
            <td class="yj-unit-name-cell">${rec.yjUnitName || ''}</td>
            <td></td><td></td><td></td>
            <td class="left client-code-cell">${clientMap.get(rec.clientCode) || rec.clientCode || ''}</td>
            <td class="right line-number-cell">${rec.lineNumber || ''}</td>
        </tr>`;

    const bottomRow = `
        <tr class="data-row-bottom">
            <td>予製</td>
            <td class="yj-jan-code jan-code-cell">${rec.janCode || rec.productCode || ''}</td>
            <td class="left package-spec-cell">${rec.packageSpec || rec.formattedPackageSpec || ''}</td>
            <td class="left maker-name-cell">${rec.makerName || ''}</td>
            <td class="left usage-classification-cell">${rec.usageClassification || ''}</td>
            <td><input type="number" name="janQuantity" value="${janQuantity}" step="any"></td>
            <td class="right jan-pack-unit-qty-cell">${rec.janPackUnitQty || ''}</td>
            <td class="jan-unit-name-cell">${rec.janUnitName || ''}</td>
            <td></td><td></td><td></td>
            <td class="left receipt-number-cell">${rec.receiptNumber || ''}</td>
            <td></td>
        </tr>`;
    return topRow + bottomRow;
}

function recalculateRow(quantityInputElement) {
    const lowerRow = quantityInputElement.closest('tr.data-row-bottom');
    if (!lowerRow) return;
    const topRow = lowerRow.previousElementSibling;
    if (!topRow || !topRow.classList.contains('data-row')) return;

    const productDataString = topRow.dataset.product;
    if (!productDataString || productDataString === '{}') return;
    const productData = JSON.parse(productDataString);

    const janQuantity = parseFloat(quantityInputElement.value) || 0;
    const yjQuantity = janQuantity * (productData.janPackInnerQty || 0);
    const yjQuantityCell = topRow.querySelector('.yj-quantity-cell');
    if (yjQuantityCell) {
        yjQuantityCell.textContent = yjQuantity.toFixed(2);
    }
}

export function populateDetailsTable(records) {
    if (!tableBody) return;
    if (!records || records.length === 0) {
        clearDetailsTable();
        return;
    }
    tableBody.innerHTML = records.map(createRowHTML).join('');
}

export function clearDetailsTable() {
    if (tableBody) {
        tableBody.innerHTML = '<tr><td colspan="14">患者番号を入力して「呼び出し」を押してください。</td></tr>';
    }
}

export function getDetailsData() {
    const records = [];
    outputContainer.querySelectorAll('tr.data-row[data-row-id]').forEach(row => {
        const productDataString = row.dataset.product;
        if (!productDataString || productDataString === '{}') return;

        const janQuantity = parseFloat(row.nextElementSibling.querySelector('input[name="janQuantity"]').value) || 0;
        if (janQuantity > 0) {
            const productData = JSON.parse(productDataString);
            const code = productData.productCode || productData.janCode; 

            if (code) { 
                records.push({
                    productCode: code,
                    janQuantity: janQuantity,
                });
            }
        }
    });
    return records;
}

export function initDetailsTable() {
    outputContainer = document.getElementById('precomp-details-container');
    addRowBtn = document.getElementById('precomp-add-row-btn');
    if (!outputContainer || !addRowBtn) return;
    outputContainer.innerHTML = createUploadTableHTML('precomp-details-table');
    tableBody = outputContainer.querySelector('tbody');
    clearDetailsTable();

    addRowBtn.addEventListener('click', () => {
        if (tableBody.querySelector('td[colspan="14"]')) {
            tableBody.innerHTML = '';
        }
        tableBody.insertAdjacentHTML('beforeend', createRowHTML());
    });
    tableBody.addEventListener('input', (e) => {
        if (e.target.matches('input[name="janQuantity"]')) {
            recalculateRow(e.target);
        }
    });
    tableBody.addEventListener('click', (e) => {
        const target = e.target;
        if (target.classList.contains('delete-row-btn')) {
            const topRow = target.closest('tr');
            const bottomRow = topRow.nextElementSibling;
            topRow.remove();
            if (bottomRow) bottomRow.remove();
            if (tableBody.children.length === 0) {
                clearDetailsTable();
            }
        }

        if (target.classList.contains('insert-row-btn')) {
			const topRow = target.closest('tr');
			const bottomRow = topRow.nextElementSibling;
			bottomRow.insertAdjacentHTML('afterend', createRowHTML());
		}

        if (target.classList.contains('product-name-cell')) {
            const activeRow = target.closest('tr');
            // この画面では /api/masters/search_all (製品マスター検索) を使用します
            showModal(activeRow, (selectedProduct, targetRow) => {
                targetRow.dataset.product = JSON.stringify(selectedProduct);
                const lowerRow = targetRow.nextElementSibling;

                targetRow.querySelector('.yj-jan-code').textContent = selectedProduct.yjCode || '';
                targetRow.querySelector('.product-name-cell').textContent = selectedProduct.productName || '';
                targetRow.querySelector('.yj-pack-unit-qty-cell').textContent = selectedProduct.yjPackUnitQty || '';
                targetRow.querySelector('.yj-unit-name-cell').textContent = selectedProduct.yjUnitName || '';
                
                lowerRow.querySelector('.jan-code-cell').textContent = selectedProduct.janCode || selectedProduct.productCode || '';
                lowerRow.querySelector('.package-spec-cell').textContent = selectedProduct.packageSpec || selectedProduct.formattedPackageSpec || '';
                lowerRow.querySelector('.maker-name-cell').textContent = selectedProduct.makerName || '';
                lowerRow.querySelector('.usage-classification-cell').textContent = selectedProduct.usageClassification || '';
                lowerRow.querySelector('.jan-pack-unit-qty-cell').textContent = selectedProduct.janPackUnitQty || '';
                lowerRow.querySelector('.jan-unit-name-cell').textContent = selectedProduct.janUnitName || '';
                const quantityInput = lowerRow.querySelector('input[name="janQuantity"]');
                recalculateRow(quantityInput);
                quantityInput.focus();
                quantityInput.select();
            }, { searchApi: '/api/masters/search_all' });
        }
    });
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\precomp_header.js -----
import { getDetailsData, clearDetailsTable, populateDetailsTable } from './precomp_details_table.js';

let patientNumberInput, saveBtn, loadBtn, clearBtn, exportBtn, importBtn, importInput, exportAllBtn, importAllBtn, importAllInput;

export function resetHeader() {
    if (patientNumberInput) {
        patientNumberInput.value = '';
    }
}

export function initHeader() {
    patientNumberInput = document.getElementById('precomp-patient-number');
    saveBtn = document.getElementById('precomp-save-btn');
    loadBtn = document.getElementById('precomp-load-btn');
    clearBtn = document.getElementById('precomp-clear-btn');
    exportBtn = document.getElementById('precomp-export-btn');
    importBtn = document.getElementById('precomp-import-btn');
    importInput = document.getElementById('precomp-import-input');
    exportAllBtn = document.getElementById('precomp-export-all-btn');
    importAllBtn = document.getElementById('precomp-import-all-btn');
    importAllInput = document.getElementById('precomp-import-all-input');

    // ▼▼▼【ここから追加】▼▼▼
    const toggleStatusBtn = document.getElementById('precomp-toggle-status-btn');

    if (toggleStatusBtn) {
        toggleStatusBtn.addEventListener('click', async () => {
            const patientNumber = patientNumberInput.value.trim();
            if (!patientNumber) {
                window.showNotification('患者番号を入力してください。', 'error');
                return;
            }

            // ボタンの現在のテキストに応じてAPIを決定
            const isSuspending = toggleStatusBtn.textContent === '予製中断';
            const endpoint = isSuspending ? '/api/precomp/suspend' : '/api/precomp/resume';
            const actionText = isSuspending ? '中断' : '再開';

            if (!confirm(`患者番号: ${patientNumber} の予製を${actionText}します。よろしいですか？`)) {
                return;
            }

            window.showLoading();
            try {
                const res = await fetch(endpoint, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ patientNumber }),
                });

                const resData = await res.json();
                if (!res.ok) throw new Error(resData.message || `${actionText}に失敗しました。`);

                window.showNotification(resData.message, 'success');
                // 状態変更後にビューをリフレッシュ
                loadBtn.click();
            } catch (err) {
                window.showNotification(err.message, 'error');
            } finally {
                window.hideLoading();
            }
        });
    }
    // ▲▲▲【追加ここまで】▲▲▲

    if (!patientNumberInput || !saveBtn || !loadBtn || !clearBtn) return;
    
    loadBtn.addEventListener('click', async () => {
        const patientNumber = patientNumberInput.value.trim();
        if (!patientNumber) {
            window.showNotification('患者番号を入力してください。', 'error');
            return;
        }
        window.showLoading();
        try {
            const res = await fetch(`/api/precomp/load?patientNumber=${encodeURIComponent(patientNumber)}`);
            if (!res.ok) throw new Error('データの呼び出しに失敗しました。');
            
            const responseData = await res.json();
            
            populateDetailsTable(responseData.records);

            const toggleBtn = document.getElementById('precomp-toggle-status-btn');
            const detailsContainer = document.getElementById('precomp-details-container');

            if (responseData.status === 'inactive') {
                if(toggleBtn) {
                    toggleBtn.textContent = '予製再開';
                    toggleBtn.style.backgroundColor = '#198754';
                }
                if(detailsContainer) detailsContainer.classList.add('is-inactive');
                window.showNotification('この患者の予製は中断中です。', 'success');
            } else {
                 if(toggleBtn) {
                    toggleBtn.textContent = '予製中断';
                    toggleBtn.style.backgroundColor = '';
                 }
                 if(detailsContainer) detailsContainer.classList.remove('is-inactive');
            }
        } catch (err) {
            window.showNotification(err.message, 'error');
            clearDetailsTable();
        } finally {
            window.hideLoading();
        }
    });

    clearBtn.addEventListener('click', async () => {
        const patientNumber = patientNumberInput.value.trim();
        if (!patientNumber) {
            window.showNotification('削除する患者番号を入力してください。', 'error');
            return;
        }
        if (!confirm(`患者番号: ${patientNumber} の予製データを完全に削除します。この操作は元に戻せません。よろしいですか？`)) {
            return;
        }
    
        window.showLoading();
        try {
            const res = await fetch(`/api/precomp/clear?patientNumber=${encodeURIComponent(patientNumber)}`, { method: 'DELETE' });
            const resData = await res.json();
            if (!res.ok) throw new Error(resData.message || '削除に失敗しました。');
            window.showNotification(resData.message, 'success');
            resetHeader();
            clearDetailsTable();
        } catch (err) {
            window.showNotification(err.message, 'error');
        } finally {
            window.hideLoading();
        }
    });
    
    saveBtn.addEventListener('click', async () => {
        const patientNumber = patientNumberInput.value.trim();
        if (!patientNumber) {
            window.showNotification('患者番号を入力してください。', 'error');
            return;
        }
        const records = getDetailsData();
        if (records.length === 0 && !confirm(`保存対象の品目がありません。患者番号: ${patientNumber} の予製データをすべて削除しますがよろしいですか？`)) {
            return;
        }
        if (records.length > 0 && !confirm(`患者番号: ${patientNumber} の予製データを保存します。よろしいですか？`)) {
            return;
        }
        const payload = { patientNumber, records };
  
        window.showLoading();
        try {
            const res = await fetch('/api/precomp/save', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload),
            });
            const resData = await res.json();
            if (!res.ok) throw new Error(resData.message || '保存に失敗しました。');
            window.showNotification(resData.message, 'success');
            resetHeader();
            clearDetailsTable();
        } catch (err) {
            window.showNotification(`エラー: ${err.message}`, 'error');
        } finally {
            window.hideLoading();
        }
    });
    
    exportBtn.addEventListener('click', () => {
        const patientNumber = patientNumberInput.value.trim();
        if (!patientNumber) {
            window.showNotification('エクスポートする患者番号を入力してください。', 'error');
            return;
        }
        window.location.href = `/api/precomp/export?patientNumber=${encodeURIComponent(patientNumber)}`;
    });
    
    exportAllBtn.addEventListener('click', () => {
        if (confirm('全患者の予製データをCSVファイルとしてエクスポートします。よろしいですか？')) {
            window.location.href = '/api/precomp/export_all';
        }
    });

    importBtn.addEventListener('click', () => {
        const patientNumber = patientNumberInput.value.trim();
        if (!patientNumber) {
            window.showNotification('インポート先の患者番号を入力してください。', 'error');
            return;
        }
        importInput.click();
    });
    
    importInput.addEventListener('change', async (e) => {
        const file = e.target.files[0];
        const patientNumber = patientNumberInput.value.trim();
        if (!file || !patientNumber) return;

        const formData = new FormData();
        formData.append('file', file);
        formData.append('patientNumber', patientNumber);

        window.showLoading();
        try {
            const res = await fetch('/api/precomp/import', {
                method: 'POST',
                body: formData,
            });
            const resData = await res.json();
            if (!res.ok) throw new Error(resData.message || 'インポートに失敗しました。');
            
            window.showNotification(resData.message, 'success');
            loadBtn.click(); 
        } catch (err) {
            window.showNotification(`エラー: ${err.message}`, 'error');
        } finally {
            window.hideLoading();
            e.target.value = '';
        }
    });

    importAllBtn.addEventListener('click', () => {
        if (!confirm('複数患者の予製データを一括でインポートします。\nCSVの1列目には患者番号が必要です。\n既存のデータは上書きされます。よろしいですか？')) {
            return;
        }
        importAllInput.click();
    });

    importAllInput.addEventListener('change', async (e) => {
        const file = e.target.files[0];
        if (!file) return;

        const formData = new FormData();
        formData.append('file', file);

        window.showLoading();
        try {
            const res = await fetch('/api/precomp/import_all', {
                method: 'POST',
                body: formData,
            });
            const resData = await res.json();
            if (!res.ok) throw new Error(resData.message || '全件インポートに失敗しました。');
            
            window.showNotification(resData.message, 'success');
            resetHeader();
            clearDetailsTable();
        } catch (err) {
            window.showNotification(`エラー: ${err.message}`, 'error');
        } finally {
            window.hideLoading();
            e.target.value = '';
        }
    });
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\precomp.js -----
import { initHeader, resetHeader } from './precomp_header.js';
import { initDetailsTable, clearDetailsTable } from './precomp_details_table.js';

export function resetPrecompView() {
    resetHeader();
    clearDetailsTable();
}

export function initPrecomp() {
    initHeader();
    initDetailsTable();
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\pricing.js -----
import { wholesalerMap } from './master_data.js';
let view, wholesalerSelect, exportBtn, uploadInput, bulkUpdateBtn, outputContainer, makerFilterInput;
let fullPricingData = []; 
let orderedWholesalers = []; 
let setLowestPriceBtn;
let unregisteredFilterCheckbox;
let exportUnregisteredBtn; 
let lastSelectedWholesaler = '';

function renderComparisonTable(data) {
    if (!data || data.length === 0) {
        outputContainer.innerHTML = '<p>表示対象のデータがありませんでした。</p>';
        return;
    }

    const wholesalerHeaders = orderedWholesalers.length > 0 ?
        orderedWholesalers.map(w => `<th>${w}</th>`).join('') : '';
    const wholesalerReverseMap = new Map();
    for (const [code, name] of wholesalerMap.entries()) {
        wholesalerReverseMap.set(name, code);
    }

    let tableHTML = `
        <table class="data-table">
            <thead>
                <tr>
                    <th rowspan="2">製品名</th>
                    <th rowspan="2">包装</th>
                    <th rowspan="2">メーカー</th>
                    <th rowspan="2">現納入価</th>
                    <th colspan="${orderedWholesalers.length || 1}">卸提示価格</th>
                    <th rowspan="2">採用卸</th>
                    <th rowspan="2">決定納入価</th>
                </tr>
                <tr>
                    ${wholesalerHeaders}
                </tr>
            </thead>
            <tbody>
    `;
    data.forEach(p => {
        const productCode = p.productCode;
        let wholesalerOptions = '<option value="">--- 選択 ---</option>';
        for (const [wCode, wName] of wholesalerMap.entries()) {
            const isSelected = (wCode === p.supplierWholesale);
            wholesalerOptions += `<option value="${wCode}" ${isSelected ? 'selected' : ''}>${wName}</option>`;
        }
        const quoteCells = orderedWholesalers.length > 0 
            ? orderedWholesalers.map(w => {
            const price = (p.quotes || {})[w];
            if (price === undefined) return '<td>-</td>';
            const lowestPrice = Math.min(...Object.values(p.quotes || {}).filter(v => typeof v === 'number'));
            const style = (price === lowestPrice) ? 'style="background-color: #d1e7dd; font-weight: bold;"' : '';
            return `<td class="right" ${style}>${price.toFixed(2)}</td>`;
        }).join('') : '<td>-</td>';
        const initialPrice = p.purchasePrice > 0 ? p.purchasePrice.toFixed(2) : '';
        tableHTML += `
            <tr data-product-code="${productCode}">
                <td class="left">${p.productName}</td>
                <td class="left">${p.formattedPackageSpec || ''}</td>
                <td class="left">${p.makerName}</td>
                <td class="right">${p.purchasePrice.toFixed(2)}</td>
                ${quoteCells}
                <td><select class="supplier-select">${wholesalerOptions}</select></td>
                <td><input type="number" class="manual-price-input" step="0.01" style="width: 100px;" value="${initialPrice}"></td>
            </tr>
        `;
    });
    tableHTML += `</tbody></table>`;
    outputContainer.innerHTML = tableHTML;
}

async function sendUpdatePayload(payload) {
    if (payload.length === 0) {
        window.showNotification('更新するデータがありません。', 'error');
        return;
    }
    window.showLoading();
    try {
        const res = await fetch('/api/pricing/update', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload),
        });
        const resData = await res.json();
        if (!res.ok) {
            throw new Error(resData.message || 'マスターの更新に失敗しました。');
        }
        window.showNotification(resData.message, 'success');
        payload.forEach(update => {
            const product = fullPricingData.find(p => p.productCode === update.productCode);
            if (product) {
                product.purchasePrice = update.newPrice;
                product.supplierWholesale = update.newWholesaler;
            }
        });
        applyFiltersAndRender();
    } catch (err) {
        window.showNotification(err.message, 'error');
    } finally {
        window.hideLoading();
    }
}

async function handleBulkUpdate() {
    if (!confirm('表示されている全ての行の内容でマスターデータを一括更新します。よろしいですか？')) {
        return;
    }
    const rows = outputContainer.querySelectorAll('tbody tr');
    const payload = [];
    rows.forEach(row => {
        const productCode = row.dataset.productCode;
        const supplierSelect = row.querySelector('.supplier-select');
        const manualPriceInput = row.querySelector('.manual-price-input');
        const selectedWholesalerCode = supplierSelect.value;
        const price = parseFloat(manualPriceInput.value);
        if (productCode && selectedWholesalerCode && !isNaN(price)) {
            payload.push({ productCode, newPrice: price, newWholesaler: selectedWholesalerCode });
        } else if (productCode && !selectedWholesalerCode) {
             payload.push({ productCode, newPrice: 0, newWholesaler: '' });
        }
    });
    await sendUpdatePayload(payload);
}

function applyFiltersAndRender() {
    let dataToRender = fullPricingData;
    if (unregisteredFilterCheckbox.checked) {
        dataToRender = dataToRender.filter(p => !p.supplierWholesale);
    }
    const filterText = makerFilterInput.value.trim().toLowerCase();
    if (filterText) {
        dataToRender = dataToRender.filter(p => 
            p.makerName && p.makerName.toLowerCase().includes(filterText)
        );
    }
    renderComparisonTable(dataToRender); 
}

async function handleUpload() {
    const files = Array.from(uploadInput.files);
    if (files.length === 0) return;
    window.showLoading();
    try {
        const formData = new FormData();
        const wholesalerNames = [];
        const processedFiles = [];

        files.forEach(file => {
            const match = file.name.match(/^(\d+)_/);
            const priority = match ? parseInt(match[1], 10) : Infinity;
            
            // ファイル名から卸名部分を抽出（例: 1_価格見積依頼_卸名_... -> 卸名）
            const nameParts = file.name.replace(/^\d+_/, '').split('_');
            if (nameParts.length > 1) {
                 processedFiles.push({ file: file, priority: priority, wholesalerName: nameParts[1] });
            } else {
                 window.showNotification(`ファイル名から卸名を抽出できませんでした: ${file.name}`, 'error');
            }
        });

        // 優先順位でファイルをソート
        processedFiles.sort((a, b) => a.priority - b.priority);

        // ソートされた順にFormDataに追加
        processedFiles.forEach(item => {
            formData.append('files', item.file);
            wholesalerNames.push(item.wholesalerName);
        });

        if (formData.getAll('files').length === 0) {
            throw new Error('処理できる有効なファイルがありませんでした。');
        }
        
        wholesalerNames.forEach(name => formData.append('wholesalerNames', name));

        const res = await fetch('/api/pricing/upload', {
            method: 'POST',
            body: formData,
        });
        if (!res.ok) {
            const errText = await res.text();
            throw new Error(errText || 'アップロード処理に失敗しました。'); 
        }
        
        const responseData = await res.json();
        fullPricingData = responseData.productData;
        orderedWholesalers = responseData.wholesalerOrder;
        applyFiltersAndRender();
    } catch (err) {
        window.showNotification(err.message, 'error');
    } finally {
        window.hideLoading();
        uploadInput.value = '';
    }
}

async function handleExport(unregisteredOnly = false) {
    const wholesalerSelectEl = document.getElementById('pricing-wholesaler-select');
    const selectedWholesalerName = wholesalerSelectEl.options[wholesalerSelectEl.selectedIndex].text;
    if (!wholesalerSelectEl.value) {
        window.showNotification('テンプレートを出力する卸業者を選択してください。', 'error'); 
        return;
    }

    const date = new Date();
    const dateStr = `${date.getFullYear()}${(date.getMonth()+1).toString().padStart(2, '0')}${date.getDate().toString().padStart(2, '0')}`;
    
    const params = new URLSearchParams({
        wholesalerName: selectedWholesalerName,
        unregisteredOnly: unregisteredOnly,
        date: dateStr,
    });

    window.location.href = `/api/pricing/export?${params.toString()}`;
}

async function loadInitialMasters() {
    outputContainer.innerHTML = '<p>製品マスターを読み込んでいます...</p>';
    window.showLoading();
    try {
        const res = await fetch('/api/pricing/all_masters');
        if (!res.ok) throw new Error('製品マスターの読み込みに失敗しました。');
        const responseData = await res.json();
        fullPricingData = responseData;
        orderedWholesalers = [];
        applyFiltersAndRender();
    } catch(err) {
        outputContainer.innerHTML = `<p style="color:red;">${err.message}</p>`;
    } finally {
        window.hideLoading();
    }
}

function loadWholesalerDropdown() {
    wholesalerSelect.innerHTML = '<option value="">選択してください</option>';
    for (const [code, name] of wholesalerMap.entries()) {
        const opt = document.createElement('option');
        opt.value = code; 
        opt.textContent = name; 
        wholesalerSelect.appendChild(opt); 
    }
    if (lastSelectedWholesaler) {
        wholesalerSelect.value = lastSelectedWholesaler;
    }
}

function handleSetLowestPrice() {
    const rows = outputContainer.querySelectorAll('tbody tr');
    if (rows.length === 0) return;
    const wholesalerReverseMap = new Map();
    for (const [code, name] of wholesalerMap.entries()) {
        wholesalerReverseMap.set(name, code);
    }

    rows.forEach(row => {
        const productCode = row.dataset.productCode;
        const productData = fullPricingData.find(p => p.productCode === productCode);
        if (!productData || !productData.quotes) return;

        let lowestPrice = Infinity;
        let bestWholesalerName = '';
        
        orderedWholesalers.forEach(wholesalerName => {
            const price = productData.quotes[wholesalerName];
 
            if (price !== undefined && price < lowestPrice) {
                lowestPrice = price;
                bestWholesalerName = wholesalerName;
            }
        });

        if (bestWholesalerName) {
            const bestWholesalerCode = wholesalerReverseMap.get(bestWholesalerName);
            const supplierSelect = row.querySelector('.supplier-select');
            const priceInput = row.querySelector('.manual-price-input');
            
            if(supplierSelect) supplierSelect.value = bestWholesalerCode;
            if(priceInput) priceInput.value = lowestPrice.toFixed(2);
        }
    });
    window.showNotification('すべての品目を最安値に設定しました。', 'success');
}

function handleSupplierChange(event) {
    if (!event.target.classList.contains('supplier-select')) return;
    const row = event.target.closest('tr');
    const productCode = row.dataset.productCode;
    const selectedWholesalerName = event.target.options[event.target.selectedIndex].text;
    const priceInput = row.querySelector('.manual-price-input');
    const productData = fullPricingData.find(p => p.productCode === productCode);
    if (productData && productData.quotes) {
        const newPrice = productData.quotes[selectedWholesalerName];
        if (newPrice !== undefined) {
            priceInput.value = newPrice.toFixed(2);
        } else {
            priceInput.value = '';
        }
    }
}

export function initPricingView() {
    view = document.getElementById('pricing-view');
    if (!view) return;
    wholesalerSelect = document.getElementById('pricing-wholesaler-select');
    exportBtn = document.getElementById('pricing-export-btn');
    uploadInput = document.getElementById('pricing-upload-input'); 
    bulkUpdateBtn = document.getElementById('pricing-bulk-update-btn'); 
    outputContainer = document.getElementById('pricing-output-container');
    makerFilterInput = document.getElementById('pricing-maker-filter');
    setLowestPriceBtn = document.getElementById('set-lowest-price-btn');
    unregisteredFilterCheckbox = document.getElementById('pricing-unregistered-filter');
    exportUnregisteredBtn = document.getElementById('pricing-export-unregistered-btn');

    // ▼▼▼ Add these two lines ▼▼▼
    const directImportBtn = document.getElementById('pricing-direct-import-btn');
    const directImportInput = document.getElementById('pricing-direct-import-input');
    // ▲▲▲ Addition complete ▲▲▲    

    view.addEventListener('show', () => {
        loadWholesalerDropdown();
        loadInitialMasters();
    });

    // ▼▼▼ Add these event listeners ▼▼▼
    directImportBtn.addEventListener('click', () => {
        directImportInput.click();
    });

    directImportInput.addEventListener('change', async (event) => {
        const file = event.target.files[0];
        if (!file) return;

        if (!confirm('選択したファイルの内容で納入価と卸情報を一括更新します。この操作は元に戻せません。よろしいですか？')) {
            event.target.value = ''; // Reset the file input
            return;
        }

        const formData = new FormData();
        formData.append('file', file);

        window.showLoading();
        try {
            const res = await fetch('/api/pricing/direct_import', {
                method: 'POST',
                body: formData,
            });
            const resData = await res.json();
            if (!res.ok) {
                throw new Error(resData.message || 'インポートに失敗しました。');
            }
            window.showNotification(resData.message, 'success');
            loadInitialMasters(); // Refresh the main table with updated data
        } catch (err) {
            console.error(err);
            window.showNotification(`エラー: ${err.message}`, 'error');
        } finally {
            window.hideLoading();
            event.target.value = ''; // Reset the file input
        }
    });
    // ▲▲▲ Addition complete ▲▲▲

    uploadInput.addEventListener('change', handleUpload); 
    bulkUpdateBtn.addEventListener('click', handleBulkUpdate); 
    setLowestPriceBtn.addEventListener('click', handleSetLowestPrice);
    
    exportBtn.addEventListener('click', () => handleExport(false)); 
    exportUnregisteredBtn.addEventListener('click', () => handleExport(true));

    makerFilterInput.addEventListener('input', applyFiltersAndRender);
    unregisteredFilterCheckbox.addEventListener('change', applyFiltersAndRender);

    outputContainer.addEventListener('change', handleSupplierChange);
    wholesalerSelect.addEventListener('change', () => {
        lastSelectedWholesaler = wholesalerSelect.value;
    });
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\reprocess.js -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\reprocess.js

export function initReprocessButton() {
    const reprocessBtn = document.getElementById('reprocessBtn');
    if (!reprocessBtn) return;

    reprocessBtn.addEventListener('click', async () => {
        // ▼▼▼ [修正点] 確認メッセージをより強力なものに変更 ▼▼▼
        if (!confirm('全ての取引データを、最新のマスター情報で更新します。\nデータ量によっては数分かかる場合があります。\nこの操作は元に戻せません。よろしいですか？')) {
            return;
        }
        // ▲▲▲ 修正ここまで ▲▲▲

        window.showLoading();
        try {
            // ▼▼▼ [修正点] APIエンドポイントは /api/transactions/reprocess のまま（main.goで変更済み）▼▼▼
            const res = await fetch('/api/transactions/reprocess', {
                method: 'POST',
            });
            // ▲▲▲ 修正ここまで ▲▲▲
   
            const data = await res.json();
            if (!res.ok) {
                throw new Error(data.message || '処理に失敗しました。');
            }
            window.showNotification(data.message, 'success');
        } catch (err) {
            console.error(err);
     
            window.showNotification(`エラー: ${err.message}`, 'error');
        } finally {
            window.hideLoading();
        }
    });
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\returns.js -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\returns.js

import { createUploadTableHTML, renderUploadTableRows } from './common_table.js';
import { hiraganaToKatakana, getLocalDateString } from './utils.js';


function formatBalance(balance) {
    if (typeof balance === 'number') {
        return balance.toFixed(2);
    }
    return balance;
}

function renderReturnCandidates(data, container) {
    if (!data || data.length === 0) {
        container.innerHTML = "<p>返品可能な品目はありませんでした。</p>";
        return;
    }

    let html = data.map((yjGroup, yjIndex) => {
        const yjHeader = `
            <div class="agg-yj-header" style="background-color: #0d6efd; color: white;">
                <span>YJ: ${yjGroup.yjCode}</span>
                <span class="product-name">${yjGroup.productName}</span>
            </div>
        `;
        
        const packagesHtml = yjGroup.packageLedgers.map((pkg, pkgIndex) => {
            const surplus = pkg.effectiveEndingBalance - pkg.reorderPoint;
            let pkgHeader = `
                <div class="agg-pkg-header" style="border-left: 5px solid #0d6efd;">
                    <span>包装: ${pkg.packageKey}</span>
                    <span class="balance-info">
                        在庫: ${formatBalance(pkg.effectiveEndingBalance)} | 
                        発注点: ${formatBalance(pkg.reorderPoint)} | 
                        <strong style="color: #0d6efd;">余剰数(目安): ${formatBalance(surplus)}</strong>
                    </span>
                </div>
            `;

            if (pkg.deliveryHistory && pkg.deliveryHistory.length > 0) {
                const tableId = `delivery-history-${yjIndex}-${pkgIndex}`;
                
                const tableShell = createUploadTableHTML(tableId);
                const tableBodyContent = renderUploadTableRows(pkg.deliveryHistory);
                
                const fullTableHtml = tableShell.replace('<tbody></tbody>', `<tbody>${tableBodyContent}</tbody>`);
                
                pkgHeader += `<div id="${tableId}-container" style="padding: 0 10px 10px 10px;">${fullTableHtml}</div>`;
            }
            return pkgHeader;
        }).join('');

        return yjHeader + packagesHtml;
    }).join('');

    container.innerHTML = html;
}

export function initReturnsView() {
    const view = document.getElementById('returns-view');
    if (!view) return;
    const runBtn = document.getElementById('run-returns-list-btn');
    const outputContainer = document.getElementById('returns-list-output-container');
    const kanaNameInput = document.getElementById('ret-kanaName');
    const dosageFormInput = document.getElementById('ret-dosageForm');
    const coefficientInput = document.getElementById('ret-coefficient');
    const printBtn = document.getElementById('print-returns-list-btn');
    const shelfNumberInput = document.getElementById('ret-shelf-number');

    runBtn.addEventListener('click', async () => {
        window.showLoading();
        const params = new URLSearchParams({
            kanaName: hiraganaToKatakana(kanaNameInput.value),
            dosageForm: dosageFormInput.value,
            shelfNumber: shelfNumberInput.value,
            coefficient: coefficientInput.value,
        });

        try {
            const res = await fetch(`/api/returns/candidates?${params.toString()}`);
            if (!res.ok) {
                const errText = await res.text();
                throw new Error(errText || 'List generation failed');
            }
            const data = await res.json();
            renderReturnCandidates(data, outputContainer);
        } catch (err) {
            outputContainer.innerHTML = `<p style="color:red;">エラー: ${err.message}</p>`;
        } finally {
            window.hideLoading();
        }
    });

    printBtn.addEventListener('click', () => {
        view.classList.add('print-this-view');
        window.print();
    });

    window.addEventListener('afterprint', () => {
        view.classList.remove('print-this-view');
    });
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\settings.js -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\settings.js
import { refreshWholesalerMap } from './master_data.js';

let view, userIDInput, passwordInput, saveBtn, usageFolderPathInput, calculationPeriodDaysInput, edgePathInput;
let wholesalerCodeInput, wholesalerNameInput, addWholesalerBtn, wholesalersTableBody;
let migrateInventoryBtn, migrateInventoryInput;
let migrationResultContainer;

function initCleanupSection() {
    const getBtn = document.getElementById('getCleanupCandidatesBtn');
    const outputContainer = document.getElementById('cleanup-output-container');

    getBtn.addEventListener('click', async () => {
         if (!confirm('在庫ゼロかつ3ヶ月間動きのない製品マスターを検索します。よろしいですか？')) {
            return;
        }
        window.showLoading('整理対象のマスターを検索中...');
        try {
             const res = await fetch('/api/masters/cleanup/candidates');
            if (!res.ok) throw new Error('候補リストの取得に失敗しました。');
            
            const candidates = await res.json();
            renderCleanupCandidates(candidates, outputContainer);
        } catch (err) {
            outputContainer.innerHTML = `<p style="color:red;">${err.message}</p>`;
            window.showNotification(err.message, 'error');
        } finally {
            window.hideLoading();
         }
    });

    outputContainer.addEventListener('click', async (e) => {
        if (e.target.id === 'executeCleanupBtn') {
            const checkedBoxes = outputContainer.querySelectorAll('.cleanup-check:checked');
    
             if (checkedBoxes.length === 0) {
                window.showNotification('削除するマスターが選択されていません。', 'error');
                 return;
            }
            if (!confirm(`本当に選択された ${checkedBoxes.length} 件の製品マスターを削除しますか？\nこの操作は元に戻せません。`)) {
                 return;
            }

            const productCodes = Array.from(checkedBoxes).map(cb => cb.dataset.productCode);
        
             window.showLoading('マスターを削除中...');
            try {
                const res = await fetch('/api/masters/cleanup/execute', {
                     method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
 
                     body: JSON.stringify({ productCodes }),
                });
    
                 const resData = await res.json();
                if (!res.ok) throw new Error(resData.message || '削除に失敗しました。');
                
                window.showNotification(resData.message, 'success');
                outputContainer.innerHTML = '';
            } catch (err) {
                window.showNotification(err.message, 'error');
            } finally {
                window.hideLoading();
            }
        } else if (e.target.id === 'cleanup-select-all') {
            const isChecked = e.target.checked;
            outputContainer.querySelectorAll('.cleanup-check').forEach(chk => chk.checked = isChecked);
        }
    });
}

function renderCleanupCandidates(candidates, container) {
    if (!candidates || candidates.length === 0) {
        container.innerHTML = '<p>整理対象の製品マスターは見つかりませんでした。</p>';
        return;
    }
    
    let tableHTML = `
        <p><strong>${candidates.length}件</strong>の整理対象マスターが見つかりました。</p>
        <table class="data-table" style="margin-top: 5px;">
            <thead>
                <tr>
                     <th style="width: 5%;"><input type="checkbox" id="cleanup-select-all" checked></th>
                    <th style="width: 35%;">製品名</th>
                    <th style="width: 15%;">JANコード</th>
                     <th style="width: 15%;">メーカー名</th>
                </tr>
            </thead>
             <tbody>
    `;
    candidates.forEach(p => {
        tableHTML += `
            <tr>
                 <td class="center"><input type="checkbox" class="cleanup-check" data-product-code="${p.productCode}" checked></td>
                <td class="left">${p.productName}</td>
                 <td>${p.productCode}</td>
                <td class="left">${p.makerName}</td>
            </tr>
        `;
    });
    tableHTML += `
            </tbody>
        </table>
        <div style="margin-top: 10px; text-align: right;">
             <button id="executeCleanupBtn" class="btn" style="background-color: #dc3545; color: white;">チェックしたマスターを削除</button>
        </div>
    `;
    container.innerHTML = tableHTML;
}

async function loadSettings() {
    try {
         const res = await fetch('/api/settings/get');
        if (!res.ok) throw new Error('設定の読み込みに失敗しました。');
        const settings = await res.json();
        userIDInput.value = settings.emednetUserId || '';
        passwordInput.value = settings.emednetPassword || '';
        if (usageFolderPathInput) {
            usageFolderPathInput.value = settings.usageFolderPath || '';
        }
        if (calculationPeriodDaysInput) {
            calculationPeriodDaysInput.value = settings.calculationPeriodDays || 90;
        }
        if (edgePathInput) {
             edgePathInput.value = settings.edgePath || '';
        }
        const edgeBtn = document.getElementById('edgeDownloadBtn');
        if(edgeBtn) {
            edgeBtn.disabled = !settings.edgePath;
        }

    } catch (err) {
         console.error(err);
        window.showNotification(err.message, 'error');
    }
}

async function saveSettings() {
    window.showLoading();
    try {
        const currentSettingsRes = await fetch('/api/settings/get');
        if (!currentSettingsRes.ok) throw new Error('現在の設定の読み込みに失敗しました。');
        const currentSettings = await currentSettingsRes.json();

        const userId = userIDInput.value;
        const password = passwordInput.value;
        const usagePath = usageFolderPathInput.value;
        const periodDays = parseInt(calculationPeriodDaysInput.value, 10);
        const edgePath = edgePathInput.value.trim();

        const newSettings = {
             ...currentSettings,
            emednetUserId: userId,
            emednetPassword: password,
           
             edeUserId: userId,
            edePassword: password,
            usageFolderPath: usagePath,
            calculationPeriodDays: periodDays,
 
             edgePath: edgePath,
        };

        const res = await fetch('/api/settings/save', {
            method: 'POST',
             headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(newSettings),
        });
        const resData = await res.json();
        if (!res.ok) throw new Error(resData.message || '設定の保存に失敗しました。');
        
        window.showNotification(resData.message, 'success');
        
        const edgeBtn = document.getElementById('edgeDownloadBtn');
        if(edgeBtn) {
            edgeBtn.disabled = !newSettings.edgePath;
        }

    } catch (err) {
        
         console.error(err);
        window.showNotification(err.message, 'error');
    } finally {
        window.hideLoading();
    }
}

function renderWholesalers(wholesalers) {
    if (!wholesalers) {
        wholesalersTableBody.innerHTML = '<tr><td colspan="3">登録されている卸業者がありません。</td></tr>';
        return;
    }
    wholesalersTableBody.innerHTML = wholesalers.map(w => `
        <tr data-code="${w.code}">
            <td>${w.code}</td>
            <td class="left">${w.name}</td>
      
             <td class="center"><button class="delete-wholesaler-btn btn">削除</button></td>
        </tr>
    `).join('');
}

async function loadWholesalers() {
    try {
        const res = await fetch('/api/settings/wholesalers');
        if (!res.ok) throw new Error('卸業者リストの読み込みに失敗しました。');
        const data = await res.json();
        renderWholesalers(data);
    } catch (err) {
        console.error(err);
        window.showNotification(err.message, 'error');
    }
}

async function addWholesaler() {
    const code = wholesalerCodeInput.value.trim();
    const name = wholesalerNameInput.value.trim();
    if (!code || !name) {
        window.showNotification('卸コードと卸業者名の両方を入力してください。', 'error');
        return;
    }

    window.showLoading();
    try {
        const res = await fetch('/api/settings/wholesalers', {
             method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ code, name }),
      
         });
        const resData = await res.json();
        if (!res.ok) throw new Error(resData.message || '卸業者の追加に失敗しました。');
        
        window.showNotification(resData.message, 'success');
        wholesalerCodeInput.value = '';
        wholesalerNameInput.value = '';
        loadWholesalers();
        await refreshWholesalerMap();
    } catch (err) {
        console.error(err);
        window.showNotification(err.message, 'error');
    } finally {
        window.hideLoading();
    }
}

// ▼▼▼【ここから修正】▼▼▼
function renderMigrationResults(results) {
    if (!results || results.length === 0) {
        migrationResultContainer.innerHTML = '<p>処理対象のデータがありませんでした。</p>';
        return;
    }

    const headers = `
        <thead>
            <tr>
                <th>CSV行</th>
                <th>読込JAN</th>
                <th>読込数量(YJ)</th>
                <th>マスター</th>
                <th>登録製品名</th>
                <th>登録JAN</th>
                <th>登録YJ数量</th>
                <th>エラー</th>
            </tr>
        </thead>
    `;

    const rows = results.map(r => {
        const masterStatusMap = {
            "EXISTED": "既存",
            "JCSHMS": "新規(JCSHMS)",
            "PROVISIONAL": "新規(仮)"
        };
        const masterStatus = masterStatusMap[r.masterCreated] || '不明';
        const errorClass = r.error ? 'style="background-color: #f8d7da;"' : '';

        return `
            <tr ${errorClass}>
                <td class="left" style="font-size: 10px;">${(r.originalRow || []).join(', ')}</td>
                <td>${r.parsedRecord ? r.parsedRecord.janCode : ''}</td>
                <td class="right">${r.parsedRecord ? r.parsedRecord.yjQuantity.toFixed(2) : ''}</td>
                <td>${masterStatus}</td>
                <td class="left">${r.resultRecord ? r.resultRecord.productName : '-'}</td>
                <td>${r.resultRecord ? r.resultRecord.janCode : '-'}</td>
                <td class="right">${r.resultRecord ? r.resultRecord.yjQuantity.toFixed(2) : '-'}</td>
                <td class="left" style="color: red;">${r.error || ''}</td>
            </tr>
        `;
    }).join('');

    migrationResultContainer.innerHTML = `<table class="data-table">${headers}<tbody>${rows}</tbody></table>`;
}

export function initSettings() {
    view = document.getElementById('settings-view');
    if (!view) return;

    userIDInput = document.getElementById('emednetUserID');
    passwordInput = document.getElementById('emednetPassword');
    saveBtn = document.getElementById('saveSettingsBtn');
    usageFolderPathInput = document.getElementById('usageFolderPath');
    calculationPeriodDaysInput = document.getElementById('calculationPeriodDays');
    edgePathInput = document.getElementById('edgePath');
    wholesalerCodeInput = document.getElementById('wholesalerCode');
    wholesalerNameInput = document.getElementById('wholesalerName');
    addWholesalerBtn = document.getElementById('addWholesalerBtn');
    wholesalersTableBody = document.querySelector('#wholesalers-table tbody');
    const clearTransactionsBtn = document.getElementById('clearAllTransactionsBtn');
    const clearMastersBtn = document.getElementById('clearAllMastersBtn');
    
    migrateInventoryBtn = document.getElementById('migrateInventoryBtn');
    migrateInventoryInput = document.getElementById('migrateInventoryInput');
    migrationResultContainer = document.getElementById('migration-result-container');

    initCleanupSection();
    
    if (migrateInventoryBtn) {
        migrateInventoryBtn.addEventListener('click', () => {
            if (!confirm('旧システムから在庫データを移行します。\nCSVファイルの形式（inventory_date, product_code, quantity）が正しいことを確認してください。\nよろしいですか？')) {
                return;
            }
            migrateInventoryInput.click();
        });
    }

    if (migrateInventoryInput) {
        migrateInventoryInput.addEventListener('change', async (event) => {
            const file = event.target.files[0];
            if (!file) return;

            const formData = new FormData();
            formData.append('file', file);

            window.showLoading('在庫データを移行中...');
            migrationResultContainer.innerHTML = ''; // 結果表示エリアをクリア
            try {
                const res = await fetch('/api/inventory/migrate', {
                    method: 'POST',
                    body: formData,
                });
                const resData = await res.json();
                if (!res.ok) {
                    throw new Error(resData.message || '移行に失敗しました。');
                }
                window.showNotification(resData.message, 'success');
                if (resData.details) {
                    renderMigrationResults(resData.details);
                }
            } catch (err) {
                console.error(err);
                migrationResultContainer.innerHTML = `<p style="color:red;">エラー: ${err.message}</p>`;
                window.showNotification(`エラー: ${err.message}`, 'error');
            } finally {
                window.hideLoading();
                event.target.value = '';
            }
        });
    }
  
    // ▲▲▲【修正ここまで】▲▲▲

    clearMastersBtn.addEventListener('click', async () => {
        if (!confirm('本当に全ての製品マスターを削除しますか？\n\nJCSHMSマスターも削除されるため、再読み込みするまで品目情報が失われます。この操作は元に戻せません。')) {
            return;
        }
 
        window.showLoading();
        try {
            const res = await fetch('/api/masters/clear_all', { method: 'POST' });
      
             const resData = await res.json();
            if (!res.ok) throw new Error(resData.message || '製品マスターの削除に失敗しました。');
            window.showNotification(resData.message, 'success');
 
         } catch (err) {
            console.error(err);
            window.showNotification(err.message, 'error');
       
         } finally {
            window.hideLoading();
        }
    });

    saveBtn.addEventListener('click', saveSettings);
    addWholesalerBtn.addEventListener('click', addWholesaler);
    
    clearTransactionsBtn.addEventListener('click', async () => {
         if (!confirm('本当にすべての取引履歴（入出庫、納品、処方、棚卸など）を削除しますか？\n\nこの操作は元に戻せません。')) {
            return;
        }
        window.showLoading();
        try {
 
             const res = await fetch('/api/transactions/clear_all', { method: 'POST' });
            const resData = await res.json();
       
             if (!res.ok) throw new Error(resData.message || '取引データの削除に失敗しました。');
            window.showNotification(resData.message, 'success');
        } catch (err) {
       
             console.error(err);
            window.showNotification(err.message, 'error');
        } finally {
            window.hideLoading();
  
         }
    });

    wholesalersTableBody.addEventListener('click', async (e) => {
        if (e.target.classList.contains('delete-wholesaler-btn')) {
            const row = e.target.closest('tr');
  
             const code = row.dataset.code;
            if (!confirm(`卸コード [${code}] を削除します。よろしいですか？`)) {
             
                 return;
            }
            window.showLoading();
            try {
  
                 const res = await fetch(`/api/settings/wholesalers/${code}`, { method: 'DELETE' });
                const resData = await res.json();
                if (!res.ok) throw new Error(resData.message || '削除に失敗しました。');
                window.showNotification(resData.message, 'success');
   
                 loadWholesalers();
                await refreshWholesalerMap();
            
             } catch (err) {
                console.error(err); 
                window.showNotification(err.message, 'error');
     
             } finally {
                window.hideLoading();
            }
         }
    });
}

export function onViewShow() {
    loadSettings();
    loadWholesalers();
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\upload.js -----
import { createUploadTableHTML, renderUploadTableRows } from './common_table.js';

let currentUploadType = '';
const fileInputs = {
    dat: document.getElementById('datFileInput'),
    usage: document.getElementById('usageFileInput'),
};

async function handleFileUpload(type, files) {
    if (!files.length) return;
    const uploadContainer = document.getElementById('upload-output-container');
    uploadContainer.innerHTML = createUploadTableHTML('upload-output-table');
    const tbody = uploadContainer.querySelector('tbody');
    tbody.innerHTML = `<tr><td colspan="14" class="center">Processing...</td></tr>`;
    window.showLoading();
    try {
        const formData = new FormData();
        for (const file of files) formData.append('file', file);
        const res = await fetch(`/api/${type}/upload`, { method: 'POST', body: formData });
        const data = await res.json();
        if (!res.ok) throw new Error(data.message || `${type.toUpperCase()} file processing failed.`);
        renderUploadTableRows('upload-output-table', data.records || data.details);
        window.showNotification(`${type.toUpperCase()} file(s) processed.`, 'success');
    } catch (err) {
        tbody.innerHTML = `<tr><td colspan="14" class="center" style="color:red;">Error: ${err.message}</td></tr>`;
        window.showNotification(err.message, 'error');
    } finally {
        window.hideLoading();
        if (fileInputs[type]) fileInputs[type].value = '';
    }
}

export function initUploadView() {
    fileInputs.dat.addEventListener('change', (e) => handleFileUpload('dat', e.target.files));
    fileInputs.usage.addEventListener('change', (e) => handleFileUpload('usage', e.target.files));
    document.addEventListener('showUploadView', (e) => {
        currentUploadType = e.detail.type;
        const title = document.getElementById('upload-view-title');
        const container = document.getElementById('upload-output-container');
        if (title) title.textContent = `${currentUploadType.toUpperCase()} File Upload`;
        if (container) container.innerHTML = `<p>Click the ${currentUploadType.toUpperCase()} button again to select files.</p>`;
        if (fileInputs[currentUploadType]) fileInputs[currentUploadType].click();
    });
}
export function resetUploadView() {
    const title = document.getElementById('upload-view-title');
    const container = document.getElementById('upload-output-container');
    if (title) title.textContent = 'File Upload';
    if (container) container.innerHTML = '';
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\usage.js -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\usage.js
// このファイル全体を以下の内容で置き換えてください。

import { createUploadTableHTML, renderUploadTableRows } from './common_table.js';

// 共通のエラーハンドリング関数
async function handleResponseError(res) {
    const errorText = await res.text();
    try {
        // エラーメッセージがJSON形式の場合
        const errorJson = JSON.parse(errorText);
        return new Error(errorJson.message || '不明なエラーが発生しました。');
    } catch (e) {
        // エラーメッセージがテキスト形式の場合
        return new Error(errorText || `サーバーエラーが発生しました (HTTP ${res.status})`);
    }
}

// 自動インポート用の関数
async function handleAutomaticUsageImport() {
    const uploadContainer = document.getElementById('upload-output-container');
    uploadContainer.innerHTML = `<p>設定されたパスからUSAGEファイルを読み込んでいます...</p>`;
    window.showLoading();

    try {
        const res = await fetch('/api/usage/upload', { method: 'POST' });
        if (!res.ok) {
            throw await handleResponseError(res);
        }
        const data = await res.json();

        const tableShell = createUploadTableHTML('upload-output-table');
        const tableBodyContent = renderUploadTableRows(data.records);
        uploadContainer.innerHTML = tableShell.replace('<tbody></tbody>', `<tbody>${tableBodyContent}</tbody>`);
        window.showNotification('USAGEファイルのインポートが完了しました。', 'success');
    } catch (err) {
        const errorRow = `<tr><td colspan="14" style="color:red; text-align:center;">エラー: ${err.message}</td></tr>`;
        uploadContainer.innerHTML = createUploadTableHTML('upload-output-table').replace('<tbody></tbody>', `<tbody>${errorRow}</tbody>`);
        window.showNotification(err.message, 'error');
    } finally {
        window.hideLoading();
    }
}

// 手動ファイルアップロード用の関数
async function handleManualUsageUpload(event) {
    const files = event.target.files;
    if (!files.length) return;

    const uploadContainer = document.getElementById('upload-output-container');
    uploadContainer.innerHTML = `<p>USAGEファイルをアップロードしています...</p>`;
    window.showLoading();
    
    try {
        const formData = new FormData();
        formData.append('file', files[0]);

        const res = await fetch('/api/usage/upload', {
            method: 'POST',
            body: formData,
        });
        if (!res.ok) {
            throw await handleResponseError(res);
        }
        const data = await res.json();

        const tableShell = createUploadTableHTML('upload-output-table');
        const tableBodyContent = renderUploadTableRows(data.records);
        uploadContainer.innerHTML = tableShell.replace('<tbody></tbody>', `<tbody>${tableBodyContent}</tbody>`);
        window.showNotification('USAGEファイルのインポートが完了しました。', 'success');
    } catch (err) {
        const errorRow = `<tr><td colspan="14" style="color:red; text-align:center;">エラー: ${err.message}</td></tr>`;
        uploadContainer.innerHTML = createUploadTableHTML('upload-output-table').replace('<tbody></tbody>', `<tbody>${errorRow}</tbody>`);
        window.showNotification(err.message, 'error');
    } finally {
        window.hideLoading();
        event.target.value = '';
    }
}

export function initUsageUpload() {
    document.addEventListener('importUsageFromPath', handleAutomaticUsageImport);

    const usageInput = document.getElementById('usageFileInput');
    if (usageInput) {
        usageInput.addEventListener('change', handleManualUsageUpload);
    }
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\utils.js -----
// C:/Users/wasab/OneDrive/デスクトップ/WASABI/static/js/utils.js
/**
 * 文字列内のひらがなをカタカナに変換します。
 * @param {string} str 変換する文字列
 * @returns {string} カタカナに変換された文字列
 */
export function hiraganaToKatakana(str) {
    if (!str) return '';
    return str.replace(/[\u3041-\u3096]/g, function(match) {
        const charCode = match.charCodeAt(0) + 0x60;
        return String.fromCharCode(charCode);
    });
}

/**
 * 現在のPCのローカル日付を 'YYYY-MM-DD' 形式の文字列で返します。
 * @returns {string} 'YYYY-MM-DD' 形式の文字列
 */
export function getLocalDateString() {
    const today = new Date();
    const yyyy = today.getFullYear();
    const mm = String(today.getMonth() + 1).padStart(2, '0');
    const dd = String(today.getDate()).padStart(2, '0');
    return `${yyyy}-${mm}-${dd}`;
}

// ▼▼▼【ここから追加】▼▼▼
/**
 * 文字列に含まれる全角英数字記号を半角に変換します。
 * @param {string} str 変換する文字列
 * @returns {string} 半角に変換された文字列
 */
export function toHalfWidth(str) {
    if (!str) return '';
    return str.replace(/[！-～]/g, function(s) {
        return String.fromCharCode(s.charCodeAt(0) - 0xFEE0);
    }).replace(/　/g, ' '); // 全角スペースを半角スペースに
}
// ▲▲▲【追加ここまで】▲▲▲

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\valuation.js -----
// C:\Dev\WASABI\static\js\valuation.js
// ▼▼▼ [修正点] getLocalDateString をインポート ▼▼▼
import { hiraganaToKatakana, getLocalDateString } from './utils.js';
// ▲▲▲ 修正ここまで ▲▲▲
import { showModal } from './inout_modal.js';
let view, dateInput, runBtn, outputContainer, kanaNameInput, dosageFormInput, exportBtn;
let reportDataCache = null;
const formatCurrency = (value) => new Intl.NumberFormat('ja-JP', { style: 'currency', currency: 'JPY' }).format(value || 0);

function renderInteractiveView() {
    if (!reportDataCache || reportDataCache.length === 0) {
        outputContainer.innerHTML = '<p>表示するデータがありません。</p>';
        return;
    }

    let html = '';
    let grandTotalNhiValue = 0;
    let grandTotalPurchaseValue = 0;
    const ucMap = {"1": "内", "2": "外", "3": "歯", "4": "注", "5": "機", "6": "他"};
    reportDataCache.forEach(group => {
        grandTotalNhiValue += group.totalNhiValue;
        grandTotalPurchaseValue += group.totalPurchaseValue;

        const ucName = ucMap[group.usageClassification.trim()] || group.usageClassification;
        html += `<div class="agg-yj-header">${ucName} (合計薬価: ${formatCurrency(group.totalNhiValue)} | 合計納入価: ${formatCurrency(group.totalPurchaseValue)})</div>`;

        group.detailRows.forEach(row => {
            let warningHtml = '';
            if (row.showAlert) { 
                warningHtml = `<span class="warning-link" data-yj-code="${row.yjCode}" data-product-name="${row.productName}" data-provisional-code="${row.productCode}" style="color: red; font-weight: bold; cursor: pointer; text-decoration: underline; margin-left: 15px;">[JCSHMS掲載品を登録してください]</span>`;
            }

            html += `
                <div class="item-row" style="background-color: #f8f9fa; padding: 6px 10px; border: 1px solid #ccc; border-top: none; font-size: 12px; line-height: 1.6; display: flex; justify-content: space-between; align-items: center;">
                    <div class="left-section">
                        <span style="font-weight: bold;">${row.productName} (${row.yjCode})</span>
                        <span style="margin-left: 10px; color: #555;">${row.packageSpec}</span>
                        ${warningHtml} 
                    </div>
                    <div class="right-section" style="white-space: nowrap;">
                        <span>納入価金額: ${formatCurrency(row.totalPurchaseValue)}</span> | 
                        <span>薬価金額: ${formatCurrency(row.totalNhiValue)}</span> | 
                        <span>包装納入価: ${row.packagePurchasePrice > 0 ? row.packagePurchasePrice.toFixed(2) + '円' : '-'}</span> |
                        <span>包装薬価: ${row.packageNhiPrice > 0 ? row.packageNhiPrice.toFixed(2) + '円' : '-'}</span> |
                        <span style="font-weight: bold;">在庫: ${row.stock.toFixed(2)} ${row.yjUnitName}</span>
                    </div>
                </div>
            `;
        });
    });
    
    html += `
        <div style="text-align: right; margin-top: 20px; padding: 10px; border-top: 2px solid #333; font-weight: bold;">
            <span>総合計 (薬価): ${formatCurrency(grandTotalNhiValue)}</span> | 
            <span>総合計 (納入価): ${formatCurrency(grandTotalPurchaseValue)}</span>
        </div>
    `;

    html += `<div style="text-align: right; margin-top: 20px;"><button id="generate-report-btn" class="btn" style="background-color: #198754; color: white;">最終帳票を作成</button></div>`;
    outputContainer.innerHTML = html;
}

function renderPrintableReport() {
    const date = new Date(dateInput.value);
    const dateStr = `${date.getFullYear()}年${date.getMonth() + 1}月${date.getDate()}日`;
    
    let html = `
        <div id="valuation-print-controls" style="text-align: right; margin-bottom: 10px;">
            <button id="print-valuation-report-btn" class="btn">この帳票を印刷</button>
        </div>
        <div id="printable-area">
            <h2 style="text-align: center; margin-bottom: 20px;">${dateStr} 在庫評価一覧</h2>
    `;
    
    let grandTotalNhiValue = 0;
    let grandTotalPurchaseValue = 0;
    const ucMap = {"1": "内", "2": "外", "3": "歯", "4": "注", "5": "機", "6": "他"};

    reportDataCache.forEach(group => {
        grandTotalNhiValue += group.totalNhiValue;
        grandTotalPurchaseValue += group.totalPurchaseValue;

        const ucName = ucMap[group.usageClassification.trim()] || group.usageClassification;
        html += `<h3 style="font-size: 12pt; padding: 10px 0; page-break-before: auto;">${ucName}</h3>
                 <table class="data-table" style="font-size: 10pt;">
                    <thead>
                        <tr>
                            <th style="width: 35%;">製品名</th>
                            <th style="width: 25%;">包装</th>
                            <th style="width: 10%;">在庫数</th>
                            <th style="width: 15%;">薬価金額</th>
                            <th style="width: 15%;">納入価金額</th>
                        </tr>
                    </thead>
                    <tbody>`;
        group.detailRows.forEach(row => {
            html += `
                <tr>
                    <td class="left">${row.productName}</td>
                    <td class="left">${row.packageSpec}</td>
                    <td class="right">${row.stock.toFixed(2)} ${row.yjUnitName}</td>
                    <td class="right">${formatCurrency(row.totalNhiValue)}</td>
                    <td class="right">${formatCurrency(row.totalPurchaseValue)}</td>
                </tr>`;
        });
        html += `</tbody>
                 <tfoot>
                    <tr>
                        <td colspan="3" class="right" style="font-weight: bold;">${ucName} 合計</td>
                        <td class="right" style="font-weight: bold;">${formatCurrency(group.totalNhiValue)}</td>
                        <td class="right" style="font-weight: bold;">${formatCurrency(group.totalPurchaseValue)}</td>
                    </tr>
                 </tfoot>
                 </table>`;
    });

    html += `
        <table class="data-table" style="margin-top: 20px;">
            <tfoot>
                <tr>
                    <td colspan="3" class="right" style="font-weight: bold;">総合計</td>
                    <td class="right" style="font-weight: bold;">${formatCurrency(grandTotalNhiValue)}</td>
                    <td class="right" style="font-weight: bold;">${formatCurrency(grandTotalPurchaseValue)}</td>
                </tr>
            </tfoot>
        </table>
    `;
    html += `</div>`;
    outputContainer.innerHTML = html;
}

async function runCalculation() {
    const date = dateInput.value.replace(/-/g, '');
    if (!date) {
        window.showNotification('評価基準日を指定してください。', 'error');
        return;
    }
    window.showLoading();
    try {
        const kanaName = hiraganaToKatakana(kanaNameInput.value);
        const dosageForm = dosageFormInput.value;
        const params = new URLSearchParams({
            date: date,
            kanaName: kanaName,
            dosageForm: dosageForm,
        });
        const res = await fetch(`/api/valuation?${params.toString()}`);
        if (!res.ok) {
            const errText = await res.text();
            throw new Error(errText || '在庫評価の計算に失敗しました。');
        }
        reportDataCache = await res.json();
        renderInteractiveView();
    } catch (err) {
        outputContainer.innerHTML = `<p style="color:red;">${err.message}</p>`;
    } finally {
        window.hideLoading();
    }
}

function handleExport() {
    const date = dateInput.value.replace(/-/g, '');
    if (!date) {
        window.showNotification('評価基準日を指定してください。', 'error');
        return;
    }
    const kanaName = hiraganaToKatakana(kanaNameInput.value);
    const dosageForm = dosageFormInput.value;
    const params = new URLSearchParams({
        date: date,
        kanaName: kanaName,
        dosageForm: dosageForm,
    });
    window.location.href = `/api/valuation/export?${params.toString()}`;
}

export function initValuationView() {
    view = document.getElementById('valuation-view');
    if (!view) return;

    dateInput = document.getElementById('valuation-date');
    runBtn = document.getElementById('run-valuation-btn');
    outputContainer = document.getElementById('valuation-output-container');
    kanaNameInput = document.getElementById('val-kanaName');
    dosageFormInput = document.getElementById('val-dosageForm');
    exportBtn = document.getElementById('export-valuation-btn');

    // ▼▼▼ [修正点] 日付設定処理を新しい関数に置き換え ▼▼▼
    dateInput.value = getLocalDateString();
    // ▲▲▲ 修正ここまで ▲▲▲
    runBtn.addEventListener('click', runCalculation);
    exportBtn.addEventListener('click', handleExport);

    outputContainer.addEventListener('click', async (e) => {
        if (e.target.classList.contains('warning-link')) {
            showModal(e.target, async (selectedProduct) => {
                window.showLoading();
                try {
                    const payload = { ...selectedProduct, origin: 'JCSHMS' };
                    const resMaster = await fetch('/api/master/update', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload),
                    });
                    const resMasterData = await resMaster.json();
                    if (!resMaster.ok) throw new Error(resMasterData.message || 'マスターの登録に失敗しました。');
                    
                    window.showNotification(`「${selectedProduct.productName}」を登録しました。在庫評価を更新します。`, 'success');

                    await runCalculation();
                } catch (err) {
                    window.showNotification(err.message, 'error');
                } finally {
                    window.hideLoading();
                }
            });
        }
        
        if (e.target.id === 'generate-report-btn') {
            renderPrintableReport();
        }
        
        if (e.target.id === 'print-valuation-report-btn') {
            document.getElementById('aggregation-view').classList.remove('print-this-view');
            view.classList.add('print-this-view');
            window.print();
        }
    });

    window.addEventListener('afterprint', () => {
        view.classList.remove('print-this-view');
    });
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\index.html -----
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <title>WASABI</title>
    <script src="/static/js/encoding.min.js"></script>
    <link rel="stylesheet" href="/static/css/styles.css">
    <link rel="stylesheet" href="/static/css/inout.css">
</head>
<body>

<header id="main-header">
    <button id="inOutViewBtn" class="btn btn-blue">入庫・出庫</button>
    <button id="precompBtn" class="btn btn-blue">予製</button>
    <button id="datBtn" class="btn btn-azure">納品・返品</button>
    <button id="medrecDownloadBtn" class="btn btn-azure">chrome連携</button>
    <button id="edgeDownloadBtn" class="btn btn-azure">edge連携</button>
    <button id="usageBtn" class="btn btn-red">処方</button>
    <button id="inventoryBtn" class="btn btn-green">棚卸読込</button>
    <button id="manualInventoryBtn" class="btn btn-green">棚卸入力</button>
    <button id="inventoryAdjustmentBtn" class="btn btn-green">棚卸調整</button>
    <button id="inventoryHistoryBtn" class="btn btn-green">棚卸履歴</button>
    <button id="ledgerBtn" class="btn btn-green">管理台帳</button>
    <button id="aggregationBtn" class="btn btn-spring-green">集計</button>
    <button id="valuationBtn" class="btn btn-spring-green">在庫評価</button>
    <button id="orderBtn" class="btn btn-orange">発注</button>
    <button id="backorderBtn" class="btn btn-orange">発注残</button>
    <button id="returnsBtn" class="btn btn-yellow">返品リスト</button>
    <button id="deadStockBtn" class="btn btn-yellow">デッドストック</button>
    <button id="pricingBtn" class="btn btn-violet">価格更新</button>
    <button id="exportPricingBtn" class="btn btn-violet">納入価・卸バックアップ</button>
    <button id="masterEditViewBtn" class="btn btn-magenta">マスター</button>
    <button id="exportProductsBtn" class="btn btn-magenta">製品エクスポート</button>
    <button id="importProductsBtn" class="btn btn-magenta">製品インポート</button>
    <button id="reprocessBtn" class="btn btn-rose">再計算</button>
    <button id="exportCustomersBtn" class="btn btn-cyan">顧客マスターエクスポート</button>
    <button id="importCustomersBtn" class="btn btn-cyan">顧客マスターインポート</button>
    <button id="settingsBtn" class="btn btn-chartreuse">設定</button>
</header>

<main>
    <input type="file" id="datFileInput" multiple style="display:none;">
    <input type="file" id="usageFileInput" style="display:none;">
    <input type="file" id="inventoryFileInput" style="display:none;">

<div id="in-out-view" class="inout-view-container">
    <div class="inout-header-controls">
        <div class="field-group"><label for="in-out-date">日付</label><input type="date" id="in-out-date"></div>
        <div class="field-group"><label for="in-out-type">種別</label><select id="in-out-type"><option>入庫</option><option>出庫</option></select></div>
        <div class="field-group"><label for="in-out-client">得意先</label><select id="in-out-client"></select></div>
        <div class="field-group"><label for="in-out-receipt">伝票番号</label><select id="in-out-receipt"></select></div>
        <div class="buttons-group"><button id="saveBtn" class="btn">保存</button><button id="deleteBtn" class="btn">伝票削除</button></div>
    </div>
    <div class="inout-details-header"><button id="addRowBtn" class="btn">明細を追加</button></div>
    <div id="inout-details-container"></div>
</div>

<div id="upload-view" class="hidden">
    <p id="upload-view-title" class="view-subtitle">File Upload</p>
    <div id="upload-output-container"></div>
</div>

<div id="inventory-view" class="hidden">
    <p class="view-subtitle">Inventory File Upload</p>
    <div id="inventory-output-container"></div>
</div>

<div id="manual-inventory-view" class="hidden">
    <p class="view-title">棚卸（手入力）</p>
    <div class="filter-container" style="display: flex; flex-wrap: wrap; gap: 10px 16px; align-items: flex-end;">
    <div class="field-group">
            <label for="manual-inv-date">棚卸日</label>
            <input type="date" id="manual-inv-date">
        </div>
        <div class="field-group">
            <label for="manual-inv-kanaName">製品名/カナ名</label>
            <input type="text" id="manual-inv-kanaName" placeholder="（部分一致）">
        </div>
<div class="field-group">
    <label for="manual-inv-dosageForm">剤型</label>
    <select id="manual-inv-dosageForm">
        <option value="">すべて</option>
        <option value="内">内</option>
        <option value="外">外</option>
        <option value="歯">歯</option>
        <option value="注">注</option>
        <option value="機">機</option>
        <option value="他">他</option>
    </select>
</div>
        <div class="buttons-group">
            <button id="save-manual-inv-btn" class="btn" style="background-color: #0d6efd; color: white;">この内容で棚卸を保存</button>
        </div>
    </div>
    <div id="manual-inventory-container">
        <p>読み込み中...</p>
    </div>
</div>

<div id="inventory-adjustment-view" class="hidden inout-view-container">
    <p class="view-title">棚卸調整</p>
    <div class="filter-container" style="display: flex; flex-wrap: wrap; gap: 10px 16px; align-items: flex-end; margin-bottom: 15px; border: 1px solid #ccc; padding: 10px;">
        <form id="ia-barcode-form" style="width: 100%; margin-bottom: 15px;">
            <div class="field-group">
                <label for="ia-barcode-input" style="font-weight: bold; font-size: 1.1em;">バーコード入力</label>
                <input type="text" id="ia-barcode-input" inputmode="latin" placeholder="バーコードをスキャンするか、JAN/GS1コードを入力してEnter" style="font-size: 1.2em; padding: 8px; ime-mode: disabled;">
            </div>
        </form>

        <div style="display: flex; flex-wrap: wrap; gap: 10px 16px; align-items: flex-end; width: 100%;">
            <div class="field-group">
                <label for="ia-dosageForm">1. 剤型で絞り込み</label>
                <select id="ia-dosageForm">
                    <option value="">すべて</option>
                    <option value="内">内</option>
                    <option value="外">外</option>
                    <option value="歯">歯</option>
                    <option value="注">注</option>
                    <option value="機">機</option>
                    <option value="他">他</option>
                </select>
            </div>
            <div class="field-group">
                <label for="ia-kanaInitial">2. カナ名 (頭文字)</label>
                <select id="ia-kanaInitial">
                    <option value="">すべて</option>
                    <option value="ア">ア行</option>
                    <option value="カ">カ行</option>
                    <option value="サ">サ行</option>
                    <option value="タ">タ行</option>
                    <option value="ナ">ナ行</option>
                    <option value="ハ">ハ行</option>
                    <option value="マ">マ行</option>
                    <option value="ヤ">ヤ行</option>
                    <option value="ラ">ラ行</option>
                    <option value="ワ">ワ行</option>
                </select>
            </div>
            <div class="field-group">
                <label for="ia-shelf-number">棚番</label>
                <input type="text" id="ia-shelf-number" placeholder="（部分一致）">
            </div>
            <div class="field-group">
                <label><input type="checkbox" id="ia-dead-stock-only"> デッドリストのみ</label>
            </div>
            <div class="field-group">
                <label>3. 品目を選択</label>
                <button id="ia-select-product-btn" class="btn">品目を選択...</button>
            </div>
        </div>
    </div>
    <div id="inventory-adjustment-output">
        <p>フィルターで品目を選択してください。</p>
    </div>
</div>

<div id="search-modal" class="modal-overlay hidden">
    <div class="modal-content">
        <div class="modal-header">
        <p class="modal-title">薬品検索</p>
        <button id="closeModalBtn" class="close-button">&times;</button>
        </div>
        <div style="display: flex; gap: 5px; margin-bottom: 10px;">
        <input type="text" id="product-search-input" placeholder="製品名またはカナ名" style="flex-grow: 1; padding: 5px;">
        <button id="product-search-btn" class="btn">検索</button>
        </div>
        <div class="modal-body" id="search-results-container">
        <table id="search-results-table">
            <thead><tr><th>製品名</th><th>メーカー</th><th>包装</th><th>YJコード</th><th>JANコード</th><th>選択</th></tr></thead>
            <tbody></tbody>
        </table>
        </div>
    </div>
</div>

<div id="master-edit-view" class="hidden">
    <div class="inout-header-controls" style="justify-content: flex-start; gap: 20px;">
        <div class="field-group">
            <label for="master-edit-kanaName">製品名/カナ名/JAN</label>
            <input type="text" id="master-edit-kanaName" placeholder="（部分一致）">
        </div>
        <div class="field-group">
            <label for="master-edit-dosageForm">剤型</label>
            <select id="master-edit-dosageForm">
                <option value="">すべて</option>
                <option value="内">内</option>
                <option value="外">外</option>
                <option value="歯">歯</option>
                <option value="注">注</option>
                <option value="機">機</option>
                <option value="他">他</option>
            </select>
        </div>
        <div class="field-group">
            <label for="master-edit-shelfNumber">棚番</label>
            <input type="text" id="master-edit-shelfNumber" placeholder="（部分一致）">
        </div>
        <div class="buttons-group" style="margin-left: auto;">
            <button id="bulkShelfNumberBtn" class="btn btn-violet">棚番連続登録</button>
            <button id="addMasterRowBtn" class="btn">新規行を追加</button>
            <button id="refreshMastersBtn" class="btn">一覧を更新</button>
        </div>
    </div>
    <div id="master-edit-container"></div>
    </div>

<div id="precomp-view" class="hidden inout-view-container">
<div class="inout-header-controls">
        <div class="field-group">
            <label for="precomp-patient-number">患者番号</label>
        <input type="text" id="precomp-patient-number" placeholder="患者番号を入力">
        </div>
        <button id="precomp-load-btn" class="btn">呼び出し</button>

 <div class="buttons-group">
            <button id="precomp-import-btn" class="btn">CSVインポート</button>
            <button id="precomp-import-all-btn" class="btn">CSVインポート（全件）</button>
            <button id="precomp-export-btn" class="btn">CSVエクスポート</button>
            <button id="precomp-export-all-btn" class="btn">CSVエクスポート（全件）</button>
<button id="precomp-toggle-status-btn" class="btn">予製中断</button>
<button id="precomp-clear-btn" class="btn" style="background-color: #dc3545; color: white;">完全削除</button>
<button id="precomp-save-btn" class="btn" style="background-color: #0d6efd; color: white;">保存</button>
        </div>
    </div>
    <div class="inout-details-header">
        <button id="precomp-add-row-btn" class="btn">明細を追加</button>
    </div>
    <div id="precomp-details-container">
    </div>
</div>

<div id="settings-view" class="hidden">
    <div class="settings-form-container">
        <fieldset>
            <legend>e-mednet / ede 連携設定</legend>
            <p style="font-size: 11px; margin-bottom: 10px;">e-mednetとedeで共通のIDとパスワードを使用します。</p>
             <div class="field-group">
                <label for="emednetUserID">ユーザーID</label>
                <input type="text" id="emednetUserID" style="width: 300px;">
            </div>
            <div class="field-group">
                <label for="emednetPassword">パスワード</label>
                <input type="password" id="emednetPassword" style="width: 300px;">
            </div>
        </fieldset>

        <fieldset style="margin-top: 20px;">
            <legend>卸業者管理</legend>
            <div style="display: flex; gap: 10px; align-items: flex-end; margin-bottom: 10px;">
                <div class="field-group">
                    <label for="wholesalerCode">卸コード (数字)</label>
                    <input type="text" id="wholesalerCode" placeholder="例: 12345">
                </div>
                <div class="field-group">
                    <label for="wholesalerName">卸業者名</label>
                    <input type="text" id="wholesalerName" placeholder="例: 株式会社〇〇">
                </div>
                <button id="addWholesalerBtn" class="btn">追加</button>
            </div>
            <table class="data-table" id="wholesalers-table">
                <thead>
                    <tr>
                        <th style="width: 30%;">卸コード</th>
                        <th style="width: 50%;">卸業者名</th>
                        <th style="width: 20%;">操作</th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </fieldset>

        <fieldset style="margin-top: 20px;">
            <legend>マスターデータ管理</legend>
            <div class="buttons-group">
                <button id="reloadJcshmsBtn" class="btn">JCSHMSマスター再読込</button>
            </div>
            <p style="font-size: 11px; margin-top: 5px;">SOUフォルダ内のJCSHMS.CSVとJANCODE.CSVをデータベースに再登録します。処理には数分かかる場合があります。</p>
        </fieldset>

        <fieldset style="margin-top: 20px; border-color: #dc3545;">
            <legend style="color: #dc3545;">データメンテナンス</legend>

            <div style="margin-top: 10px; padding-bottom: 15px; border-bottom: 1px solid #ccc;">
                <p style="font-size: 11px; margin-bottom: 5px;">
                    <strong>マスターデータ整理:</strong> 在庫がゼロで、かつ過去3ヶ月間入出庫がなかった製品マスターを削除します。
                </p>
                <button id="getCleanupCandidatesBtn" class="btn">整理対象マスターのリストアップ</button>
                <div id="cleanup-output-container" style="margin-top: 10px;"></div>
            </div>

            <div class="buttons-group" style="margin-top: 20px;">
                <button id="clearAllTransactionsBtn" class="btn" style="background-color: #dc3545; color: white;">全取引データ削除</button>
 <button id="clearAllMastersBtn" class="btn" style="background-color: #dc3545; color: white;">製品マスター全削除</button>
            </div>
            <p style="font-size: 11px; margin-top: 5px; color: #dc3545;">
                <strong>注意:</strong> この操作は全ての取引履歴を完全に削除します。マスターデータは維持されますが、在庫は全て0になります。この操作は元に戻せません。
            </p>
        </fieldset>

<fieldset style="margin-top: 20px;">
            <legend>集計期間設定</legend>
            <p style="font-size: 11px; margin-bottom: 10px;">
                各機能で参照する期間を、本日を基準とした日数で指定します。<br>
                <b>開始日</b>は「本日 - 指定日数」、<b>終了日</b>は「無制限（最新データまで）」として自動計算されます。
            </p>
            <div class="field-group">
                <label for="calculationPeriodDays">集計期間日数（例: 90日）</label>
                <input type="number" id="calculationPeriodDays" style="width: 150px;">
            </div>
        </fieldset>


        <fieldset style="margin-top: 20px;">
    <legend>ファイルパス設定</legend>
    <div class="field-group">
        <label for="usageFolderPath">USAGEファイル取込パス</label>
        <input type="text" id="usageFolderPath" style="width: 500px;" placeholder="例: C:\medicom\USAGE_FILES">
    </div>
    <p style="font-size: 11px; margin-top: 5px;">
        処方データを自動で取り込むためのフォルダパスを指定します。指定されたフォルダ内で最も新しいファイルが読み込まれます。
    </p>
        <div class="field-group" style="margin-top: 15px;">
        <label for="edgePath">Edge連携 (ede) の実行パス</label>
        <input type="text" id="edgePath" style="width: 500px;" placeholder="例: C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe">
    </div>
    <p style="font-size: 11px; margin-top: 5px;">
        edeサイトに自動ログインするためのMicrosoft Edgeの実行ファイル(msedge.exe)の場所を指定します。
    </p>
</fieldset>

<fieldset style="margin-top: 20px; border-color: #ffc107;">
    <legend style="color: #ffc107;">データ移行</legend>
    <div class="field-group">
        <label>旧システムからの在庫データ移行</label>
        <button id="migrateInventoryBtn" class="btn">移行用CSVファイルを選択</button>
        <input type="file" id="migrateInventoryInput" style="display:none;" accept=".csv">
    </div>
    <p style="font-size: 11px; margin-top: 5px;">
        旧システムの在庫データを一括で棚卸記録として登録します。<br>
        CSVファイルには `inventory_date`, `product_code`, `quantity` の3列が必要です。
    </p>
    <div id="migration-result-container" style="margin-top: 15px; max-height: 400px; overflow-y: auto;"></div>
    </fieldset>

        <div class="buttons-group" style="margin-top: 20px;">
            <button id="saveSettingsBtn" class="btn" style="background-color: #0d6efd; color: white;">設定を保存</button>
        </div>
    </div>
</div>
<div id="deadstock-view" class="hidden">
    <div class="filter-container" style="display: flex; flex-wrap: wrap; gap: 10px 16px; align-items: flex-end; margin-bottom: 15px; border: 1px solid #ccc; padding: 10px;">
        <div class="field-group">
            <label for="ds-kanaName">製品名/カナ名</label>
            <input type="text" id="ds-kanaName" placeholder="（部分一致）">
        </div>
        <div class="field-group">
            <label for="ds-dosageForm">剤型</label>
            <select id="ds-dosageForm">
                <option value="">すべて</option>
                <option value="内">内</option>
                <option value="外">外</option>
                <option value="歯">歯</option>
                <option value="注">注</option>
                <option value="機">機</option>
                <option value="他">他</option>
            </select>
        </div>
        <div class="field-group">
            <label for="ds-shelf-number">棚番</label>
            <input type="text" id="ds-shelf-number" placeholder="（部分一致）">
        </div>
        <div class="field-group">
            <label><input type="checkbox" id="ds-exclude-zero-stock"> 在庫が0の品目を除外</label>
        </div>
        <div class="buttons-group">
            <button id="run-dead-stock-btn" class="btn">リスト作成</button>
            <button id="import-deadstock-btn" class="btn">CSV読込</button>
            <button id="create-deadstock-csv-btn" class="btn">CSV作成</button>
            <button id="print-deadstock-btn" class="btn">印刷</button>
        </div>
    </div>
    <div id="deadstock-output-container"></div>
    <div id="deadstock-print-area" class="hidden"></div>
</div>

<div id="order-view" class="hidden">
    <div class="controls-grid" style="display: flex; flex-wrap: wrap; gap: 10px 16px; align-items: flex-end; margin-bottom: 15px; border: 1px solid #ccc; padding: 10px;">
        <div style="width: 100%; display: flex; gap: 10px; align-items: flex-end; border-bottom: 1px solid #ccc; padding-bottom: 10px;">
            <form id="order-barcode-form" style="flex-grow: 1;">
                <div class="field-group">
                    <label for="order-barcode-input" style="font-weight: bold;">バーコードで個別追加</label>
                    <input type="text" id="order-barcode-input" inputmode="latin" placeholder="バーコードをスキャンするか、GS1コードを入力してEnter" style="ime-mode: disabled;">
                </div>
            </form>
            <div class="field-group">
                <label>&nbsp;</label>
                <button id="continuous-order-btn" class="btn btn-violet">連続バーコード発注</button>
            </div>
        </div>
        <div class="field-group">
            <label for="order-kanaName">薬品名カナ</label>
            <input type="text" id="order-kanaName" placeholder="（前方一致）">
        </div>
        <div class="field-group">
            <label for="order-dosageForm">剤形</label>
            <input type="text" id="order-dosageForm" placeholder="（部分一致）">
        </div>
        <div class="field-group">
            <label for="order-shelf-number">棚番</label>
            <input type="text" id="order-shelf-number" placeholder="（部分一致）">
        </div>
        <div class="field-group">
            <label for="order-reorder-coefficient">発注点係数</label>
            <input type="number" id="order-reorder-coefficient" value="1.5" step="0.1" style="width: 80px;">
        </div>
        <div class="field-group">
            <button id="generate-order-candidates-btn" class="btn">不足品リストを作成</button>
        </div>
                <div class="field-group">
            <button id="createOrderCsvBtn" class="btn" style="background-color: #198754; color: white;">発注書作成 (CSVダウンロード)</button>
        </div>
    </div>
    <div id="order-candidates-output">
    </div>
</div>

<div id="backorder-view" class="hidden">
    <div class="filter-container">
        <p class="view-subtitle" style="margin:0;">発注残一覧</p>
    </div>
    <div id="backorder-output-container"></div>
</div>

<div id="pricing-view" class="hidden">
<p class="view-title">卸別・納入価格一括更新</p>
<div class="controls-grid" style="border: 1px solid #ccc; padding: 10px; margin-bottom: 15px;">
        <div style="display: flex; flex-wrap: wrap; gap: 20px; align-items: flex-end;">

            <fieldset style="border: 1px solid #ccc; padding: 10px;">
                <legend>ステップ1: テンプレート出力</legend>
                <div class="field-group">
                    <label for="pricing-wholesaler-select">見積もり依頼する卸業者を選択</label>
                    <select id="pricing-wholesaler-select"></select>
                </div>
                <button id="pricing-export-btn" class="btn">全品の見積依頼Excelを出力</button>
                <button id="pricing-export-unregistered-btn" class="btn">未登録品の見積依頼Excelを出力</button>
            </fieldset>

            <fieldset style="border: 1px solid #ccc; padding: 10px;">
                <legend>ステップ2: 見積もり入力</legend>
                <div class="field-group">
                    <label for="pricing-upload-input">卸から回収したCSVファイルを選択 (複数可)</label>
                    <input type="file" id="pricing-upload-input" multiple accept=".csv">
                </div>
            </fieldset>

            <fieldset style="border: 1px solid #ccc; padding: 10px;">
                <legend>ステップ3: マスター更新</legend>
                <button id="set-lowest-price-btn" class="btn">一括で最安値に設定</button>
                <button id="pricing-bulk-update-btn" class="btn" style="background-color: #dc3545; color: white;">一覧の選択内容でマスターを一括更新</button>
            </fieldset>

            <fieldset style="border: 1px solid #ccc; padding: 10px;">
                <legend>ステップ4: 納入価一括インポート</legend>
                <div class="field-group">
                    <label for="pricing-direct-import-input">卸コードと納入価が入力済みのCSVファイルを選択</label>
                    <input type="file" id="pricing-direct-import-input" style="display:none;" accept=".csv">
                    <button id="pricing-direct-import-btn" class="btn">ファイルを選択して一括更新</button>
                </div>
            </fieldset>

            <fieldset style="border: 1px solid #ccc; padding: 10px;">
                <legend>フィルター</legend>
                <div class="field-group">
                    <label for="pricing-maker-filter">メーカー名絞り込み</label>
                    <input type="text" id="pricing-maker-filter" placeholder="メーカー名を入力">
                </div>
                <div class="field-group">
                    <label><input type="checkbox" id="pricing-unregistered-filter"> 採用卸 未登録のみ</label>
                </div>
            </fieldset>
            </div>
    </div>
    <div id="pricing-output-container">
        <p>ステップ2で回収済みExcelをアップロードしてください。</p>
    </div>
</div>

<div id="aggregation-view" class="hidden">
    <div class="filter-container" style="display: flex; flex-wrap: wrap; gap: 10px 16px; align-items: flex-end; margin-bottom: 15px; border: 1px solid #ccc; padding: 10px;">
            <div class="field-group">
                <label for="agg-kanaName">製品名/カナ名</label>
                <input type="text" id="agg-kanaName" placeholder="（部分一致）">
            </div>

            <div class="field-group">
                <label for="agg-dosageForm">剤型</label>
                <select id="agg-dosageForm">
                    <option value="all">すべて</option>
                    <option value="内">内</option>
                    <option value="外">外</option>
                    <option value="歯">歯</option>
                    <option value="注">注</option>
                    <option value="機">機</option>
                    <option value="他">他</option>
                </select>
            </div>

            <div class="field-group"><label for="reorder-coefficient">発注点係数</label><input type="number" id="reorder-coefficient" value="1.5" step="0.1" style="width: 80px;"></div>
            <div class="field-group">
                <label>薬の種類</label>
                <div style="display: flex; flex-wrap: wrap; gap: 5px 10px;">
                    <label><input type="checkbox" name="drugType" value="poison">毒</label>
                    <label><input type="checkbox" name="drugType" value="deleterious">劇</label>
                    <label><input type="checkbox" name="drugType" value="narcotic">麻</label>
                    <label><input type="checkbox" name="drugType" value="psychotropic1">向1</label>
                    <label><input type="checkbox" name="drugType" value="psychotropic2">向2</label>
                    <label><input type="checkbox" name="drugType" value="psychotropic3">向3</label>
                    <label><input type="checkbox" name="drugType" value="stimulant">覚</label>
                    <label><input type="checkbox" name="drugType" value="stimulant_raw">覚原</label>
                </div>
            </div>
            <div class="field-group"><label><input type="checkbox" id="reorder-needed-filter"> 不足品のみ</label></div>
            <div class="field-group"><label><input type="checkbox" id="movement-only-filter"> 期間内に動きがあった品目のみ</label></div>
            <div class="buttons-group" style="margin-left: auto;">
                <button id="run-aggregation-btn" class="btn">集計実行</button>
                <button id="print-aggregation-btn" class="btn">印刷</button>
            </div>
        </div>
        <div id="aggregation-output-container"></div>
</div>

<div id="valuation-view" class="hidden">
        <div class="filter-container" style="display: flex; flex-wrap: wrap; gap: 10px 16px; align-items: flex-end; margin-bottom: 15px; border: 1px solid #ccc; padding: 10px;">
            <div class="field-group">
                <label for="valuation-date">評価基準日</label>
                <input type="date" id="valuation-date">
            </div>

            <div class="field-group">
                <label for="val-kanaName">製品名/カナ名</label>
                <input type="text" id="val-kanaName" placeholder="（部分一致）">
            </div>

            <div class="field-group">
                <label for="val-dosageForm">剤型</label>
                <select id="val-dosageForm">
                    <option value="all">すべて</option>
                    <option value="内">内</option>
                    <option value="外">外</option>
                    <option value="歯">歯</option>
                    <option value="注">注</option>
                    <option value="機">機</option>
                    <option value="他">他</option>
                </select>
            </div>

            <div class="buttons-group">
                <button id="run-valuation-btn" class="btn">計算実行</button>
                <button id="export-valuation-btn" class="btn">Excelエクスポート</button>
            </div>
        </div>

        <div id="valuation-output-container">
            <p>評価基準日を指定して「計算実行」を押してください。</p>
        </div>
</div>

<div id="returns-view" class="hidden">
        <div class="filter-container" style="display: flex; flex-wrap: wrap; gap: 10px 16px; align-items: flex-end; margin-bottom: 15px; border: 1px solid #ccc; padding: 10px;">
            <div class="field-group">
                <label for="ret-kanaName">薬品名カナ</label>
                <input type="text" id="ret-kanaName" placeholder="（前方一致）">
            </div>
            <div class="field-group">
                <label for="ret-dosageForm">剤形</label>
                <select id="ret-dosageForm">
                    <option value="">すべて</option>
                    <option value="内">内</option>
                    <option value="外">外</option>
                    <option value="歯">歯</option>
                    <option value="注">注</option>
                    <option value="機">機</option>
                    <option value="他">他</option>
                </select>
            </div>
            <div class="field-group">
                <label for="ret-shelf-number">棚番</label>
                <input type="text" id="ret-shelf-number" placeholder="（部分一致）">
            </div>
            <div class="field-group">
                <label for="ret-coefficient">係数</label>
                <input type="number" id="ret-coefficient" value="1.5" step="0.1" style="width: 80px;">
            </div>
            <div class="buttons-group">
                <button id="run-returns-list-btn" class="btn">リスト作成</button>
                <button id="print-returns-list-btn" class="btn">印刷</button>
            </div>
        </div>
        <div id="returns-list-output-container">
            <p>フィルター条件を指定して「リスト作成」を押してください。</p>
        </div>
</div>

    <div id="inventory-history-view" class="hidden">
        <p class="view-title">棚卸履歴の修正・削除</p>
        <div class="filter-container" style="display: flex; gap: 10px; align-items: flex-end; border: 1px solid #ccc; padding: 10px; margin-bottom: 15px;">
            <div class="field-group">
                <label for="history-inv-date">日付</label>
                <input type="date" id="history-inv-date">
            </div>
            <button id="history-inv-show-btn" class="btn">表示</button>
        </div>
        <div id="inventory-history-output">
            <p>日付を選択して「表示」ボタンを押してください。</p>
        </div>
    </div>

<div id="ledger-view" class="hidden">
    <div style="display: flex; justify-content: space-between; align-items: flex-start;">
        <p class="view-title">薬品管理台帳</p>
        <div id="ledger-selected-product" style="font-weight: bold; font-size: 1.2em; text-align: right;"></div>
    </div>
    <div class="filter-container" style="display: flex; flex-wrap: wrap; gap: 10px; align-items: flex-end;">
        <div class="field-group">
            <label>品目を選択</label>
            <button id="ledger-select-product-btn" class="btn">検索して選択...</button>
        </div>
        <div class="field-group">
            <label for="ledger-shelf-number">棚番</label>
            <input type="text" id="ledger-shelf-number" placeholder="（部分一致）">
        </div>
        <div class="field-group">
            <label>薬の種類</label>
            <div style="display: flex; flex-wrap: wrap; gap: 5px 10px;">
                <label><input type="checkbox" name="ledgerDrugType" value="poison">毒</label>
                <label><input type="checkbox" name="ledgerDrugType" value="deleterious">劇</label>
                <label><input type="checkbox" name="ledgerDrugType" value="narcotic">麻</label>
                <label><input type="checkbox" name="ledgerDrugType" value="psychotropic1">向1</label>
                <label><input type="checkbox" name="ledgerDrugType" value="psychotropic2">向2</label>
                <label><input type="checkbox" name="ledgerDrugType" value="psychotropic3">向3</label>
            </div>
        </div>
        <div class="buttons-group" style="margin-left: auto;">
            <button id="print-ledger-btn" class="btn">この台帳を印刷</button>
        </div>
    </div>
    <div id="ledger-output-container">
        <p>上記ボタンから品目を選択してください。</p>
    </div>
</div>
</div>

<div id="continuous-order-modal" class="modal-overlay hidden">
    <div class="modal-content" style="max-width: 600px;">
        <div class="modal-header">
            <p class="modal-title">連続バーコード発注</p>
            <button id="close-continuous-modal-btn" class="close-button">&times;</button>
        </div>
        <div class="modal-body">
            <form id="continuous-barcode-form">
                <div class="field-group">
                    <label for="continuous-barcode-input" style="font-weight: bold;">バーコードをスキャンしてください</label>
                    <input type="text" id="continuous-barcode-input" inputmode="latin" style="font-size: 1.2em; padding: 8px; ime-mode: disabled;">
                </div>
            </form>
            <div id="scanned-items-container" style="margin-top: 15px;">
                <p>スキャン済みリスト (<span id="scanned-items-count">0</span>件)</p>
                <div id="scanned-items-list" style="max-height: 40vh; overflow-y: auto; border: 1px solid #ccc; padding: 5px; min-height: 100px;"></div>
                <div id="processing-indicator" class="hidden" style="font-size: 12px; color: #555; margin-top: 5px;">処理中...</div>
            </div>
        </div>
    </div>
</div>

<div id="bulk-shelf-number-modal" class="modal-overlay hidden">
    <div class="modal-content" style="max-width: 700px;">
        <div class="modal-header">
            <p class="modal-title">棚番 連続一括登録</p>
            <button id="close-shelf-modal-btn" class="close-button">&times;</button>
        </div>
        <div class="modal-body">
            <form id="shelf-barcode-form">
                <div class="field-group">
                    <label for="shelf-barcode-input" style="font-weight: bold;">バーコードを連続スキャンしてください</label>
                    <input type="text" id="shelf-barcode-input" inputmode="latin" placeholder="GS1コードをスキャンしてEnter" style="font-size: 1.2em; padding: 8px; ime-mode: disabled;">
                </div>
            </form>
            <div id="shelf-scanned-items-container" style="margin-top: 15px;">
                <p>スキャン済みリスト (<span id="shelf-scanned-count">0</span>件)</p>
                <div id="shelf-scanned-list" style="max-height: 30vh; overflow-y: auto; border: 1px solid #ccc; padding: 5px; min-height: 100px;"></div>
            </div>
            <div id="shelf-register-section" style="margin-top: 20px; padding-top: 20px; border-top: 2px solid #007bff;">
                <div class="field-group">
                    <label for="shelf-number-input" style="font-weight: bold;">上記リストの品目に登録する棚番</label>
                    <input type="text" id="shelf-number-input" placeholder="例: A-1-1" style="font-size: 1.2em; padding: 8px;">
                </div>
                <div style="margin-top: 10px; text-align: right;">
                    <button id="shelf-clear-btn" class="btn">リストをクリア</button>
                    <button id="shelf-register-btn" class="btn" style="background-color: #0d6efd; color: white;">この棚番で登録</button>
                </div>
            </div>
        </div>
    </div>
</div>
<input type="file" id="importCustomersInput" style="display:none;" accept=".csv">
<input type="file" id="importDeadstockInput" style="display:none;" accept=".csv">
<input type="file" id="importProductsInput" style="display:none;" accept=".csv">
<input type="file" id="precomp-import-input" style="display:none;" accept=".csv">
<input type="file" id="precomp-import-all-input" style="display:none;" accept=".csv">

</main>

<div id="loading-overlay" class="hidden">
    <div class="spinner"></div>
    <p id="loading-message">Processing...</p>
</div>
<div id="notification-box" class="notification-box"></div>

<script type="module" src="/static/js/app.js"></script>
</body>
</html>

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\stock\handler.go -----
package stock

import (
	"database/sql"
	"encoding/json"
	"net/http"
	"wasabi/db"
)

// GetCurrentStockHandler はJANコード指定で現在の理論在庫を返します。
func GetCurrentStockHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		janCode := r.URL.Query().Get("jan_code")
		if janCode == "" {
			http.Error(w, "jan_code parameter is required", http.StatusBadRequest)
			return
		}

		stock, err := db.CalculateCurrentStockForProduct(conn, janCode)
		if err != nil {
			http.Error(w, "Failed to calculate stock: "+err.Error(), http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]float64{"stock": stock})
	}
}

// ▼▼▼ [修正点] 全製品の在庫を返すハンドラを末尾に追加 ▼▼▼
// GetAllCurrentStockHandler は全製品の現在の理論在庫を返します。
func GetAllCurrentStockHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		stockMap, err := db.GetAllCurrentStockMap(conn)
		if err != nil {
			http.Error(w, "Failed to calculate all stocks: "+err.Error(), http.StatusInternalServerError)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(stockMap)
	}
}

// ▲▲▲ 修正ここまで ▲▲▲


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\transaction\handler.go -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\transaction\handler.go

package transaction

import (
	"database/sql"
	"encoding/json"
	"net/http"
	"strconv" // strconvをインポート
	"strings"
	"wasabi/db"
)

// GetReceiptsHandler returns a list of receipt numbers for a given date.
func GetReceiptsHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		date := r.URL.Query().Get("date")
		if date == "" {
			http.Error(w, "Date parameter is required", http.StatusBadRequest)
			return
		}
		// Assuming you will add GetReceiptNumbersByDate to db package
		receipts, err := db.GetReceiptNumbersByDate(conn, date)
		if err != nil {
			http.Error(w, "Failed to get receipt numbers", http.StatusInternalServerError)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(receipts)
	}
}

// GetTransactionHandler returns all line items for a given receipt number.
func GetTransactionHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		receiptNumber := strings.TrimPrefix(r.URL.Path, "/api/transaction/")
		if receiptNumber == "" {
			http.Error(w, "Receipt number is required", http.StatusBadRequest)
			return
		}
		records, err := db.GetTransactionsByReceiptNumber(conn, receiptNumber)
		if err != nil {
			http.Error(w, "Failed to get transaction details", http.StatusInternalServerError)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(records)
	}
}

// DeleteTransactionHandler handles the deletion of all records for a given receipt number.
func DeleteTransactionHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		receiptNumber := strings.TrimPrefix(r.URL.Path, "/api/transaction/delete/")
		if receiptNumber == "" {
			http.Error(w, "Receipt number is required", http.StatusBadRequest)
			return
		}
		tx, err := conn.Begin()
		if err != nil {
			http.Error(w, "Failed to start transaction", http.StatusInternalServerError)
			return
		}
		defer tx.Rollback()

		if err := db.DeleteTransactionsByReceiptNumberInTx(tx, receiptNumber); err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}

		if err := tx.Commit(); err != nil {
			http.Error(w, "Failed to commit transaction", http.StatusInternalServerError)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{"message": "Deleted successfully"})
	}
}

// ▼▼▼【ここから追加】▼▼▼

// GetInventoryByDateHandler は指定された日付の棚卸レコードを返します。
func GetInventoryByDateHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		date := r.URL.Query().Get("date")
		if date == "" {
			http.Error(w, "date parameter is required", http.StatusBadRequest)
			return
		}
		records, err := db.GetInventoryTransactionsByDate(conn, date)
		if err != nil {
			http.Error(w, "Failed to get inventory transactions by date", http.StatusInternalServerError)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(records)
	}
}

// DeleteTransactionByIDHandler はIDを指定して単一の取引レコードを削除します。
func DeleteTransactionByIDHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// URLからIDを取得 (e.g., /api/transaction/delete_by_id/123)
		idStr := strings.TrimPrefix(r.URL.Path, "/api/transaction/delete_by_id/")
		id, err := strconv.Atoi(idStr)
		if err != nil {
			http.Error(w, "Invalid transaction ID", http.StatusBadRequest)
			return
		}

		tx, err := conn.Begin()
		if err != nil {
			http.Error(w, "Failed to start transaction", http.StatusInternalServerError)
			return
		}
		defer tx.Rollback()

		if err := db.DeleteTransactionByIDInTx(tx, id); err != nil {
			http.Error(w, "Failed to delete transaction: "+err.Error(), http.StatusInternalServerError)
			return
		}

		if err := tx.Commit(); err != nil {
			http.Error(w, "Failed to commit transaction", http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{"message": "レコードを削除しました。"})
	}
}

// ▲▲▲【追加ここまで】▲▲▲


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\units\handler.go -----
package units

import (
	"encoding/json"
	"net/http"
)

// GetTaniMapHandlerは、ロード済みの単位マップを返します。
func GetTaniMapHandler() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		if internalMap == nil {
			json.NewEncoder(w).Encode(make(map[string]string))
			return
		}
		json.NewEncoder(w).Encode(internalMap)
	}
}

----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\units\units.go -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\units\units.go

package units

import (
	"encoding/csv"
	"fmt"
	"io"
	"os"
	"wasabi/model"

	"golang.org/x/text/encoding/japanese"
	"golang.org/x/text/transform"
)

var internalMap map[string]string
var reverseMap map[string]string

// FormatPackageSpecは、JCSHMSのデータから仕様通りの包装文字列を生成します。
func FormatPackageSpec(jcshms *model.JCShms) string {
	if jcshms == nil {
		return ""
	}

	yjUnitName := ResolveName(jcshms.JC039)
	pkg := fmt.Sprintf("%s %g%s", jcshms.JC037, jcshms.JC044, yjUnitName)

	if jcshms.JA006.Valid && jcshms.JA008.Valid && jcshms.JA008.Float64 != 0 {
		resolveJanUnitName := func(code string) string {
			if code != "0" && code != "" {
				return ResolveName(code)
			}
			return "" // 0か空の場合は単位を省略
		}

		janUnitName := resolveJanUnitName(jcshms.JA007.String)

		pkg += fmt.Sprintf(" (%g%s×%g%s)",
			jcshms.JA006.Float64,
			yjUnitName,
			jcshms.JA008.Float64,
			janUnitName,
		)
	}
	return pkg
}

// ▼▼▼ [修正点] 「簡易包装」を生成する新しい関数を末尾に追加 ▼▼▼
// FormatSimplePackageSpec は、「包装形態 + 内包装数量 + YJ単位名」の簡易的な包装文字列を生成します。
func FormatSimplePackageSpec(jcshms *model.JCShms) string {
	if jcshms == nil {
		return ""
	}

	// 内包装数量が存在し、0より大きい場合のみ文字列を組み立てる
	if jcshms.JA006.Valid && jcshms.JA006.Float64 > 0 {
		yjUnitName := ResolveName(jcshms.JC039)
		return fmt.Sprintf("%s %g%s", jcshms.JC037, jcshms.JA006.Float64, yjUnitName)
	}

	// 条件に合わない場合は、包装形態のみを返すなどのフォールバック
	// ここでは、より情報量が多い詳細包装を返す
	return FormatPackageSpec(jcshms)
}

// ▲▲▲ 修正ここまで ▲▲▲

// (LoadTANIFile, ResolveName, ResolveCode functions are unchanged)
func LoadTANIFile(path string) (map[string]string, error) {
	file, err := os.Open(path)
	if err != nil {
		return nil, fmt.Errorf("LoadTANIFile: open %s: %w", path, err)
	}
	defer file.Close()

	decoder := japanese.ShiftJIS.NewDecoder()
	reader := csv.NewReader(transform.NewReader(file, decoder))
	reader.LazyQuotes = true
	reader.FieldsPerRecord = -1

	m := make(map[string]string)
	for {
		record, err := reader.Read()
		if err == io.EOF {
			break
		}
		if err != nil {
			return nil, fmt.Errorf("LoadTANIFile: read %s: %w", path, err)
		}
		if len(record) < 2 {
			continue
		}
		code := record[0]
		name := record[1]
		m[code] = name
	}
	internalMap = m

	reverseMap = make(map[string]string)
	for code, name := range internalMap {
		reverseMap[name] = code
	}

	return m, nil
}

func ResolveName(code string) string {
	if internalMap == nil {
		return code
	}
	if name, ok := internalMap[code]; ok {
		return name
	}
	return code
}

func ResolveCode(name string) string {
	if reverseMap == nil {
		return ""
	}
	if code, ok := reverseMap[name]; ok {
		return code
	}
	return ""
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\usage\handler.go -----
package usage

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"mime/multipart"
	"net/http"
	"os"
	"strings"
	"wasabi/config"
	"wasabi/db"
	"wasabi/mappers"
	"wasabi/mastermanager"
	"wasabi/model"
	"wasabi/parsers"
)

const insertTransactionQuery = `
INSERT OR REPLACE INTO transaction_records (
    transaction_date, client_code, receipt_number, line_number, flag,
    jan_code, yj_code, product_name, kana_name, usage_classification, package_form, package_spec, maker_name,
    dat_quantity, jan_pack_inner_qty, jan_quantity, jan_pack_unit_qty, jan_unit_name, jan_unit_code,
    yj_quantity, yj_pack_unit_qty, yj_unit_name, unit_price, purchase_price, supplier_wholesale,
    subtotal, tax_amount, tax_rate, expiry_date, lot_number, flag_poison,
    flag_deleterious, flag_narcotic, flag_psychotropic, flag_stimulant,
    flag_stimulant_raw, process_flag_ma
) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`

// UploadUsageHandler は自動または手動でのUSAGEファイルアップロードを処理します。
func UploadUsageHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var file io.Reader
		var err error

		if strings.Contains(r.Header.Get("Content-Type"), "multipart/form-data") {
			log.Println("Processing manual USAGE file upload...")
			var f multipart.File
			f, _, err = r.FormFile("file")
			if err != nil {
				http.Error(w, "ファイルの取得に失敗しました: "+err.Error(), http.StatusBadRequest)
				return
			}
			defer f.Close()
			file = f
		} else {
			log.Println("Processing automatic USAGE file import...")
			cfg, cfgErr := config.LoadConfig()
			if cfgErr != nil {
				http.Error(w, "設定ファイルの読み込みに失敗: "+cfgErr.Error(), http.StatusInternalServerError)
				return
			}
			if cfg.UsageFolderPath == "" {
				http.Error(w, "USAGEファイル取込パスが設定されていません。", http.StatusBadRequest)
				return
			}

			rawPath := cfg.UsageFolderPath
			// ▼▼▼【ここが修正箇所】パスの前後の空白と " を自動的に削除 ▼▼▼
			unquotedPath := strings.Trim(strings.TrimSpace(rawPath), "\"")
			// ▲▲▲【修正ここまで】▲▲▲

			filePath := strings.ReplaceAll(unquotedPath, "\\", "/")

			log.Printf("Opening specified USAGE file: %s", filePath)
			f, fErr := os.Open(filePath)
			if fErr != nil {
				displayError := fmt.Sprintf("設定されたパスのファイルを開けませんでした。\nパス: %s\nエラー: %v", filePath, fErr)
				http.Error(w, displayError, http.StatusInternalServerError)
				return
			}
			defer f.Close()
			file = f
		}

		processedRecords, procErr := processUsageFile(conn, file)
		if procErr != nil {
			http.Error(w, procErr.Error(), http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		json.NewEncoder(w).Encode(map[string]interface{}{
			"records": processedRecords,
		})
	}
}

// processUsageFile はファイルストリームから処方データを解析しDBに登録する共通関数です。
func processUsageFile(conn *sql.DB, file io.Reader) ([]model.TransactionRecord, error) {
	parsed, err := parsers.ParseUsage(file)
	if err != nil {
		return nil, fmt.Errorf("USAGEファイルの解析に失敗しました: %w", err)
	}

	var originalJournalMode string
	conn.QueryRow("PRAGMA journal_mode").Scan(&originalJournalMode)
	conn.Exec("PRAGMA journal_mode = MEMORY;")
	conn.Exec("PRAGMA synchronous = OFF;")
	defer func() {
		conn.Exec("PRAGMA synchronous = FULL;")
		conn.Exec(fmt.Sprintf("PRAGMA journal_mode = %s;", originalJournalMode))
	}()

	filtered := removeUsageDuplicates(parsed)
	if len(filtered) == 0 {
		return []model.TransactionRecord{}, nil
	}

	tx, err := conn.Begin()
	if err != nil {
		return nil, fmt.Errorf("トランザクションの開始に失敗: %w", err)
	}
	defer tx.Rollback()

	minDate, maxDate := "99999999", "00000000"
	for _, rec := range filtered {
		if rec.Date < minDate {
			minDate = rec.Date
		}
		if rec.Date > maxDate {
			maxDate = rec.Date
		}
	}

	if err := db.DeleteUsageTransactionsInDateRange(tx, minDate, maxDate); err != nil {
		return nil, fmt.Errorf("既存の処方データ削除に失敗: %w", err)
	}

	var keyList, janList []string
	keySet, janSet := make(map[string]struct{}), make(map[string]struct{})
	for _, rec := range filtered {
		if rec.JanCode != "" && rec.JanCode != "0000000000000" {
			if _, seen := janSet[rec.JanCode]; !seen {
				janSet[rec.JanCode] = struct{}{}
				janList = append(janList, rec.JanCode)
			}
		}
		key := rec.JanCode
		if key == "" || key == "0000000000000" {
			key = fmt.Sprintf("9999999999999%s", rec.ProductName)
		}
		if _, seen := keySet[key]; !seen {
			keySet[key] = struct{}{}
			keyList = append(keyList, key)
		}
	}

	mastersMap, err := db.GetProductMastersByCodesMap(tx, keyList)
	if err != nil {
		return nil, err
	}
	jcshmsMap, err := db.GetJcshmsByCodesMap(tx, janList)
	if err != nil {
		return nil, err
	}

	stmt, err := tx.Prepare(insertTransactionQuery)
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	var finalRecords []model.TransactionRecord
	for _, rec := range filtered {
		ar := model.TransactionRecord{
			TransactionDate: rec.Date, Flag: 3, JanCode: rec.JanCode,
			YjCode: rec.YjCode, ProductName: rec.ProductName,
			YjQuantity: rec.YjQuantity, YjUnitName: rec.YjUnitName,
		}
		master, err := mastermanager.FindOrCreate(tx, rec.JanCode, rec.ProductName, mastersMap, jcshmsMap)
		if err != nil {
			return nil, err
		}

		mappers.MapProductMasterToTransaction(&ar, master)
		if master.Origin == "JCSHMS" {
			ar.ProcessFlagMA = "COMPLETE"
		} else {
			ar.ProcessFlagMA = "PROVISIONAL"
		}

		_, err = stmt.Exec(
			ar.TransactionDate, ar.ClientCode, ar.ReceiptNumber, ar.LineNumber, ar.Flag,
			ar.JanCode, ar.YjCode, ar.ProductName, ar.KanaName, ar.UsageClassification, ar.PackageForm, ar.PackageSpec, ar.MakerName,
			ar.DatQuantity, ar.JanPackInnerQty, ar.JanQuantity, ar.JanPackUnitQty, ar.JanUnitName, ar.JanUnitCode,
			ar.YjQuantity, ar.YjPackUnitQty, ar.YjUnitName, ar.UnitPrice, ar.PurchasePrice, ar.SupplierWholesale,
			ar.Subtotal, ar.TaxAmount, ar.TaxRate, ar.ExpiryDate, ar.LotNumber, ar.FlagPoison,
			ar.FlagDeleterious, ar.FlagNarcotic, ar.FlagPsychotropic, ar.FlagStimulant,
			ar.FlagStimulantRaw, ar.ProcessFlagMA,
		)
		if err != nil {
			return nil, fmt.Errorf("failed to insert record for JAN %s: %w", ar.JanCode, err)
		}

		finalRecords = append(finalRecords, ar)
	}

	if err := tx.Commit(); err != nil {
		return nil, fmt.Errorf("トランザクションのコミットに失敗: %w", err)
	}
	return finalRecords, nil
}

func removeUsageDuplicates(records []model.UnifiedInputRecord) []model.UnifiedInputRecord {
	seen := make(map[string]struct{})
	var result []model.UnifiedInputRecord
	for _, r := range records {
		key := fmt.Sprintf("%s|%s|%s|%s", r.Date, r.JanCode, r.YjCode, r.ProductName)
		if _, ok := seen[key]; ok {
			continue
		}
		seen[key] = struct{}{}
		result = append(result, r)
	}
	return result
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\valuation\handler.go -----
package valuation

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"net/http"
	"strconv"
	"strings"
	"wasabi/db"
	"wasabi/model"

	"github.com/xuri/excelize/v2"
)

// GetValuationHandler は在庫評価レポートのデータを返します
func GetValuationHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		q := r.URL.Query()

		filters := model.ValuationFilters{
			Date:                q.Get("date"),
			KanaName:            q.Get("kanaName"),
			UsageClassification: q.Get("dosageForm"),
		}

		if filters.Date == "" {
			http.Error(w, "Date parameter is required", http.StatusBadRequest)
			return
		}

		results, err := db.GetInventoryValuation(conn, filters)

		if err != nil {
			http.Error(w, "Failed to get inventory valuation: "+err.Error(), http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(results)
	}
}

// ExportValuationHandler は在庫評価レポートをExcelファイルとしてエクスポートします。
func ExportValuationHandler(conn *sql.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		q := r.URL.Query()
		filters := model.ValuationFilters{
			Date:                q.Get("date"),
			KanaName:            q.Get("kanaName"),
			UsageClassification: q.Get("dosageForm"),
		}

		if filters.Date == "" {
			http.Error(w, "Date parameter is required", http.StatusBadRequest)
			return
		}

		results, err := db.GetInventoryValuation(conn, filters)
		if err != nil {
			http.Error(w, "Failed to get inventory valuation for export: "+err.Error(), http.StatusInternalServerError)
			return
		}

		f := excelize.NewFile()
		sheetName := "在庫評価一覧"
		index, _ := f.NewSheet(sheetName)
		f.SetActiveSheet(index)
		f.DeleteSheet("Sheet1")

		// ヘッダーを書き込み
		headers := []string{"剤型", "製品名", "包装", "在庫数", "YJ単位", "薬価金額", "納入価金額"}
		headerStyle, _ := f.NewStyle(&excelize.Style{
			Font:      &excelize.Font{Bold: true},
			Fill:      excelize.Fill{Type: "pattern", Color: []string{"#F0F0F0"}, Pattern: 1},
			Alignment: &excelize.Alignment{Horizontal: "center"},
		})
		for i, h := range headers {
			cell, _ := excelize.CoordinatesToCellName(i+1, 1)
			f.SetCellValue(sheetName, cell, h)
			f.SetCellStyle(sheetName, cell, cell, headerStyle)
		}

		// スタイル設定
		currencyStyle, _ := f.NewStyle(&excelize.Style{NumFmt: 2}) // 桁区切り
		ucMap := map[string]string{"1": "内", "2": "外", "3": "歯", "4": "注", "5": "機", "6": "他"}
		rowNum := 2
		var grandTotalNhi, grandTotalPurchase float64

		for _, group := range results {
			ucName := ucMap[strings.TrimSpace(group.UsageClassification)]
			if ucName == "" {
				ucName = group.UsageClassification
			}

			// 剤型ごとの詳細行
			for _, row := range group.DetailRows {
				stockStr := fmt.Sprintf("%.2f", row.Stock)
				f.SetCellValue(sheetName, "A"+strconv.Itoa(rowNum), ucName)
				f.SetCellValue(sheetName, "B"+strconv.Itoa(rowNum), row.ProductName)
				f.SetCellValue(sheetName, "C"+strconv.Itoa(rowNum), row.PackageSpec)
				f.SetCellValue(sheetName, "D"+strconv.Itoa(rowNum), stockStr)
				f.SetCellValue(sheetName, "E"+strconv.Itoa(rowNum), row.YjUnitName)
				f.SetCellValue(sheetName, "F"+strconv.Itoa(rowNum), row.TotalNhiValue)
				f.SetCellValue(sheetName, "G"+strconv.Itoa(rowNum), row.TotalPurchaseValue)
				rowNum++
			}
			grandTotalNhi += group.TotalNhiValue
			grandTotalPurchase += group.TotalPurchaseValue
		}

		// 総合計
		f.SetCellValue(sheetName, "E"+strconv.Itoa(rowNum+1), "総合計")
		f.SetCellValue(sheetName, "F"+strconv.Itoa(rowNum+1), grandTotalNhi)
		f.SetCellValue(sheetName, "G"+strconv.Itoa(rowNum+1), grandTotalPurchase)
		totalStyle, _ := f.NewStyle(&excelize.Style{Font: &excelize.Font{Bold: true}})
		f.SetCellStyle(sheetName, "E"+strconv.Itoa(rowNum+1), "G"+strconv.Itoa(rowNum+1), totalStyle)
		f.SetCellStyle(sheetName, "F2", "G"+strconv.Itoa(rowNum+1), currencyStyle)

		// ファイル名を設定してダウンロード
		fileName := fmt.Sprintf("在庫評価一覧_%s.xlsx", filters.Date)
		w.Header().Set("Content-Type", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
		w.Header().Set("Content-Disposition", "attachment; filename="+fileName)
		if err := f.Write(w); err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		}
	}
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\main.go -----
// C:\Users\wasab\OneDrive\デスクトップ\WASABI\main.go
package main

import (
	"database/sql"
	"log"
	"net/http"
	"os/exec"
	"runtime"

	_ "github.com/mattn/go-sqlite3"

	"wasabi/aggregation"
	"wasabi/backorder"
	"wasabi/backup"
	"wasabi/cleanup"
	"wasabi/client"
	"wasabi/config"
	"wasabi/dat"
	"wasabi/db"
	"wasabi/deadstock"
	"wasabi/edge"
	"wasabi/guidedinventory"
	"wasabi/inout"
	"wasabi/inventory"
	"wasabi/loader"
	"wasabi/masteredit"
	"wasabi/medrec"
	"wasabi/orders"
	"wasabi/precomp"
	"wasabi/pricing"
	"wasabi/product"
	"wasabi/reprocess"
	"wasabi/returns"
	"wasabi/search"
	"wasabi/sequence"
	"wasabi/settings"
	"wasabi/stock"
	"wasabi/transaction"
	"wasabi/units"
	"wasabi/usage"
	"wasabi/valuation"
)

func main() {
	conn, err := sql.Open("sqlite3", "./wasabi.db")
	if err != nil {
		log.Fatalf("db open error: %v", err)
	}
	conn.Exec("PRAGMA journal_mode = WAL;")
	conn.Exec("PRAGMA busy_timeout = 5000;")
	conn.SetMaxOpenConns(1)
	conn.SetMaxIdleConns(1)
	defer conn.Close()

	if _, err := config.LoadConfig(); err != nil {
		log.Printf("WARN: Could not load config.json: %v", err)
	}

	if err := loader.InitDatabase(conn); err != nil {
		log.Fatalf("master data initialization failed: %v", err)
	}

	if err := db.ApplyMigrations(conn); err != nil {
		log.Fatalf("database migration failed: %v", err)
	}

	if _, err := units.LoadTANIFile("SOU/TANI.CSV"); err != nil {
		log.Fatalf("tani master init failed: %v", err)
	}
	log.Println("Master data loaded successfully.")

	mux := http.NewServeMux()

	mux.HandleFunc("/api/masters/cleanup/candidates", cleanup.GetCandidatesHandler(conn))
	mux.HandleFunc("/api/masters/cleanup/execute", cleanup.ExecuteCleanupHandler(conn))
	mux.HandleFunc("/api/clients", client.GetAllClientsHandler(conn))
	mux.HandleFunc("/api/products/search", search.SearchJcshmsByNameHandler(conn))
	mux.HandleFunc("/api/masters/search_all", search.SearchAllMastersHandler(conn))
	mux.HandleFunc("/api/masters/by_yj_code", search.GetMastersByYjCodeHandler(conn))
	mux.HandleFunc("/api/valuation", valuation.GetValuationHandler(conn))
	mux.HandleFunc("/api/valuation/export", valuation.ExportValuationHandler(conn))
	mux.HandleFunc("/api/dat/upload", dat.UploadDatHandler(conn))
	mux.HandleFunc("/api/usage/upload", usage.UploadUsageHandler(conn))
	mux.HandleFunc("/api/inout/save", inout.SaveInOutHandler(conn))
	mux.HandleFunc("/api/inventory/upload", inventory.UploadInventoryHandler(conn))
	mux.HandleFunc("/api/inventory/list", inventory.ListInventoryProductsHandler(conn))
	mux.HandleFunc("/api/inventory/save_manual", inventory.SaveManualInventoryHandler(conn))
	mux.HandleFunc("/api/inventory/migrate", inventory.MigrateInventoryHandler(conn))
	mux.HandleFunc("/api/aggregation", aggregation.GetAggregationHandler(conn))
	mux.HandleFunc("/api/units/map", units.GetTaniMapHandler())
	mux.HandleFunc("/api/receipts", transaction.GetReceiptsHandler(conn))
	mux.HandleFunc("/api/transaction/", transaction.GetTransactionHandler(conn))
	mux.HandleFunc("/api/transaction/delete/", transaction.DeleteTransactionHandler(conn))
	mux.HandleFunc("/api/masters/editable", masteredit.GetEditableMastersHandler(conn))
	mux.HandleFunc("/api/master/update", masteredit.UpdateMasterHandler(conn))
	mux.HandleFunc("/api/master/create_provisional", masteredit.CreateProvisionalMasterHandler(conn))
	mux.HandleFunc("/api/master/set_order_stopped", masteredit.SetOrderStoppedHandler(conn))
	// ▼▼▼【ここに追加】▼▼▼
	mux.HandleFunc("/api/masters/bulk_update_shelf_numbers", masteredit.BulkUpdateShelfNumbersHandler(conn))
	// ▲▲▲【追加ここまで】▲▲▲
	mux.HandleFunc("/api/customers/export", backup.ExportCustomersHandler(conn))
	mux.HandleFunc("/api/customers/import", backup.ImportCustomersHandler(conn))
	mux.HandleFunc("/api/products/export", backup.ExportProductsHandler(conn))
	mux.HandleFunc("/api/products/import", backup.ImportProductsHandler(conn))
	mux.HandleFunc("/api/pricing/backup_export", pricing.BackupExportHandler(conn))
	mux.HandleFunc("/api/transactions/reprocess", reprocess.ProcessTransactionsHandler(conn))
	mux.HandleFunc("/api/deadstock/list", deadstock.GetDeadStockHandler(conn))
	mux.HandleFunc("/api/deadstock/save", deadstock.SaveDeadStockHandler(conn))
	mux.HandleFunc("/api/deadstock/import", deadstock.ImportDeadStockHandler(conn))
	mux.HandleFunc("/api/deadstock/export", deadstock.ExportDeadStockHandler(conn))
	mux.HandleFunc("/api/settings/get", settings.GetSettingsHandler(conn))
	mux.HandleFunc("/api/settings/save", settings.SaveSettingsHandler(conn))
	mux.HandleFunc("/api/settings/wholesalers", settings.WholesalersHandler(conn))
	mux.HandleFunc("/api/settings/wholesalers/", settings.WholesalersHandler(conn))
	mux.HandleFunc("/api/transactions/clear_all", settings.ClearTransactionsHandler(conn))
	mux.HandleFunc("/api/masters/clear_all", settings.ClearMastersHandler(conn))
	mux.HandleFunc("/api/precomp/save", precomp.SavePrecompHandler(conn))
	mux.HandleFunc("/api/precomp/load", precomp.LoadPrecompHandler(conn))
	mux.HandleFunc("/api/precomp/clear", precomp.ClearPrecompHandler(conn))
	mux.HandleFunc("/api/precomp/export", precomp.ExportPrecompHandler(conn))
	mux.HandleFunc("/api/precomp/import", precomp.ImportPrecompHandler(conn))
	mux.HandleFunc("/api/precomp/import_all", precomp.BulkImportPrecompHandler(conn))
	mux.HandleFunc("/api/precomp/export_all", precomp.ExportAllPrecompHandler(conn))
	mux.HandleFunc("/api/precomp/suspend", precomp.SuspendPrecompHandler(conn))
	mux.HandleFunc("/api/precomp/resume", precomp.ResumePrecompHandler(conn))
	mux.HandleFunc("/api/precomp/status", precomp.GetStatusPrecompHandler(conn))
	mux.HandleFunc("/api/orders/candidates", orders.GenerateOrderCandidatesHandler(conn))
	mux.HandleFunc("/api/orders/place", orders.PlaceOrderHandler(conn))
	mux.HandleFunc("/api/returns/candidates", returns.GenerateReturnCandidatesHandler(conn))
	mux.HandleFunc("/api/backorders", backorder.GetBackordersHandler(conn))
	mux.HandleFunc("/api/backorders/delete", backorder.DeleteBackorderHandler(conn))
	mux.HandleFunc("/api/backorders/bulk_delete", backorder.BulkDeleteBackordersHandler(conn))
	mux.HandleFunc("/api/masters/reload_jcshms", loader.CreateMasterUpdateHandler(conn))
	mux.HandleFunc("/api/pricing/export", pricing.GetExportDataHandler(conn))
	mux.HandleFunc("/api/pricing/upload", pricing.UploadQuotesHandler(conn))
	mux.HandleFunc("/api/pricing/update", pricing.BulkUpdateHandler(conn))
	mux.HandleFunc("/api/pricing/all_masters", pricing.GetAllMastersForPricingHandler(conn))
	mux.HandleFunc("/api/pricing/direct_import", pricing.DirectImportHandler(conn))
	mux.HandleFunc("/api/stock/current", stock.GetCurrentStockHandler(conn))
	mux.HandleFunc("/api/stock/all_current", stock.GetAllCurrentStockHandler(conn))
	mux.HandleFunc("/api/medrec/download", medrec.DownloadHandler(conn))
	mux.HandleFunc("/api/edge/download", edge.DownloadHandler(conn))
	mux.HandleFunc("/api/sequence/next/", sequence.GetNextSequenceHandler(conn))
	mux.HandleFunc("/api/products/search_filtered", product.SearchProductsHandler(conn))
	mux.HandleFunc("/api/product/by_gs1", search.GetProductByGS1Handler(conn))
	mux.HandleFunc("/api/inventory/adjust/data", guidedinventory.GetInventoryDataHandler(conn))
	mux.HandleFunc("/api/inventory/adjust/save", guidedinventory.SaveInventoryDataHandler(conn))
	mux.HandleFunc("/api/inventory/by_date", transaction.GetInventoryByDateHandler(conn))
	mux.HandleFunc("/api/transaction/delete_by_id/", transaction.DeleteTransactionByIDHandler(conn))
	mux.HandleFunc("/api/config/usage_path", settings.GetUsagePathHandler(conn))
	mux.HandleFunc("/api/ledger/product/", product.GetProductLedgerHandler(conn))
	// Serve Frontend
	mux.Handle("/static/", http.StripPrefix("/static/", http.FileServer(http.Dir("./static"))))
	mux.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		http.ServeFile(w, r, "./static/index.html")
	})

	port := ":8080"
	log.Printf("Server starting on http://localhost%s", port)
	go openBrowser("http://localhost" + port)
	if err := http.ListenAndServe(port, mux); err != nil {
		log.Fatalf("server failed to start: %v", err)
	}
}

func openBrowser(url string) {
	var err error
	switch runtime.GOOS {
	case "windows":
		err = exec.Command("rundll32", "url.dll,FileProtocolHandler", url).Start()
	case "darwin":
		err = exec.Command("open", url).Start()
	default: // linux, etc.
		err = exec.Command("xdg-open", url).Start()
	}
	if err != nil {
		log.Printf("failed to open browser: %v", err)
	}
}


----- C:\Users\wasab\OneDrive\デスクトップ\WASABI\schema.sql -----
-- 得意先マスターテーブル
CREATE TABLE IF NOT EXISTS client_master (
  client_code TEXT PRIMARY KEY,
  client_name TEXT NOT NULL UNIQUE
);

-- 卸業者マスターテーブル
CREATE TABLE IF NOT EXISTS wholesalers (
  wholesaler_code TEXT PRIMARY KEY,
  wholesaler_name TEXT NOT NULL
);

-- 製品マスターテーブル (最終確定版)
CREATE TABLE IF NOT EXISTS product_master (
    -- 基本情報
    product_code TEXT PRIMARY KEY,
    yj_code TEXT,
    gs1_code TEXT,                       -- 調剤包装単位コード (JC122)
    product_name TEXT,                     -- (役割変更) 規格を含まない基本製品名 (商品名 JC018)
    kana_name TEXT,
    maker_name TEXT,
    
    -- 製品仕様情報
    specification TEXT,                     -- 規格容量 (JC020)
    usage_classification TEXT,
    package_form TEXT,
    yj_unit_name TEXT,
    yj_pack_unit_qty REAL,
    jan_pack_inner_qty REAL,
    jan_unit_code INTEGER,
    jan_pack_unit_qty REAL,
    origin TEXT,
    
    -- 価格情報
    nhi_price REAL,
    purchase_price REAL,
    
    -- 管理フラグ・情報
    flag_poison INTEGER,
    flag_deleterious INTEGER,
    flag_narcotic INTEGER,
    flag_psychotropic INTEGER,
    flag_stimulant INTEGER,
    flag_stimulant_raw INTEGER,
    is_order_stopped INTEGER DEFAULT 0,
    supplier_wholesale TEXT,

    -- ユーザー定義項目
    group_code TEXT,
    shelf_number TEXT,
    category TEXT,
    user_notes TEXT
);

-- 取引記録テーブル
CREATE TABLE IF NOT EXISTS transaction_records (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  transaction_date TEXT,
  client_code TEXT,
  receipt_number TEXT,
  line_number TEXT,
  flag INTEGER,
  jan_code TEXT,
  yj_code TEXT,
  product_name TEXT, -- 注意: ここには取引時点での規格込み名称が保存される
  kana_name TEXT,
  usage_classification TEXT,
  package_form TEXT,
  package_spec TEXT,
  maker_name TEXT,
  dat_quantity REAL,
  jan_pack_inner_qty REAL,
  jan_quantity REAL,
  jan_pack_unit_qty REAL,
  jan_unit_name TEXT,
  jan_unit_code TEXT,
  yj_quantity REAL,
  yj_pack_unit_qty REAL,
  yj_unit_name TEXT,
  unit_price REAL,
  purchase_price REAL,
  supplier_wholesale TEXT,
  subtotal REAL,
  tax_amount REAL,
  tax_rate REAL,
  expiry_date TEXT,
  lot_number TEXT,
  flag_poison INTEGER,
  flag_deleterious INTEGER,
  flag_narcotic INTEGER,
  flag_psychotropic INTEGER,
  flag_stimulant INTEGER,
  flag_stimulant_raw INTEGER,
  process_flag_ma TEXT
);

-- (以降のテーブル定義は変更ありません)

-- 予製レコードテーブル
CREATE TABLE IF NOT EXISTS precomp_records (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  transaction_date TEXT,
  client_code TEXT,
  receipt_number TEXT,
  line_number TEXT,
  jan_code TEXT,
  yj_code TEXT,
  product_name TEXT,
  kana_name TEXT,
  usage_classification TEXT,
  package_form TEXT,
  package_spec TEXT,
  maker_name TEXT,
  jan_pack_inner_qty REAL,
  jan_quantity REAL,
  jan_pack_unit_qty REAL,
  jan_unit_name TEXT,
  jan_unit_code TEXT,
  yj_quantity REAL,
  yj_pack_unit_qty REAL,
  yj_unit_name TEXT,
  purchase_price REAL,
  supplier_wholesale TEXT,
  created_at TEXT NOT NULL,
  status TEXT NOT NULL DEFAULT 'active',
  UNIQUE(client_code, jan_code)
);

-- 発注残管理テーブル
CREATE TABLE IF NOT EXISTS backorders (
  yj_code TEXT NOT NULL,
  package_form TEXT NOT NULL,
  jan_pack_inner_qty REAL NOT NULL,
  yj_unit_name TEXT NOT NULL,
  order_date TEXT NOT NULL,
  yj_quantity REAL NOT NULL,
  product_name TEXT,
  PRIMARY KEY (yj_code, package_form, jan_pack_inner_qty, yj_unit_name)
);

-- 手入力用ロット・期限情報テーブル
CREATE TABLE IF NOT EXISTS dead_stock_list (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  product_code TEXT NOT NULL,
  yj_code TEXT,
  package_form TEXT,
  jan_pack_inner_qty REAL,
  yj_unit_name TEXT,
  stock_quantity_jan REAL NOT NULL,
  expiry_date TEXT,
  lot_number TEXT,
  created_at TEXT NOT NULL,
  UNIQUE(product_code, expiry_date, lot_number)
);
-- JCSHMSマスター (SOU/JCSHMS.CSV から読み込み)
CREATE TABLE IF NOT EXISTS jcshms (
  JC000 TEXT, JC001 TEXT, JC002 TEXT, JC003 TEXT, JC004 TEXT, JC005 TEXT, JC006 TEXT, JC007 TEXT, JC008 TEXT, JC009 TEXT,
  JC010 TEXT, JC011 TEXT, JC012 TEXT, JC013 TEXT, JC014 TEXT, JC015 TEXT, JC016 TEXT, JC017 TEXT, JC018 TEXT, JC019 TEXT,
  JC020 TEXT, JC021 TEXT, JC022 TEXT, JC023 TEXT, JC024 TEXT, JC025 TEXT, JC026 TEXT, JC027 TEXT, JC028 TEXT, JC029 TEXT,
  JC030 TEXT, JC031 TEXT, JC032 TEXT, JC033 TEXT, JC034 TEXT, JC035 TEXT, JC036 TEXT, JC037 TEXT, JC038 TEXT, JC039 TEXT,
  JC040 TEXT, JC041 TEXT, JC042 TEXT, JC043 TEXT, JC044 REAL, JC045 TEXT, JC046 TEXT, JC047 TEXT, JC048 TEXT, JC049 TEXT,
  JC050 REAL, JC051 TEXT, JC052 TEXT, JC053 TEXT, JC054 TEXT, JC055 TEXT, JC056 TEXT, JC057 TEXT, JC058 TEXT, JC059 TEXT,
  JC060 TEXT, JC061 INTEGER, JC062 INTEGER, JC063 INTEGER, JC064 INTEGER, JC065 INTEGER, JC066 INTEGER, JC067 TEXT, JC068 TEXT, JC069 TEXT,
  JC070 TEXT, JC071 TEXT, JC072 TEXT, JC073 TEXT, JC074 TEXT, JC075 TEXT, JC076 TEXT, JC077 TEXT, JC078 TEXT, JC079 TEXT,
  JC080 TEXT, JC081 TEXT, JC082 TEXT, JC083 TEXT, JC084 TEXT, JC085 TEXT, JC086 TEXT, JC087 TEXT, JC088 TEXT, JC089 TEXT,
  JC090 TEXT, JC091 TEXT, JC092 TEXT, JC093 TEXT, JC094 TEXT, JC095 TEXT, JC096 TEXT, JC097 TEXT, JC098 TEXT, JC099 TEXT,
  JC100 TEXT, JC101 TEXT, JC102 TEXT, JC103 TEXT, JC104 TEXT, JC105 TEXT, JC106 TEXT, JC107 TEXT, JC108 TEXT, JC109 TEXT,
  JC110 TEXT, JC111 TEXT, JC112 TEXT, JC113 TEXT, JC114 TEXT, JC115 TEXT, JC116 TEXT, JC117 TEXT, JC118 TEXT, JC119 TEXT,
  JC120 TEXT, JC121 TEXT, JC122 TEXT, JC123 TEXT, JC124 TEXT,
  PRIMARY KEY(JC000)
);

-- JANCODEマスター (SOU/JANCODE.CSV から読み込み)
CREATE TABLE IF NOT EXISTS jancode (
  JA000 TEXT, JA001 TEXT, JA002 TEXT, JA003 TEXT, JA004 TEXT, JA005 TEXT, JA006 REAL, JA007 TEXT, JA008 REAL, JA009 TEXT,
  JA010 TEXT, JA011 TEXT, JA012 TEXT, JA013 TEXT, JA014 TEXT, JA015 TEXT, JA016 TEXT, JA017 TEXT, JA018 TEXT, JA019 TEXT,
  JA020 TEXT, JA021 TEXT, JA022 TEXT, JA023 TEXT, JA024 TEXT, JA025 TEXT, JA026 TEXT, JA027 TEXT, JA028 TEXT, JA029 TEXT,
  PRIMARY KEY(JA001)
);

-- 自動採番用シーケンステーブル
CREATE TABLE IF NOT EXISTS code_sequences (
  name TEXT PRIMARY KEY,
  last_no INTEGER NOT NULL
);
INSERT OR IGNORE INTO code_sequences(name, last_no) VALUES ('MA2Y', 0);
INSERT OR IGNORE INTO code_sequences(name, last_no) VALUES ('CL', 0);


-- パフォーマンス向上のためのインデックス
CREATE UNIQUE INDEX IF NOT EXISTS idx_transactions_unique_slip
  ON transaction_records(transaction_date, client_code, receipt_number, line_number)
  WHERE receipt_number != '';

CREATE INDEX IF NOT EXISTS idx_transactions_jan_code ON transaction_records (jan_code);
CREATE INDEX IF NOT EXISTS idx_transactions_date ON transaction_records (transaction_date);
CREATE INDEX IF NOT EXISTS idx_transactions_flag ON transaction_records (flag);
CREATE INDEX IF NOT EXISTS idx_product_master_kana_name ON product_master (kana_name);
CREATE INDEX IF NOT EXISTS idx_tx_jan_date ON transaction_records(jan_code, transaction_date);
CREATE INDEX IF NOT EXISTS idx_transactions_receipt_number ON transaction_records (receipt_number);
CREATE INDEX IF NOT EXISTS idx_transactions_process_flag_ma ON transaction_records (process_flag_ma);
CREATE INDEX IF NOT EXISTS idx_transactions_flag_date ON transaction_records (flag, transaction_date);

