// C:\Users\wasab\OneDrive\デスクトップ\WASABI\static\js\deadstock.js

import { hiraganaToKatakana } from './utils.js';
import { showModal } from './inout_modal.js';
// ▼▼▼【修正点】'./common_table.js'からのインポートを完全に削除 ▼▼▼
// import { createUploadTableHTML } from './common_table.js'; 
import { clientMap, wholesalerMap } from './master_data.js';
// ▲▲▲ 修正ここまで ▲▲▲

let view, outputContainer, startDateInput, endDateInput, excludeZeroStockCheckbox, createCsvBtn, kanaNameInput, dosageFormInput, importBtn, importInput;

// =================================================================
// ▼▼▼【ここからが修正箇所です】▼▼▼
// =================================================================

// ▼▼▼【修正点】'common_table.js'から'createUploadTableHTML'関数をここに移動 ▼▼▼
function createUploadTableHTML(tableId) { 
  const colgroup = `
    <colgroup>
      <col class="col-1"><col class="col-2"><col class="col-3"><col class="col-4"><col class="col-5">
      <col class="col-6"><col class="col-7"><col class="col-8"><col class="col-9"><col class="col-10">
      <col class="col-11"><col class="col-12"><col class="col-13"><col class="col-14">
    </colgroup>
  `;
  const header = `
    <thead>
      <tr>
        <th rowspan="2">－</th>
        <th>日付</th><th class="yj-jan-code">YJ</th><th colspan="2">製品名</th>
        <th>個数</th><th>YJ数量</th><th>YJ包装数</th><th>YJ単位</th>
        <th>単価</th><th>税額</th><th>期限</th><th>得意先</th><th>行</th>
      </tr>
      <tr>
        <th>種別</th><th class="yj-jan-code">JAN</th><th>包装</th><th>メーカー</th>
        <th>剤型</th><th>JAN数量</th><th>JAN包装数</th><th>JAN単位</th>
        <th>金額</th><th>税率</th><th>ロット</th><th>伝票番号</th><th>MA</th>
      </tr>
    </thead>
  `;
  // テーブルの骨格と空のtbodyを返すように変更
  return `<table id="${tableId}" class="data-table">${colgroup}${header}<tbody></tbody></table>`;
}
// ▲▲▲ 修正ここまで ▲▲▲

const transactionTypeMap = { 
    0: "棚卸", 1: "納品", 2: "返品", 3: "処方", 4: "棚卸増", 
    5: "棚卸減", 11: "入庫", 12: "出庫", 30: "月末", 
};

function getClientOrWholesalerName(rec) { 
    if (!rec.clientCode) return '';
    if (rec.flag === 1 || rec.flag === 2) { 
        return wholesalerMap.get(rec.clientCode) || rec.clientCode; 
    }
    return clientMap.get(rec.clientCode) || rec.clientCode;
}

function renderTransactionHistoryRows(records) {
  if (!records || records.length === 0) { 
    return `<tr><td colspan="14">対象データがありません。</td></tr>`; 
  }
  
  let html = ""; 
  records.forEach(rec => { 
    html += `
      <tr>
        <td rowspan="2"></td>
        <td>${rec.transactionDate || ""}</td>
        <td class="yj-jan-code">${rec.yjCode || ""}</td>
        <td class="left" colspan="2">${rec.productName || ""}</td>
        <td class="right">${rec.datQuantity?.toFixed(2) || ""}</td>
        <td class="right">${rec.yjQuantity?.toFixed(2) || ""}</td>
        <td class="right">${rec.yjPackUnitQty || ""}</td>
        <td>${rec.yjUnitName || ""}</td>
        <td class="right">${rec.unitPrice?.toFixed(4) || ""}</td>
        <td class="right">${rec.taxAmount?.toFixed(2) || ""}</td>
        <td>${rec.expiryDate || ""}</td>
        <td class="left">${getClientOrWholesalerName(rec)}</td>
        <td class="right">${rec.lineNumber || ""}</td>
      </tr>
      <tr>
        <td>${transactionTypeMap[rec.flag] ?? ""}</td>
        <td class="yj-jan-code">${rec.janCode || ""}</td>
        <td class="left">${rec.packageSpec || ""}</td>
        <td class="left">${rec.makerName || ""}</td>
        <td class="left">${rec.usageClassification || ""}</td>
        <td class="right">${rec.janQuantity?.toFixed(2) || ""}</td>
        <td class="right">${rec.janPackUnitQty || ""}</td>
        <td>${rec.janUnitName || ""}</td>
        <td class="right">${rec.subtotal?.toFixed(2) || ""}</td>
        <td class="right">${rec.taxRate != null ? (rec.taxRate * 100).toFixed(0) + "%" : ""}</td>
        <td class="left">${rec.lotNumber || ""}</td>
        <td class="left">${rec.receiptNumber || ""}</td>
        <td class="left">${rec.processFlagMA || ""}</td>
      </tr>
    `;
  });
  return html;
}

function createRowHTML(record = {}, unitName = '単位', isFirstRow = false) {
    const isNewRecord = !record.id;
    const stockQty = isNewRecord ? 0 : (record.stockQuantityJan || 0);
    const expiry = record.expiryDate || '';
    const lot = record.lotNumber || '';
    const recordId = record.id || `new-${Date.now()}`;
    // ▼▼▼ [修正箇所] isFirstRowによる分岐をなくし、常に「－」ボタンを表示する ▼▼▼
    const buttonHTML = `<button class="btn delete-ds-row-btn">－</button>`;
    // ▲▲▲ 修正ここまで ▲▲▲
    return `
        <tr data-record-id="${recordId}">
            <td>
                <div style="display: flex; align-items: center;">
                    <input type="number" class="ds-stock-quantity" value="${stockQty}" step="any" style="flex-grow: 1;">
                    <span class="ds-unit-name" style="margin-left: 5px;">${unitName}</span>
                </div>
            </td>
            <td><input type="text" class="ds-expiry-date" placeholder="YYYYMM" value="${expiry}"></td>
            <td><input type="text" class="ds-lot-number" value="${lot}"></td>
            <td>${buttonHTML}</td>
        </tr>
    `;
}

function createProductHTML(product) {
    const janUnit = product.yjUnitName || '単位';
    let rowsHTML = '';
    if (product.savedRecords && product.savedRecords.length > 0) {
        // isFirstRowを常にfalseにすることで、全行に「－」ボタンが付くようになります
        rowsHTML = product.savedRecords.map((rec, index) => createRowHTML(rec, janUnit, false)).join('');
    } else {
        // 既存レコードがない場合は、空の入力行を1つ用意します
        rowsHTML = createRowHTML({ stockQuantityJan: product.currentStock }, janUnit, false);
    }

    return `
        <div class="dead-stock-product-container" 
             data-product-code="${product.productCode}" 
             data-yj-code="${product.yjCode}"
             data-product-name="${product.productName}"
             data-package-form="${product.packageForm}"
             data-jan-pack-inner-qty="${product.janPackInnerQty}"
             data-yj-unit-name="${product.yjUnitName}">
      
            <div class="product-header" style="padding: 4px 8px; background-color: #f0f0f0; border-top: 1px solid #ccc; display: flex; justify-content: space-between;">
                <span>
                    <strong>JAN: ${product.productCode}</strong>
                    <span style="margin-left: 10px;">${product.productName}</span>
                </span>
                <span>在庫: ${product.currentStock.toFixed(2)} ${janUnit}</span>
            </div>
            <div class="dead-stock-entry-container">
                <table class="dead-stock-entry-table">
                    <thead>
                        <tr>
                            <th style="width: 20%;">在庫数量</th>
                            <th style="width: 30%;">使用期限</th>
                            <th style="width: 40%;">ロット番号</th>
                            <th style="width: 10%;">操作</th>
                        </tr>
                    </thead>
                    <tbody>${rowsHTML}</tbody>
                </table>
 
                <div class="entry-controls" style="text-align: right; padding: 4px; display: flex; justify-content: space-between; align-items: center;">
                    <button class="btn add-ds-row-btn">＋ロット情報を追加</button>
                    <button class="btn save-ds-btn" style="background-color: #0d6efd; color: white;">このJANの期限・ロットを保存</button>
                </div>
            </div>
        </div>
    `;
}

function createPackageGroupHTML(pkgGroup) {
    const productsHTML = pkgGroup.products.map(createProductHTML).join('');
    const unitName = pkgGroup.products.length > 0 ? (pkgGroup.products[0].yjUnitName || '単位') : '単位';
    
    let historyHtml = '';
    if (pkgGroup.recentTransactions && pkgGroup.recentTransactions.length > 0) {
        const historyTableId = `history-table-${pkgGroup.packageKey.replace(/[^a-zA-Z0-9]/g, '')}`;
        const tableShell = createUploadTableHTML(historyTableId); // ローカル関数を呼び出し
        const tableRows = renderTransactionHistoryRows(pkgGroup.recentTransactions);
        const fullTableHtml = tableShell.replace('<tbody></tbody>', `<tbody>${tableRows}</tbody>`);
        
        historyHtml = `
            <div class="recent-history-container" style="padding: 5px 10px; background-color: #e9ecef;">
                <details>
                    <summary style="font-weight: bold; cursor: pointer;">期間前取引履歴 (${pkgGroup.recentTransactions.length}件)</summary>
                    <div style="padding-top: 5px;">${fullTableHtml}</div>
                </details>
            </div>
        `;
    }

    return `
        <div class="dead-stock-package-container">
            <div class="agg-pkg-header">
                <span>包装: ${pkgGroup.packageKey}</span>
                <span class="header-info">合計在庫: ${pkgGroup.totalStock.toFixed(2)} ${unitName}</span>
            </div>
            ${historyHtml}
            <div class="products-container">${productsHTML}</div>
        </div>
    `;
}

function renderDeadStockList(data) {
    if (!data || data.length === 0) {
       outputContainer.innerHTML = "<p>対象データが見つかりませんでした。</p>";
        return;
    }

    let html = data.map(group => {
        const unitName = group.packageGroups.length > 0 && group.packageGroups[0].products.length > 0 ? (group.packageGroups[0].yjUnitName || '単位') : '単位';
        const packagesHTML = group.packageGroups.map(createPackageGroupHTML).join('');
        
        return `<div class="yj-group-wrapper" 
                      data-yj-code-wrapper="${group.yjCode}"
                      data-kana-name="${group.productName}">
            <div class="agg-yj-header">
                <div style="flex-grow: 1;">
                    <span>YJ: ${group.yjCode}</span>
                    <span class="product-name">${group.productName}</span>
                    <span class="header-info">総在庫: ${group.totalStock.toFixed(2)} ${unitName}</span>
                </div>
                <button class="add-jan-btn btn" data-yj-code="${group.yjCode}">JAN品目追加</button>
            </div>
            <div class="packages-container">
                ${packagesHTML}
            </div>
        </div>`;
    }).join('');

    outputContainer.innerHTML = html;
}

// =================================================================
// ▲▲▲【修正ここまで】▲▲▲
// =================================================================


export function initDeadStock() {
    view = document.getElementById('deadstock-view');
    if (!view) return;

    outputContainer = document.getElementById('deadstock-output-container');
    startDateInput = document.getElementById('ds-startDate');
    endDateInput = document.getElementById('ds-endDate');
    excludeZeroStockCheckbox = document.getElementById('ds-exclude-zero-stock');
    createCsvBtn = document.getElementById('create-deadstock-csv-btn');
    kanaNameInput = document.getElementById('ds-kanaName');
    dosageFormInput = document.getElementById('ds-dosageForm');
    importBtn = document.getElementById('import-deadstock-btn');
    importInput = document.getElementById('importDeadstockInput');

    const today = new Date();
    const threeMonthsAgo = new Date(today.getFullYear(), today.getMonth() - 3, 1);
    endDateInput.value = today.toISOString().slice(0, 10);
    startDateInput.value = threeMonthsAgo.toISOString().slice(0, 10);
    
    // ▼▼▼ [修正箇所] イベントリスナーを view から outputContainer に変更し、その中に全てのクリック処理をまとめます ▼▼▼
    if (outputContainer) {
        outputContainer.addEventListener('click', async (e) => {
            const target = e.target;

            // 「ロット情報を追加」ボタンの処理
            if (target.classList.contains('add-ds-row-btn')) {
                const productContainer = target.closest('.dead-stock-product-container');
                const unitNameSpan = productContainer.querySelector('.ds-unit-name');
                const unitName = unitNameSpan ? unitNameSpan.textContent : '単位';
                const tbody = productContainer.querySelector('tbody');
                tbody.insertAdjacentHTML('beforeend', createRowHTML({}, unitName, false));
            }

            // 「－」(削除)ボタンの処理
            if (target.classList.contains('delete-ds-row-btn')) {
                const row = target.closest('tr');
                if (row) {
                    row.remove();
                }
            }
            
            // 「このJANの期限・ロットを保存」ボタンの処理
            if (target.classList.contains('save-ds-btn')) {
                const productContainer = target.closest('.dead-stock-product-container');
                const productCode = productContainer.dataset.productCode;
                const yjCode = productContainer.dataset.yjCode;
                const rows = productContainer.querySelectorAll('tbody tr');
                const payload = [];
                const pkgContainer = productContainer.closest('.dead-stock-package-container');
                const pkgHeaderText = pkgContainer.querySelector('.agg-pkg-header span:first-child').textContent;
                const pkgInfo = pkgHeaderText.replace('包装: ', '').split('|');
                rows.forEach(row => {
                    payload.push({
                        productCode: productCode,
                        yjCode: yjCode,
                        packageForm: pkgInfo[0] || '',
                        janPackInnerQty: parseFloat(pkgInfo[1]) || 0,
                        yjUnitName: pkgInfo[2] || '',
                        stockQuantityJan: parseFloat(row.querySelector('.ds-stock-quantity').value) || 0,
                        expiryDate: row.querySelector('.ds-expiry-date').value,
                        lotNumber: row.querySelector('.ds-lot-number').value,
                    });
                });
                window.showLoading();
                try {
                    const res = await fetch('/api/deadstock/save', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload),
                    });
                    const resData = await res.json();
                    if (!res.ok) throw new Error(resData.message || '保存に失敗しました。');
                    window.showNotification(resData.message, 'success');
                } catch (err) {
                    window.showNotification(`エラー: ${err.message}`, 'error');
                } finally {
                    window.hideLoading();
                }
            }
            
            // 「JAN品目追加」ボタンの処理
            if (target.classList.contains('add-jan-btn')) {
                const yjCode = target.dataset.yjCode;
                window.showLoading();
                try {
                    const resMasters = await fetch(`/api/masters/by_yj_code?yj_code=${yjCode}`);
                    if (!resMasters.ok) throw new Error('製品リストの取得に失敗');
                    const masters = await resMasters.json();
                    if (!masters || masters.length === 0) {
                        throw new Error('このYJコードに紐づく製品マスターが見つかりません。');
                    }
                    
                    const targetWrapper = target.closest(`[data-yj-code-wrapper]`);
                    showModal(targetWrapper, async (selectedProduct, wrapper) => {
                        window.showLoading();
                        try {
                            const resStock = await fetch(`/api/stock/current?jan_code=${selectedProduct.productCode}`);
                            if (!resStock.ok) throw new Error('在庫数の取得に失敗');
                            const stockData = await resStock.json();
                            
                            const newPackageKey = `${selectedProduct.packageForm}|${selectedProduct.janPackInnerQty}|${selectedProduct.yjUnitName}`;
                            
                            const newProductData = {
                                ...selectedProduct,
                                currentStock: stockData.stock,
                                savedRecords: [],
                            };
                            
                            const newProductHTML = createProductHTML(newProductData);

                            const packagesContainer = wrapper.querySelector('.packages-container');
                            let targetPackageContainer = null;
                            packagesContainer.querySelectorAll('.dead-stock-package-container').forEach(pkgDiv => {
                                const headerText = pkgDiv.querySelector('.agg-pkg-header span:first-child').textContent;
                                if (headerText.includes(newPackageKey)) {
                                    targetPackageContainer = pkgDiv.querySelector('.products-container');
                                }
                            });
                            if (!targetPackageContainer) {
                                const newPackageGroupData = {
                                    packageKey: newPackageKey,
                                    totalStock: newProductData.currentStock,
                                    products: [newProductData]
                                };
                                const newPackageGroupHTML = createPackageGroupHTML(newPackageGroupData);
                                packagesContainer.insertAdjacentHTML('beforeend', newPackageGroupHTML);
                            } else {
                                targetPackageContainer.insertAdjacentHTML('beforeend', newProductHTML);
                            }
                        } catch (err) {
                            window.showNotification(err.message, 'error');
                        } finally {
                            window.hideLoading();
                        }
                    }, { initialResults: masters, searchApi: `/api/masters/by_yj_code?yj_code=${yjCode}` });
                } catch (err) {
                    window.showNotification(err.message, 'error');
                } finally {
                    window.hideLoading();
                }
            }
        });
    }

    // 「リスト作成」ボタンのイベントリスナーは静的なので、viewに設定したままでOK
    if (view) {
        const runBtn = view.querySelector('#run-dead-stock-btn');
        if (runBtn) {
            runBtn.addEventListener('click', () => {
                window.showLoading();
                const params = new URLSearchParams({
                    startDate: startDateInput.value.replace(/-/g, ''),
                    endDate: endDateInput.value.replace(/-/g, ''),
                    excludeZeroStock: excludeZeroStockCheckbox.checked,
                    kanaName: hiraganaToKatakana(kanaNameInput.value),
                    dosageForm: dosageFormInput.value,
                });
                fetch(`/api/deadstock/list?${params.toString()}`)
                    .then(res => {
                        if (!res.ok) { return res.text().then(text => { throw new Error(text || 'Failed to generate dead stock list') }); }
                        return res.json();
                    })
                    .then(data => renderDeadStockList(data))
                    .catch(err => { outputContainer.innerHTML = `<p style="color:red;">エラー: ${err.message}</p>`; })
                    .finally(() => { window.hideLoading(); });
            });
        }
    }

    if (createCsvBtn) {
        createCsvBtn.addEventListener('click', () => {
            const dataForCsv = [];
            document.querySelectorAll('.yj-group-wrapper').forEach(yjDiv => {
                const yjCode = yjDiv.querySelector('.agg-yj-header span:first-child').textContent.replace('YJ: ', '');
                const kanaName = yjDiv.dataset.kanaName;
                yjDiv.querySelectorAll('.dead-stock-product-container').forEach(productDiv => {
                    const janCode = productDiv.dataset.productCode;
                    const productName = productDiv.dataset.productName;
                    const packageForm = productDiv.dataset.packageForm;
                    const janPackInnerQty = productDiv.dataset.janPackInnerQty;
                    productDiv.querySelectorAll('tbody tr').forEach(row => {
                        const quantityInput = row.querySelector('.ds-stock-quantity');
                        const quantity = parseFloat(quantityInput.value);
                        if (quantity > 0) {
                            dataForCsv.push({
                                yjCode: yjCode,
                                janCode: janCode,
                                productName: productName,
                                kanaName: kanaName,
                                quantity: quantity,
                                unit: row.querySelector('.ds-unit-name').textContent,
                                expiry: row.querySelector('.ds-expiry-date').value,
                                lot: row.querySelector('.ds-lot-number').value.trim(),
                                packageForm: packageForm,
                                janPackInnerQty: janPackInnerQty,
                            });
                        }
                    });
                });
            });
            if (dataForCsv.length === 0) {
                window.showNotification('数量が1以上のエクスポート対象データがありません。', 'error');
                return;
            }

            dataForCsv.sort((a, b) => {
                return a.kanaName.localeCompare(b.kanaName, 'ja');
            });

            const header = ["YJコード", "JANコード", "製品名", "数量", "単位", "使用期限", "ロット番号", "包装形態", "内包装数量"];
            const csvRows = dataForCsv.map(d =>
                [`"${d.yjCode}"`, `"${d.janCode}"`, `"${d.productName}"`, d.quantity, `"${d.unit}"`, `"${d.expiry}"`, `"${d.lot}"`, `"${d.packageForm}"`, d.janPackInnerQty].join(',')
            );
            const csvContent = [header.join(','), ...csvRows].join('\r\n');

            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement("a");
            const dateStr = endDateInput.value.replace(/-/g, '');
            const fileName = `デッドストック_${dateStr}.csv`;

            link.setAttribute("href", URL.createObjectURL(blob));
            link.setAttribute("download", fileName);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);

            window.showNotification('CSVファイルを作成しました。', 'success');
        });
    }

    if (importBtn) {
        importBtn.addEventListener('click', () => {
            if (importInput) {
                importInput.click();
            }
        });
    }

    if (importInput) {
        importInput.addEventListener('change', async (event) => {
            const file = event.target.files[0];
            if (!file) return;

            const formData = new FormData();
            formData.append('file', file);

            window.showLoading();
            
            try {
                const res = await fetch('/api/deadstock/import', {
                    method: 'POST',
                    body: formData,
                });
                const resData = await res.json();
                if (!res.ok) {
                    throw new Error(resData.message || 'インポートに失敗しました。');
                }
                window.showNotification(resData.message, 'success');
                document.getElementById('run-dead-stock-btn').click();
            } catch (err) {
                console.error(err);
                window.showNotification(`エラー: ${err.message}`, 'error');
            } finally {
                window.hideLoading();
                event.target.value = '';
            }
        });
    }
    
    if(view) {
        view.addEventListener('click', async (e) => {
            const target = e.target;

            if (target.id === 'run-dead-stock-btn') {
                window.showLoading();
                const params = new URLSearchParams({
                    startDate: startDateInput.value.replace(/-/g, ''),
                    endDate: endDateInput.value.replace(/-/g, ''),
                    excludeZeroStock: excludeZeroStockCheckbox.checked,
                    kanaName: hiraganaToKatakana(kanaNameInput.value),
                    dosageForm: dosageFormInput.value,
                });

                try {
                    const res = await fetch(`/api/deadstock/list?${params.toString()}`);
                    if (!res.ok) {
                        const errText = await res.text();
                        throw new Error(errText || 'Failed to generate dead stock list');
                    }
                    const data = await res.json();
                    renderDeadStockList(data);
                } catch (err) {
                    outputContainer.innerHTML = `<p style="color:red;">エラー: ${err.message}</p>`;
                } finally {
                    window.hideLoading();
                }
            }
            
            if (target.classList.contains('add-ds-row-btn')) {
                // ▼▼▼ [修正箇所] closestで探す対象を .dead-stock-product-container に変更 ▼▼▼
                const productContainer = target.closest('.dead-stock-product-container');
                // ▲▲▲ 修正ここまで ▲▲▲
                const unitNameSpan = productContainer.querySelector('.ds-unit-name');
                const unitName = unitNameSpan ? unitNameSpan.textContent : '単位';
                const tbody = productContainer.querySelector('tbody');
                tbody.insertAdjacentHTML('beforeend', createRowHTML({}, unitName, false));
            }

            // ▼▼▼ [修正点3] 存在しなかった削除ボタンの処理をここに追加 ▼▼▼
            if (target.classList.contains('delete-ds-row-btn')) {
                const row = target.closest('tr');
                if (row) {
                    row.remove();
                }
            }
            // ▲▲▲ 修正ここまで ▲▲▲

            if (target.classList.contains('save-ds-btn')) {
                const productContainer = target.closest('.dead-stock-product-container');
                const productCode = productContainer.dataset.productCode;
                const yjCode = productContainer.dataset.yjCode;
                const rows = productContainer.querySelectorAll('tbody tr');
                const payload = [];

                const pkgContainer = productContainer.closest('.dead-stock-package-container');
                const pkgHeaderText = pkgContainer.querySelector('.agg-pkg-header span:first-child').textContent;
                const pkgInfo = pkgHeaderText.replace('包装: ', '').split('|');

                rows.forEach(row => {
                    payload.push({
                        productCode: productCode,
                        yjCode: yjCode,
                        packageForm: pkgInfo[0] || '',
                        janPackInnerQty: parseFloat(pkgInfo[1]) || 0,
                        yjUnitName: pkgInfo[2] || '',
                        stockQuantityJan: parseFloat(row.querySelector('.ds-stock-quantity').value) || 0,
                        expiryDate: row.querySelector('.ds-expiry-date').value,
                        lotNumber: row.querySelector('.ds-lot-number').value,
                    });
                });

                window.showLoading();
                try {
                    const res = await fetch('/api/deadstock/save', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload),
                    });
                    const resData = await res.json();
                    if (!res.ok) throw new Error(resData.message || '保存に失敗しました。');
                    window.showNotification(resData.message, 'success');
                } catch (err) {
                    window.showNotification(`エラー: ${err.message}`, 'error');
                } finally {
                    window.hideLoading();
                }
            }
            
            if (target.classList.contains('add-jan-btn')) {
                const yjCode = target.dataset.yjCode;
                window.showLoading();
                try {
                    const resMasters = await fetch(`/api/masters/by_yj_code?yj_code=${yjCode}`);
                    if (!resMasters.ok) throw new Error('製品リストの取得に失敗');
                    const masters = await resMasters.json();
                    
                    if (!masters || masters.length === 0) {
                        throw new Error('このYJコードに紐づく製品マスターが見つかりません。');
                    }
                    
                    const targetWrapper = target.closest(`[data-yj-code-wrapper]`);
                    showModal(targetWrapper, async (selectedProduct, wrapper) => {
                        window.showLoading();
                        try {
                            const resStock = await fetch(`/api/stock/current?jan_code=${selectedProduct.productCode}`);
                            if (!resStock.ok) throw new Error('在庫数の取得に失敗');
                            const stockData = await resStock.json();
                            
                            const newPackageKey = `${selectedProduct.packageForm}|${selectedProduct.janPackInnerQty}|${selectedProduct.yjUnitName}`;
                            
                            const newProductData = {
                                ...selectedProduct,
                                currentStock: stockData.stock,
                                savedRecords: [],
                            };
                            
                            const newProductHTML = createProductHTML(newProductData);

                            const packagesContainer = wrapper.querySelector('.packages-container');
                            let targetPackageContainer = null;
                            packagesContainer.querySelectorAll('.dead-stock-package-container').forEach(pkgDiv => {
                                const headerText = pkgDiv.querySelector('.agg-pkg-header span:first-child').textContent;
                                if (headerText.includes(newPackageKey)) {
                                    targetPackageContainer = pkgDiv.querySelector('.products-container');
                                }
                            });

                            if (!targetPackageContainer) {
                                const newPackageGroupData = {
                                    packageKey: newPackageKey,
                                    totalStock: newProductData.currentStock,
                                    products: [newProductData]
                                };
                                const newPackageGroupHTML = createPackageGroupHTML(newPackageGroupData);
                                packagesContainer.insertAdjacentHTML('beforeend', newPackageGroupHTML);
                            } else {
                                targetPackageContainer.insertAdjacentHTML('beforeend', newProductHTML);
                            }

                        } catch (err) {
                            window.showNotification(err.message, 'error');
                        } finally {
                            window.hideLoading();
                        }
                    }, { initialResults: masters, searchApi: `/api/masters/by_yj_code?yj_code=${yjCode}` });
                } catch (err) {
                    window.showNotification(err.message, 'error');
                } finally {
                    window.hideLoading();
                }
            }
        });
    }
}
