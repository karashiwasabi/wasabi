import { createUploadTableHTML, renderUploadTableRows } from './common_table.js';

const fileInput = document.getElementById('inventoryFileInput');
const outputContainer = document.getElementById('inventory-output-container');

async function handleInventoryUpload(event) {
    const files = event.target.files;
    if (!files.length) return;

    // ▼▼▼【ここからが修正箇所です】▼▼▼

    // 先に処理中メッセージだけ表示する
    outputContainer.innerHTML = `<p>Processing...</p>`;
    window.showLoading();

    try {
        const formData = new FormData();
        for (const file of files) {
            formData.append('file', file);
        }

        const response = await fetch('/api/inventory/upload', {
            method: 'POST',
            body: formData,
        });
        
        const data = await response.json();
        if (!response.ok) {
            throw new Error(data.message || 'Inventory file processing failed.');
        }

        // --- 修正後の描画ロジック ---
        // 1. データを取得した後に、テーブルの枠と中身をそれぞれ文字列として生成
        const tableShell = createUploadTableHTML('inventory-output-table');
        // 棚卸画面のAPIレスポンスでは、データは 'details' キーに含まれるため data.details を使用 
        const tableBodyContent = renderUploadTableRows(data.details); 
        
        // 2. 文字列を結合して完全なHTMLを作成
        const fullTableHtml = tableShell.replace('<tbody></tbody>', `<tbody>${tableBodyContent}</tbody>`);

        // 3. 完成したHTMLを一度だけDOMに書き込む
        outputContainer.innerHTML = fullTableHtml;
        
        window.showNotification(data.message || 'Inventory file processed successfully.', 'success');

    } catch (err) {
        // エラー時も同様に、テーブルの枠を作ってからエラーメッセージを表示すると確実
        const tableShell = createUploadTableHTML('inventory-output-table');
        const errorRow = `<tr><td colspan="14" class="center" style="color:red;">Error: ${err.message}</td></tr>`;
        outputContainer.innerHTML = tableShell.replace('<tbody></tbody>', `<tbody>${errorRow}</tbody>`);
        
        window.showNotification(err.message, 'error');
    } finally {
        window.hideLoading();
        event.target.value = ''; // ファイル入力をリセット
    }
    // ▲▲▲【修正ここまで】▲▲▲
}

export function initInventoryUpload() {
    if (!fileInput) return;
    fileInput.addEventListener('change', handleInventoryUpload);
}
